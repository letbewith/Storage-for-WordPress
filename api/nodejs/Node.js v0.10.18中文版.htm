<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <title>关于本文档 Node.js v0.10.18 文档 中文版</title>
  <link rel="stylesheet" href="Node.js%20v0.10.18%E4%B8%AD%E6%96%87%E7%89%88_files/style.css">
  <link rel="stylesheet" href="Node.js%20v0.10.18%E4%B8%AD%E6%96%87%E7%89%88_files/sh.css">
  <link rel="canonical" href="http://nodejs.org/api/all.html">
</head>
<body class="alt apidoc" id="api-section-all">

    <div id="intro" class="interior">
        <a href="http://nodeapi.ucdok.com/api/" title="返回首页">
            <img id="logo" src="Node.js%20v0.10.18%E4%B8%AD%E6%96%87%E7%89%88_files/logo-light.png" alt="node.js">
        </a>
    </div>
    <div id="content" class="clearfix">
        <div id="column2" class="interior">
            <ul>
                <li><a href="http://nodeapi.ucdok.com/api/" class="docs current">文档首页</a></li>
                <li><a href="http://nodejs.org/api/">英文版文档</a></li>
            </ul>
            <div style="margin-top:44px; font-size:12px;">
              <a rel="license" href="http://creativecommons.org/licenses/by-nc/3.0/deed.zh"><img alt="知识共享许可协议" style="border-width:0" src="Node.js%20v0.10.18%E4%B8%AD%E6%96%87%E7%89%88_files/88x31.png"></a><br>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc/3.0/deed.zh">知识共享署名-非商业性使用 3.0 未本地化版本许可协议</a>进行许可。
            </div>
        </div>

        <div id="column1" class="interior">
          <header>
            <h1>Node.js v0.10.18 手册 &amp; 文档</h1>
            <div id="gtoc">
              <p>
                <a href="http://nodeapi.ucdok.com/api/index.html" name="toc">索引</a> |
                <a href="http://nodeapi.ucdok.com/api/all.html">在单一页面中浏览</a> |
                <a href="http://nodeapi.ucdok.com/api/all.json">JSON格式</a>
              </p>
            </div>
            <hr>
          </header>

          <div id="toc">
            <h2>目录</h2>
            <ul>
<li><a href="#all_70395">关于本文档</a><ul>
<li><a href="#all_70396">稳定度</a></li>
<li><a href="#all_json_1408">JSON 输出</a></li>
</ul>
</li>
<li><a href="#all_70397">概述</a></li>
<li><a href="#all_70398">全局对象</a><ul>
<li><a href="#all_global_1408">global</a></li>
<li><a href="#all_process_2816">process</a></li>
<li><a href="#all_console_1408">console</a></li>
<li><a href="#all_buffer_4224">类: Buffer</a></li>
<li><a href="#all_require_1408">require()</a><ul>
<li><a href="#all_require_resolve_1408">require.resolve()</a></li>
<li><a href="#all_require_cache_1408">require.cache</a></li>
<li><a href="#all_require_extensions_1408">require.extensions</a></li>
</ul>
</li>
<li><a href="#all_filename_1408">__filename</a></li>
<li><a href="#all_dirname_1408">__dirname</a></li>
<li><a href="#all_module_1408">module</a></li>
<li><a href="#all_exports_1408">exports</a></li>
<li><a href="#all_settimeout_cb_ms_1408">setTimeout(cb, ms)</a></li>
<li><a href="#all_cleartimeout_t_1408">clearTimeout(t)</a></li>
<li><a href="#all_setinterval_cb_ms_1408">setInterval(cb, ms)</a></li>
<li><a href="#all_clearinterval_t_1408">clearInterval(t)</a></li>
</ul>
</li>
<li><a href="#all_70399">控制台</a><ul>
<li><a href="#all_console_log_data_1408">console.log([data], [...])</a></li>
<li><a href="#all_console_info_data_1408">console.info([data], [...])</a></li>
<li><a href="#all_console_error_data_1408">console.error([data], [...])</a></li>
<li><a href="#all_console_warn_data_1408">console.warn([data], [...])</a></li>
<li><a href="#all_console_dir_obj_1408">console.dir(obj)</a></li>
<li><a href="#all_console_time_label_1408">console.time(label)</a></li>
<li><a href="#all_console_timeend_label_1408">console.timeEnd(label)</a></li>
<li><a href="#all_console_trace_label_1408">console.trace(label)</a></li>
<li><a href="#all_console_assert_expression_message_1408">console.assert(expression, [message])</a></li>
</ul>
</li>
<li><a href="#all_70400">定时器</a><ul>
<li><a href="#all_settimeout_callback_delay_arg_1408">setTimeout(callback, delay, [arg], [...])</a></li>
<li><a href="#all_cleartimeout_timeoutid_1408">clearTimeout(timeoutId)</a></li>
<li><a href="#all_setinterval_callback_delay_arg_1408">setInterval(callback, delay, [arg], [...])</a></li>
<li><a href="#all_clearinterval_intervalid_1408">clearInterval(intervalId)</a></li>
<li><a href="#all_unref_1408">unref()</a></li>
<li><a href="#all_ref_1408">ref()</a></li>
<li><a href="#all_setimmediate_callback_arg_1408">setImmediate(callback, [arg], [...])</a></li>
<li><a href="#all_clearimmediate_immediateid_1408">clearImmediate(immediateId)</a></li>
</ul>
</li>
<li><a href="#all_modules_1408">Modules</a><ul>
<li><a href="#all_70401">循环</a></li>
<li><a href="#all_70402">核心模块</a></li>
<li><a href="#all_70403">文件模块</a></li>
<li><a href="#all_node_modules_1408">从<code>node_modules</code>文件夹中加载</a></li>
<li><a href="#all_folders_as_modules_1408">Folders as Modules</a></li>
<li><a href="#all_caching_1408">Caching</a><ul>
<li><a href="#all_module_caching_caveats_1408">Module Caching Caveats</a></li>
</ul>
</li>
<li><a href="#all_the_module_object_1408">The <code>module</code> Object</a><ul>
<li><a href="#all_module_exports_1408">module.exports</a></li>
<li><a href="#all_module_require_id_1408">module.require(id)</a></li>
<li><a href="#all_module_id_1408">module.id</a></li>
<li><a href="#all_module_filename_1408">module.filename</a></li>
<li><a href="#all_module_loaded_1408">module.loaded</a></li>
<li><a href="#all_module_parent_1408">module.parent</a></li>
<li><a href="#all_module_children_1408">module.children</a></li>
</ul>
</li>
<li><a href="#all_70404">总体来说...</a></li>
<li><a href="#all_70405">从全局文件夹加载</a></li>
<li><a href="#all_70406">访问主模块</a></li>
<li><a href="#all_70407">附录： 包管理技巧</a></li>
</ul>
</li>
<li><a href="#all_addons_1408">Addons插件</a><ul>
<li><a href="#all_hello_world_1408">Hello world（世界你好）</a></li>
<li><a href="#all_addon_patterns_1408">Addon patterns（插件方式）</a><ul>
<li><a href="#all_function_arguments_1408">Function arguments（函数参数）</a></li>
<li><a href="#all_callbacks_1408">Callbacks（回调）</a></li>
<li><a href="#all_object_factory_1408">Object factory（对象工厂）</a></li>
<li><a href="#all_function_factory_1408">Function factory（函数工厂）</a></li>
<li><a href="#all_wrapping_c_objects_c_1408">Wrapping C++ objects（包装c++对象）</a></li>
<li><a href="#all_factory_of_wrapped_objects_1408">Factory of wrapped objects（工厂包装对象）</a></li>
<li><a href="#all_passing_wrapped_objects_around_1408">Passing wrapped objects around（传递包装的对象）</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_process_2817">process</a><ul>
<li><a href="#all_exit_codes_1408">Exit Codes</a></li>
<li><a href="#all_exit_7040">事件: 'exit'</a></li>
<li><a href="#all_uncaughtexception_1408">事件: 'uncaughtException'（未捕获错误）</a></li>
<li><a href="#all_signal_events_1408">Signal Events</a></li>
<li><a href="#all_process_stdout_1408">process.stdout</a></li>
<li><a href="#all_process_stderr_1408">process.stderr</a></li>
<li><a href="#all_process_stdin_1408">process.stdin</a></li>
<li><a href="#all_process_argv_1408">process.argv</a></li>
<li><a href="#all_process_execpath_1408">process.execPath</a></li>
<li><a href="#all_process_execargv_1408">process.execArgv</a></li>
<li><a href="#all_process_abort_1408">process.abort()</a></li>
<li><a href="#all_process_chdir_directory_1408">process.chdir(directory)</a></li>
<li><a href="#all_process_cwd_1408">process.cwd()</a></li>
<li><a href="#all_process_env_1408">process.env</a></li>
<li><a href="#all_process_exit_code_1408">process.exit([code])</a></li>
<li><a href="#all_process_exitcode_1408">process.exitCode</a></li>
<li><a href="#all_process_getgid_1408">process.getgid()</a></li>
<li><a href="#all_process_setgid_id_1408">process.setgid(id)</a></li>
<li><a href="#all_process_getuid_1408">process.getuid()</a></li>
<li><a href="#all_process_setuid_id_1408">process.setuid(id)</a></li>
<li><a href="#all_process_getgroups_1408">process.getgroups()</a></li>
<li><a href="#all_process_setgroups_groups_1408">process.setgroups(groups)</a></li>
<li><a href="#all_process_initgroups_user_extra_group_1408">process.initgroups(user, extra_group)</a></li>
<li><a href="#all_process_version_1408">process.version</a></li>
<li><a href="#all_process_versions_1408">process.versions</a></li>
<li><a href="#all_process_config_1408">process.config</a></li>
<li><a href="#all_process_kill_pid_signal_1408">process.kill(pid, [signal])</a></li>
<li><a href="#all_process_pid_1408">process.pid</a></li>
<li><a href="#all_process_title_1408">process.title</a></li>
<li><a href="#all_process_arch_1408">process.arch</a></li>
<li><a href="#all_process_platform_1408">process.platform</a></li>
<li><a href="#all_process_memoryusage_1408">process.memoryUsage()</a></li>
<li><a href="#all_process_nexttick_callback_1408">process.nextTick(callback)</a></li>
<li><a href="#all_process_umask_mask_1408">process.umask([mask])</a></li>
<li><a href="#all_process_uptime_1408">process.uptime()</a></li>
<li><a href="#all_process_hrtime_1408">process.hrtime()</a></li>
</ul>
</li>
<li><a href="#all_utils_1408">utils</a><ul>
<li><a href="#all_util_debuglog_section_1408">util.debuglog(section)</a></li>
<li><a href="#all_error_9856">对Error(错误)对象的内容添加</a></li>
<li><a href="#all_70408">隐式绑定</a></li>
<li><a href="#all_70409">显式绑定</a></li>
<li><a href="#all_domain_create_1408">domain.create()</a></li>
<li><a href="#all_domain_1408">类: Domain</a><ul>
<li><a href="#all_domain_run_fn_1408">domain.run(fn)</a></li>
<li><a href="#all_domain_members_1408">domain.members</a></li>
<li><a href="#all_domain_add_emitter_1408">domain.add(emitter)</a></li>
<li><a href="#all_domain_remove_emitter_1408">domain.remove(emitter)</a></li>
<li><a href="#all_domain_bind_callback_1408">domain.bind(callback)</a><ul>
<li><a href="#all_70410">例子</a></li>
</ul>
</li>
<li><a href="#all_domain_intercept_callback_1408">domain.intercept(callback)</a><ul>
<li><a href="#all_70411">例子</a></li>
</ul>
</li>
<li><a href="#all_domain_enter_1408">domain.enter()</a></li>
<li><a href="#all_domain_exit_1408">domain.exit()</a></li>
<li><a href="#all_domain_dispose_1408">domain.dispose()</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_buffer_4225">Buffer</a><ul>
<li><a href="#all_buffer_4226">类: Buffer</a><ul>
<li><a href="#all_new_buffer_size_1408">new Buffer(size)</a></li>
<li><a href="#all_new_buffer_array_1408">new Buffer(array)</a></li>
<li><a href="#all_new_buffer_str_encoding_1408">new Buffer(str, [encoding])</a></li>
<li><a href="#all_buffer_isencoding_encoding_1408">类方法: Buffer.isEncoding(encoding)</a></li>
<li><a href="#all_buffer_isbuffer_obj_1408">类方法: Buffer.isBuffer(obj)</a></li>
<li><a href="#all_buffer_bytelength_string_encoding_1408">类方法: Buffer.byteLength(string, [encoding])</a></li>
<li><a href="#all_buffer_concat_list_totallength_1408">类方法: Buffer.concat(list, [totalLength])</a></li>
<li><a href="#all_buf_length_1408">buf.length</a></li>
<li><a href="#all_buf_write_string_offset_length_encoding_1408">buf.write(string, [offset], [length], [encoding])</a></li>
<li><a href="#all_buf_tostring_encoding_start_end_1408">buf.toString([encoding], [start], [end])</a></li>
<li><a href="#all_buf_tojson_1408">buf.toJSON()</a></li>
<li><a href="#all_buf_index_1408">buf[index]</a></li>
<li><a href="#all_buf_copy_targetbuffer_targetstart_sourcestart_sourceend_1408">buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])</a></li>
<li><a href="#all_buf_slice_start_end_1408">buf.slice([start], [end])</a></li>
<li><a href="#all_buf_readuint8_offset_noassert_1408">buf.readUInt8(offset, [noAssert])</a></li>
<li><a href="#all_buf_readuint16le_offset_noassert_1408">buf.readUInt16LE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readuint16be_offset_noassert_1408">buf.readUInt16BE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readuint32le_offset_noassert_1408">buf.readUInt32LE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readuint32be_offset_noassert_1408">buf.readUInt32BE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readint8_offset_noassert_1408">buf.readInt8(offset, [noAssert])</a></li>
<li><a href="#all_buf_readint16le_offset_noassert_1408">buf.readInt16LE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readint16be_offset_noassert_1408">buf.readInt16BE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readint32le_offset_noassert_1408">buf.readInt32LE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readint32be_offset_noassert_1408">buf.readInt32BE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readfloatle_offset_noassert_1408">buf.readFloatLE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readfloatbe_offset_noassert_1408">buf.readFloatBE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readdoublele_offset_noassert_1408">buf.readDoubleLE(offset, [noAssert])</a></li>
<li><a href="#all_buf_readdoublebe_offset_noassert_1408">buf.readDoubleBE(offset, [noAssert])</a></li>
<li><a href="#all_buf_writeuint8_value_offset_noassert_1408">buf.writeUInt8(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeuint16le_value_offset_noassert_1408">buf.writeUInt16LE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeuint16be_value_offset_noassert_1408">buf.writeUInt16BE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeuint32le_value_offset_noassert_1408">buf.writeUInt32LE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeuint32be_value_offset_noassert_1408">buf.writeUInt32BE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeint8_value_offset_noassert_1408">buf.writeInt8(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeint16le_value_offset_noassert_1408">buf.writeInt16LE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeint16be_value_offset_noassert_1408">buf.writeInt16BE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeint32le_value_offset_noassert_1408">buf.writeInt32LE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writeint32be_value_offset_noassert_1408">buf.writeInt32BE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writefloatle_value_offset_noassert_1408">buf.writeFloatLE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writefloatbe_value_offset_noassert_1408">buf.writeFloatBE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writedoublele_value_offset_noassert_1408">buf.writeDoubleLE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_writedoublebe_value_offset_noassert_1408">buf.writeDoubleBE(value, offset, [noAssert])</a></li>
<li><a href="#all_buf_fill_value_offset_end_1408">buf.fill(value, [offset], [end])</a></li>
</ul>
</li>
<li><a href="#all_buffer_inspect_max_bytes_1408">buffer.INSPECT_MAX_BYTES</a></li>
<li><a href="#all_slowbuffer_1408">类: SlowBuffer</a></li>
</ul>
</li>
<li><a href="#all_70412">流</a><ul>
<li><a href="#all_api_2816">面向流消费者的 API</a><ul>
<li><a href="#all_stream_readable_2816">类: stream.Readable</a><ul>
<li><a href="#all_readable_1408">事件: 'readable'</a></li>
<li><a href="#all_data_2816">事件: 'data'</a></li>
<li><a href="#all_end_2816">事件: 'end'</a></li>
<li><a href="#all_close_12672">事件: 'close'</a></li>
<li><a href="#all_error_9857">事件: 'error'</a></li>
<li><a href="#all_readable_read_size_2816">readable.read([size])</a></li>
<li><a href="#all_readable_setencoding_encoding_1408">readable.setEncoding(encoding)</a></li>
<li><a href="#all_readable_resume_1408">readable.resume()</a></li>
<li><a href="#all_readable_pause_1408">readable.pause()</a></li>
<li><a href="#all_readable_pipe_destination_options_1408">readable.pipe(destination, [options])</a></li>
<li><a href="#all_readable_unpipe_destination_1408">readable.unpipe([destination])</a></li>
<li><a href="#all_readable_unshift_chunk_1408">readable.unshift(chunk)</a></li>
<li><a href="#all_readable_wrap_stream_1408">readable.wrap(stream)</a></li>
</ul>
</li>
<li><a href="#all_stream_writable_2816">类: stream.Writable</a><ul>
<li><a href="#all_writable_write_chunk_encoding_callback_2816">writable.write(chunk, [encoding], [callback])</a></li>
<li><a href="#all_drain_2816">事件: 'drain'</a></li>
<li><a href="#all_writable_cork_1408">writable.cork()</a></li>
<li><a href="#all_writable_uncork_1408">writable.uncork()</a></li>
<li><a href="#all_writable_end_chunk_encoding_callback_1408">writable.end([chunk], [encoding], [callback])</a></li>
<li><a href="#all_finish_1408">事件: 'finish'</a></li>
<li><a href="#all_pipe_1408">事件: 'pipe'</a></li>
<li><a href="#all_unpipe_1408">事件: 'unpipe'</a></li>
</ul>
</li>
<li><a href="#all_stream_duplex_2816">类: stream.Duplex</a></li>
<li><a href="#all_stream_transform_2816">类: stream.Transform</a></li>
</ul>
</li>
<li><a href="#all_api_2817">面向流实现者的 API</a><ul>
<li><a href="#all_stream_readable_2817">类: stream.Readable</a><ul>
<li><a href="#all_70413">例子: 一个计数流</a></li>
<li><a href="#all_simpleprotocol_v1_sub_optimal_1408">例子: SimpleProtocol v1 (Sub-optimal)</a></li>
<li><a href="#all_new_stream_readable_options_1408">new stream.Readable([options])</a></li>
<li><a href="#all_readable_read_size_2817">readable._read(size)</a></li>
<li><a href="#all_readable_push_chunk_encoding_1408">readable.push(chunk, [encoding])</a></li>
</ul>
</li>
<li><a href="#all_stream_writable_2817">类: stream.Writable</a><ul>
<li><a href="#all_new_stream_writable_options_1408">new stream.Writable([options])</a></li>
<li><a href="#all_writable_write_chunk_encoding_callback_2817">writable._write(chunk, encoding, callback)</a></li>
</ul>
</li>
<li><a href="#all_writable_writev_chunks_callback_1408">writable._writev(chunks, callback)</a></li>
<li><a href="#all_stream_duplex_2817">类: stream.Duplex</a><ul>
<li><a href="#all_new_stream_duplex_options_1408">new stream.Duplex(options)</a></li>
</ul>
</li>
<li><a href="#all_stream_transform_2817">类: stream.Transform</a><ul>
<li><a href="#all_new_stream_transform_options_1408">new stream.Transform([options])</a></li>
<li><a href="#all_transform_transform_chunk_encoding_callback_1408">transform._transform(chunk, encoding, callback)</a></li>
<li><a href="#all_transform_flush_callback_1408">transform._flush(callback)</a></li>
<li><a href="#all_simpleprotocol_v2_1408">例子: <code>SimpleProtocol</code> 解析器 v2</a></li>
</ul>
</li>
<li><a href="#all_stream_passthrough_1408">类: stream.PassThrough</a></li>
</ul>
</li>
<li><a href="#all_70414">流：内部细节</a><ul>
<li><a href="#all_70415">缓冲</a></li>
<li><a href="#all_stream_read_0_1408"><code>stream.read(0)</code></a></li>
<li><a href="#all_stream_push_1408"><code>stream.push('')</code></a></li>
<li><a href="#all_node_1408">与 Node 早期版本的兼容性</a></li>
<li><a href="#all_70416">对象模式</a></li>
<li><a href="#all_70417">状态对象</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_crypto_1408">加密（Crypto）</a><ul>
<li><a href="#all_crypto_getciphers_1408">crypto.getCiphers()</a></li>
<li><a href="#all_crypto_gethashes_1408">crypto.getHashes()</a></li>
<li><a href="#all_crypto_createcredentials_details_1408">crypto.createCredentials(details)</a></li>
<li><a href="#all_crypto_createhash_algorithm_1408">crypto.createHash(algorithm)</a></li>
<li><a href="#all_hash_1408">类: Hash</a><ul>
<li><a href="#all_hash_update_data_input_encoding_1408">hash.update(data, [input_encoding])</a></li>
<li><a href="#all_hash_digest_encoding_1408">hash.digest([encoding])</a></li>
</ul>
</li>
<li><a href="#all_crypto_createhmac_algorithm_key_1408">crypto.createHmac(algorithm, key)</a></li>
<li><a href="#all_class_hmac_1408">Class: Hmac</a><ul>
<li><a href="#all_hmac_update_data_1408">hmac.update(data)</a></li>
<li><a href="#all_hmac_digest_encoding_1408">hmac.digest([encoding])</a></li>
</ul>
</li>
<li><a href="#all_crypto_createcipher_algorithm_password_1408">crypto.createCipher(algorithm, password)</a></li>
<li><a href="#all_crypto_createcipheriv_algorithm_key_iv_1408">crypto.createCipheriv(algorithm, key, iv)</a></li>
<li><a href="#all_class_cipher_1408">Class: Cipher</a><ul>
<li><a href="#all_cipher_update_data_input_encoding_output_encoding_1408">cipher.update(data, [input_encoding], [output_encoding])</a></li>
<li><a href="#all_cipher_final_output_encoding_1408">cipher.final([output_encoding])</a></li>
<li><a href="#all_cipher_setautopadding_auto_padding_true_1408">cipher.setAutoPadding(auto_padding=true)</a></li>
</ul>
</li>
<li><a href="#all_crypto_createdecipher_algorithm_password_1408">crypto.createDecipher(algorithm, password)</a></li>
<li><a href="#all_crypto_createdecipheriv_algorithm_key_iv_1408">crypto.createDecipheriv(algorithm, key, iv)</a></li>
<li><a href="#all_class_decipher_1408">Class: Decipher</a><ul>
<li><a href="#all_decipher_update_data_input_encoding_output_encoding_1408">decipher.update(data, [input_encoding], [output_encoding])</a></li>
<li><a href="#all_decipher_final_output_encoding_1408">decipher.final([output_encoding])</a></li>
<li><a href="#all_decipher_setautopadding_auto_padding_true_1408">decipher.setAutoPadding(auto_padding=true)</a></li>
</ul>
</li>
<li><a href="#all_crypto_createsign_algorithm_1408">crypto.createSign(algorithm)</a></li>
<li><a href="#all_class_sign_1408">Class: Sign</a><ul>
<li><a href="#all_sign_update_data_1408">sign.update(data)</a></li>
<li><a href="#all_sign_sign_private_key_output_format_1408">sign.sign(private_key, [output_format])</a></li>
</ul>
</li>
<li><a href="#all_crypto_createverify_algorithm_1408">crypto.createVerify(algorithm)</a></li>
<li><a href="#all_class_verify_1408">Class: Verify</a><ul>
<li><a href="#all_verifier_update_data_1408">verifier.update(data)</a></li>
<li><a href="#all_verifier_verify_object_signature_signature_format_1408">verifier.verify(object, signature, [signature_format])</a></li>
</ul>
</li>
<li><a href="#all_crypto_creatediffiehellman_prime_length_1408">crypto.createDiffieHellman(prime_length)</a></li>
<li><a href="#all_crypto_creatediffiehellman_prime_encoding_1408">crypto.createDiffieHellman(prime, [encoding])</a></li>
<li><a href="#all_class_diffiehellman_1408">Class: DiffieHellman</a><ul>
<li><a href="#all_diffiehellman_generatekeys_encoding_1408">diffieHellman.generateKeys([encoding])</a></li>
<li><a href="#all_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding_1408">diffieHellman.computeSecret(other_public_key, [input_encoding], [output_encoding])</a></li>
<li><a href="#all_diffiehellman_getprime_encoding_1408">diffieHellman.getPrime([encoding])</a></li>
<li><a href="#all_diffiehellman_getgenerator_encoding_1408">diffieHellman.getGenerator([encoding])</a></li>
<li><a href="#all_diffiehellman_getpublickey_encoding_1408">diffieHellman.getPublicKey([encoding])</a></li>
<li><a href="#all_diffiehellman_getprivatekey_encoding_1408">diffieHellman.getPrivateKey([encoding])</a></li>
<li><a href="#all_diffiehellman_setpublickey_public_key_encoding_1408">diffieHellman.setPublicKey(public_key, [encoding])</a></li>
<li><a href="#all_diffiehellman_setprivatekey_private_key_encoding_1408">diffieHellman.setPrivateKey(private_key, [encoding])</a></li>
</ul>
</li>
<li><a href="#all_crypto_getdiffiehellman_group_name_1408">crypto.getDiffieHellman(group_name)</a></li>
<li><a href="#all_crypto_pbkdf2_password_salt_iterations_keylen_callback_1408">crypto.pbkdf2(password, salt, iterations, keylen, callback)</a></li>
<li><a href="#all_crypto_pbkdf2sync_password_salt_iterations_keylen_1408">crypto.pbkdf2Sync(password, salt, iterations, keylen)</a></li>
<li><a href="#all_crypto_randombytes_size_callback_1408">crypto.randomBytes(size, [callback])</a></li>
<li><a href="#all_crypto_pseudorandombytes_size_callback_1408">crypto.pseudoRandomBytes(size, [callback])</a></li>
<li><a href="#all_crypto_default_encoding_1408">crypto.DEFAULT_ENCODING</a></li>
<li><a href="#all_recent_api_changes_1408">Recent API Changes</a></li>
</ul>
</li>
<li><a href="#all_tls_ssl_1408">TLS (SSL)</a><ul>
<li><a href="#all_client_initiated_renegotiation_attack_mitigation_1408">Client-initiated renegotiation attack mitigation</a></li>
<li><a href="#all_npn_sni_1408">NPN 和 SNI</a></li>
<li><a href="#all_tls_getciphers_1408">tls.getCiphers()</a></li>
<li><a href="#all_tls_createserver_options_secureconnectionlistener_1408">tls.createServer(options, [secureConnectionListener])</a></li>
<li><a href="#all_tls_connect_options_callback_1408">tls.connect(options, [callback])</a></li>
<li><a href="#all_tls_connect_port_host_options_callback_1408">tls.connect(port, [host], [options], [callback])</a></li>
<li><a href="#all_tls_tlssocket_2816">类: tls.TLSSocket</a></li>
<li><a href="#all_new_tls_tlssocket_socket_options_1408">new tls.TLSSocket(socket, options)</a></li>
<li><a href="#all_tls_createsecurepair_credentials_isserver_requestcert_rejectunauthorized_1408">tls.createSecurePair([credentials], [isServer], [requestCert], [rejectUnauthorized])</a></li>
<li><a href="#all_securepair_1408">类: SecurePair</a><ul>
<li><a href="#all_secure_1408">事件: 'secure'</a></li>
</ul>
</li>
<li><a href="#all_tls_server_1408">类: tls.Server</a><ul>
<li><a href="#all_secureconnection_1408">事件: 'secureConnection'</a></li>
<li><a href="#all_event_clienterror_2816">Event: 'clientError'</a></li>
<li><a href="#all_newsession_1408">事件: 'newSession'</a></li>
<li><a href="#all_resumesession_1408">事件: 'resumeSession'</a></li>
<li><a href="#all_server_listen_port_host_callback_1408">server.listen(port, [host], [callback])</a></li>
<li><a href="#all_server_close_1408">server.close()</a></li>
<li><a href="#all_server_address_2816">server.address()</a></li>
<li><a href="#all_server_addcontext_hostname_credentials_1408">server.addContext(hostname, credentials)</a></li>
<li><a href="#all_server_maxconnections_2816">server.maxConnections</a></li>
<li><a href="#all_server_connections_2816">server.connections</a></li>
</ul>
</li>
<li><a href="#all_cryptostream_1408">类: CryptoStream</a><ul>
<li><a href="#all_cryptostream_byteswritten_1408">cryptoStream.bytesWritten</a></li>
</ul>
</li>
<li><a href="#all_tls_tlssocket_2817">类: tls.TLSSocket</a><ul>
<li><a href="#all_secureconnect_1408">事件: 'secureConnect'</a></li>
<li><a href="#all_tlssocket_authorized_1408">tlsSocket.authorized</a></li>
<li><a href="#all_tlssocket_authorizationerror_1408">tlsSocket.authorizationError</a></li>
<li><a href="#all_tlssocket_getpeercertificate_1408">tlsSocket.getPeerCertificate()</a></li>
<li><a href="#all_tlssocket_getcipher_1408">tlsSocket.getCipher()</a></li>
<li><a href="#all_tlssocket_renegotiate_options_callback_1408">tlsSocket.renegotiate(options, callback)</a></li>
<li><a href="#all_tlssocket_address_1408">tlsSocket.address()</a></li>
<li><a href="#all_tlssocket_remoteaddress_1408">tlsSocket.remoteAddress</a></li>
<li><a href="#all_tlssocket_remoteport_1408">tlsSocket.remotePort</a></li>
<li><a href="#all_tlssocket_localaddress_1408">tlsSocket.localAddress</a></li>
<li><a href="#all_tlssocket_localport_1408">tlsSocket.localPort</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_70418">字符串解码器</a><ul>
<li><a href="#all_stringdecoder_1408">类: StringDecoder</a><ul>
<li><a href="#all_decoder_write_buffer_1408">decoder.write(buffer)</a></li>
<li><a href="#all_decoder_end_1408">decoder.end()</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_file_system_1408">File System</a><ul>
<li><a href="#all_fs_rename_oldpath_newpath_callback_1408">fs.rename(oldPath, newPath, callback)</a></li>
<li><a href="#all_fs_renamesync_oldpath_newpath_1408">fs.renameSync(oldPath, newPath)</a></li>
<li><a href="#all_fs_ftruncate_fd_len_callback_1408">fs.ftruncate(fd, len, callback)</a></li>
<li><a href="#all_fs_ftruncatesync_fd_len_1408">fs.ftruncateSync(fd, len)</a></li>
<li><a href="#all_fs_truncate_path_len_callback_1408">fs.truncate(path, len, callback)</a></li>
<li><a href="#all_fs_truncatesync_path_len_1408">fs.truncateSync(path, len)</a></li>
<li><a href="#all_fs_chownsync_path_uid_gid_1408">fs.chownSync(path, uid, gid)</a></li>
<li><a href="#all_fs_fchown_fd_uid_gid_callback_1408">fs.fchown(fd, uid, gid, callback)</a></li>
<li><a href="#all_fs_fchownsync_fd_uid_gid_1408">fs.fchownSync(fd, uid, gid)</a></li>
<li><a href="#all_fs_lchown_path_uid_gid_callback_1408">fs.lchown(path, uid, gid, callback)</a></li>
<li><a href="#all_fs_lchownsync_path_uid_gid_1408">fs.lchownSync(path, uid, gid)</a></li>
<li><a href="#all_fs_chmod_path_mode_callback_1408">fs.chmod(path, mode, callback)</a></li>
<li><a href="#all_fs_chmodsync_path_mode_1408">fs.chmodSync(path, mode)</a></li>
<li><a href="#all_fs_fchmod_fd_mode_callback_1408">fs.fchmod(fd, mode, callback)</a></li>
<li><a href="#all_fs_fchmodsync_fd_mode_1408">fs.fchmodSync(fd, mode)</a></li>
<li><a href="#all_fs_lchmod_path_mode_callback_1408">fs.lchmod(path, mode, callback)</a></li>
<li><a href="#all_fs_lchmodsync_path_mode_1408">fs.lchmodSync(path, mode)</a></li>
<li><a href="#all_fs_stat_path_callback_1408">fs.stat(path, callback)</a></li>
<li><a href="#all_fs_lstat_path_callback_1408">fs.lstat(path, callback)</a></li>
<li><a href="#all_fs_fstat_fd_callback_1408">fs.fstat(fd, callback)</a></li>
<li><a href="#all_fs_statsync_path_1408">fs.statSync(path)</a></li>
<li><a href="#all_fs_lstatsync_path_1408">fs.lstatSync(path)</a></li>
<li><a href="#all_fs_fstatsync_fd_1408">fs.fstatSync(fd)</a></li>
<li><a href="#all_fs_link_srcpath_dstpath_callback_1408">fs.link(srcpath, dstpath, callback)</a></li>
<li><a href="#all_fs_linksync_srcpath_dstpath_1408">fs.linkSync(srcpath, dstpath)</a></li>
<li><a href="#all_fs_symlink_srcpath_dstpath_type_callback_1408">fs.symlink(srcpath, dstpath, [type], callback)</a></li>
<li><a href="#all_fs_symlinksync_srcpath_dstpath_type_1408">fs.symlinkSync(srcpath, dstpath, [type])</a></li>
<li><a href="#all_fs_readlink_path_callback_1408">fs.readlink(path, callback)</a></li>
<li><a href="#all_fs_readlinksync_path_1408">fs.readlinkSync(path)</a></li>
<li><a href="#all_fs_realpath_path_cache_callback_1408">fs.realpath(path, [cache], callback)</a></li>
<li><a href="#all_fs_realpathsync_path_cache_1408">fs.realpathSync(path, [cache])</a></li>
<li><a href="#all_fs_unlink_path_callback_1408">fs.unlink(path, callback)</a></li>
<li><a href="#all_fs_unlinksync_path_1408">fs.unlinkSync(path)</a></li>
<li><a href="#all_fs_rmdir_path_callback_1408">fs.rmdir(path, callback)</a></li>
<li><a href="#all_fs_rmdirsync_path_1408">fs.rmdirSync(path)</a></li>
<li><a href="#all_fs_mkdir_path_mode_callback_1408">fs.mkdir(path, [mode], callback)</a></li>
<li><a href="#all_fs_mkdirsync_path_mode_1408">fs.mkdirSync(path, [mode])</a></li>
<li><a href="#all_fs_readdir_path_callback_1408">fs.readdir(path, callback)</a></li>
<li><a href="#all_fs_readdirsync_path_1408">fs.readdirSync(path)</a></li>
<li><a href="#all_fs_close_fd_callback_1408">fs.close(fd, callback)</a></li>
<li><a href="#all_fs_closesync_fd_1408">fs.closeSync(fd)</a></li>
<li><a href="#all_fs_open_path_flags_mode_callback_1408">fs.open(path, flags, [mode], callback)</a></li>
<li><a href="#all_fs_opensync_path_flags_mode_1408">fs.openSync(path, flags, [mode])</a></li>
<li><a href="#all_fs_utimes_path_atime_mtime_callback_1408">fs.utimes(path, atime, mtime, callback)</a></li>
<li><a href="#all_fs_utimessync_path_atime_mtime_1408">fs.utimesSync(path, atime, mtime)</a></li>
<li><a href="#all_fs_futimes_fd_atime_mtime_callback_1408">fs.futimes(fd, atime, mtime, callback)</a></li>
<li><a href="#all_fs_futimessync_fd_atime_mtime_1408">fs.futimesSync(fd, atime, mtime)</a></li>
<li><a href="#all_fs_fsync_fd_callback_1408">fs.fsync(fd, callback)</a></li>
<li><a href="#all_fs_fsyncsync_fd_1408">fs.fsyncSync(fd)</a></li>
<li><a href="#all_fs_write_fd_buffer_offset_length_position_callback_1408">fs.write(fd, buffer, offset, length[, position], callback)</a></li>
<li><a href="#all_fs_write_fd_data_position_encoding_callback_1408">fs.write(fd, data[, position[, encoding]], callback)</a></li>
<li><a href="#all_fs_writesync_fd_buffer_offset_length_position_1408">fs.writeSync(fd, buffer, offset, length[, position])</a></li>
<li><a href="#all_fs_writesync_fd_data_position_encoding_1408">fs.writeSync(fd, data[, position[, encoding]])</a></li>
<li><a href="#all_fs_read_fd_buffer_offset_length_position_callback_1408">fs.read(fd, buffer, offset, length, position, callback)</a></li>
<li><a href="#all_fs_readsync_fd_buffer_offset_length_position_1408">fs.readSync(fd, buffer, offset, length, position)</a></li>
<li><a href="#all_fs_readfile_filename_options_callback_1408">fs.readFile(filename, [options], callback)</a></li>
<li><a href="#all_fs_readfilesync_filename_options_1408">fs.readFileSync(filename, [options])</a></li>
<li><a href="#all_fs_writefile_filename_data_options_callback_1408">fs.writeFile(filename, data, [options], callback)</a></li>
<li><a href="#all_fs_writefilesync_filename_data_options_1408">fs.writeFileSync(filename, data, [options])</a></li>
<li><a href="#all_fs_appendfile_filename_data_options_callback_1408">fs.appendFile(filename, data, [options], callback)</a></li>
<li><a href="#all_fs_appendfilesync_filename_data_options_1408">fs.appendFileSync(filename, data, [options])</a></li>
<li><a href="#all_fs_watchfile_filename_options_listener_1408">fs.watchFile(filename, [options], listener)</a></li>
<li><a href="#all_fs_unwatchfile_filename_listener_1408">fs.unwatchFile(filename, [listener])</a></li>
<li><a href="#all_fs_watch_filename_options_listener_1408">fs.watch(filename, [options], [listener])</a><ul>
<li><a href="#all_70419">注意事项</a><ul>
<li><a href="#all_70420">可用性</a></li>
<li><a href="#all_70421">文件名参数</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_fs_exists_path_callback_1408">fs.exists(path, callback)</a></li>
<li><a href="#all_fs_existssync_path_1408">fs.existsSync(path)</a></li>
<li><a href="#all_class_fs_stats_1408">Class: fs.Stats</a><ul>
<li><a href="#all_stat_time_values_1408">Stat Time Values</a></li>
</ul>
</li>
<li><a href="#all_fs_createreadstream_path_options_1408">fs.createReadStream(path, [options])</a></li>
<li><a href="#all_class_fs_readstream_1408">Class: fs.ReadStream</a><ul>
<li><a href="#all_open_2816">事件: 'open'</a></li>
</ul>
</li>
<li><a href="#all_fs_createwritestream_path_options_1408">fs.createWriteStream(path, [options])</a></li>
<li><a href="#all_class_fs_writestream_1408">Class: fs.WriteStream</a><ul>
<li><a href="#all_open_2817">事件: 'open'</a></li>
<li><a href="#all_file_byteswritten_1408">file.bytesWritten</a></li>
</ul>
</li>
<li><a href="#all_class_fs_fswatcher_1408">Class: fs.FSWatcher</a><ul>
<li><a href="#all_watcher_close_1408">watcher.close()</a></li>
<li><a href="#all_change_1408">事件: 'change'</a></li>
<li><a href="#all_error_9858">事件: 'error'</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_path_1408">路径 (Path)</a><ul>
<li><a href="#all_path_normalize_p_1408">path.normalize(p)</a></li>
<li><a href="#all_path_join_path1_path2_1408">path.join([path1], [path2], [...])</a></li>
<li><a href="#all_path_resolve_from_to_1408">path.resolve([from ...], to)</a></li>
<li><a href="#all_path_isabsolute_path_1408">path.isAbsolute(path)</a></li>
<li><a href="#all_path_relative_from_to_1408">path.relative(from, to)</a></li>
<li><a href="#all_path_dirname_p_1408">path.dirname(p)</a></li>
<li><a href="#all_path_basename_p_ext_1408">path.basename(p, [ext])</a></li>
<li><a href="#all_path_extname_p_1408">path.extname(p)</a></li>
<li><a href="#all_path_sep_1408">path.sep</a></li>
<li><a href="#all_path_delimiter_1408">path.delimiter</a></li>
</ul>
</li>
<li><a href="#all_70422">网络</a><ul>
<li><a href="#all_net_createserver_options_connectionlistener_1408">net.createServer([options], [connectionListener])</a></li>
<li><a href="#all_net_connect_options_connectionlistener_1408">net.connect(options, [connectionListener])</a></li>
<li><a href="#all_net_createconnection_options_connectionlistener_1408">net.createConnection(options, [connectionListener])</a></li>
<li><a href="#all_net_connect_port_host_connectlistener_1408">net.connect(port, [host], [connectListener])</a></li>
<li><a href="#all_net_createconnection_port_host_connectlistener_1408">net.createConnection(port, [host], [connectListener])</a></li>
<li><a href="#all_net_connect_path_connectlistener_1408">net.connect(path, [connectListener])</a></li>
<li><a href="#all_net_createconnection_path_connectlistener_1408">net.createConnection(path, [connectListener])</a></li>
<li><a href="#all_net_server_1408">类: net.Server</a><ul>
<li><a href="#all_server_listen_port_host_backlog_callback_2816">server.listen(port, [host], [backlog], [callback])</a></li>
<li><a href="#all_server_listen_path_callback_4224">server.listen(path, [callback])</a></li>
<li><a href="#all_server_listen_handle_callback_4224">server.listen(handle, [callback])</a></li>
<li><a href="#all_server_close_callback_4224">server.close([callback])</a></li>
<li><a href="#all_server_address_2817">server.address()</a></li>
<li><a href="#all_server_unref_1408">server.unref()</a></li>
<li><a href="#all_server_ref_1408">server.ref()</a></li>
<li><a href="#all_server_maxconnections_2817">server.maxConnections</a></li>
<li><a href="#all_server_connections_2817">server.connections</a></li>
<li><a href="#all_server_getconnections_callback_1408">server.getConnections(callback)</a></li>
<li><a href="#all_listening_5632">事件: 'listening'</a></li>
<li><a href="#all_connection_2816">事件: 'connection'</a></li>
<li><a href="#all_close_12673">事件: 'close'</a></li>
<li><a href="#all_error_9859">事件: 'error'</a></li>
</ul>
</li>
<li><a href="#all_net_socket_1408">类: net.Socket</a><ul>
<li><a href="#all_new_net_socket_options_1408">new net.Socket([options])</a></li>
<li><a href="#all_socket_connect_port_host_connectlistener_1408">socket.connect(port, [host], [connectListener])</a></li>
<li><a href="#all_socket_connect_path_connectlistener_1408">socket.connect(path, [connectListener])</a></li>
<li><a href="#all_socket_buffersize_1408">socket.bufferSize</a></li>
<li><a href="#all_socket_setencoding_encoding_1408">socket.setEncoding([encoding])</a></li>
<li><a href="#all_socket_write_data_encoding_callback_1408">socket.write(data, [encoding], [callback])</a></li>
<li><a href="#all_socket_end_data_encoding_1408">socket.end([data], [encoding])</a></li>
<li><a href="#all_socket_destroy_1408">socket.destroy()</a></li>
<li><a href="#all_socket_pause_1408">socket.pause()</a></li>
<li><a href="#all_socket_resume_1408">socket.resume()</a></li>
<li><a href="#all_socket_settimeout_timeout_callback_1408">socket.setTimeout(timeout, [callback])</a></li>
<li><a href="#all_socket_setnodelay_nodelay_1408">socket.setNoDelay([noDelay])</a></li>
<li><a href="#all_socket_setkeepalive_enable_initialdelay_1408">socket.setKeepAlive([enable], [initialDelay])</a></li>
<li><a href="#all_socket_address_2816">socket.address()</a></li>
<li><a href="#all_socket_unref_2816">socket.unref()</a></li>
<li><a href="#all_socket_ref_2816">socket.ref()</a></li>
<li><a href="#all_socket_remoteaddress_1408">socket.remoteAddress</a></li>
<li><a href="#all_socket_remoteport_1408">socket.remotePort</a></li>
<li><a href="#all_socket_localaddress_1408">socket.localAddress</a></li>
<li><a href="#all_socket_localport_1408">socket.localPort</a></li>
<li><a href="#all_socket_bytesread_1408">socket.bytesRead</a></li>
<li><a href="#all_socket_byteswritten_1408">socket.bytesWritten</a></li>
<li><a href="#all_lookup_1408">事件: 'lookup'</a></li>
<li><a href="#all_connect_4224">事件: 'connect'</a></li>
<li><a href="#all_data_2817">事件: 'data'</a></li>
<li><a href="#all_end_2817">事件: 'end'</a></li>
<li><a href="#all_timeout_1408">事件: 'timeout'</a></li>
<li><a href="#all_drain_2817">事件: 'drain'</a></li>
<li><a href="#all_error_9860">事件: 'error'</a></li>
<li><a href="#all_close_12674">事件: 'close'</a></li>
</ul>
</li>
<li><a href="#all_net_isip_input_1408">net.isIP(input)</a></li>
<li><a href="#all_net_isipv4_input_1408">net.isIPv4(input)</a></li>
<li><a href="#all_net_isipv6_input_1408">net.isIPv6(input)</a></li>
</ul>
</li>
<li><a href="#all_udp_1408">UDP / 数据报套接字</a><ul>
<li><a href="#all_dgram_createsocket_type_callback_1408">dgram.createSocket(type, [callback])</a></li>
<li><a href="#all_dgram_socket_1408">类: dgram.Socket</a><ul>
<li><a href="#all_message_4224">事件: 'message'</a></li>
<li><a href="#all_listening_5633">事件: 'listening'</a></li>
<li><a href="#all_close_12675">事件: 'close'</a></li>
<li><a href="#all_error_9861">事件: 'error'</a></li>
<li><a href="#all_socket_send_buf_offset_length_port_address_callback_1408">socket.send(buf, offset, length, port, address, [callback])</a></li>
<li><a href="#all_socket_bind_port_address_callback_1408">socket.bind(port, [address], [callback])</a></li>
<li><a href="#all_socket_close_1408">socket.close()</a></li>
<li><a href="#all_socket_address_2817">socket.address()</a></li>
<li><a href="#all_socket_setbroadcast_flag_1408">socket.setBroadcast(flag)</a></li>
<li><a href="#all_socket_setttl_ttl_1408">socket.setTTL(ttl)</a></li>
<li><a href="#all_socket_setmulticastttl_ttl_1408">socket.setMulticastTTL(ttl)</a></li>
<li><a href="#all_socket_setmulticastloopback_flag_1408">socket.setMulticastLoopback(flag)</a></li>
<li><a href="#all_socket_addmembership_multicastaddress_multicastinterface_1408">socket.addMembership(multicastAddress, [multicastInterface])</a></li>
<li><a href="#all_socket_dropmembership_multicastaddress_multicastinterface_1408">socket.dropMembership(multicastAddress, [multicastInterface])</a></li>
<li><a href="#all_socket_unref_2817">socket.unref()</a></li>
<li><a href="#all_socket_ref_2817">socket.ref()</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_dns_1408">DNS</a><ul>
<li><a href="#all_dns_lookup_domain_family_callback_1408">dns.lookup(domain, [family], callback)</a></li>
<li><a href="#all_dns_resolve_domain_rrtype_callback_1408">dns.resolve(domain, [rrtype], callback)</a></li>
<li><a href="#all_dns_resolve4_domain_callback_1408">dns.resolve4(domain, callback)</a></li>
<li><a href="#all_dns_resolve6_domain_callback_1408">dns.resolve6(domain, callback)</a></li>
<li><a href="#all_dns_resolvemx_domain_callback_1408">dns.resolveMx(domain, callback)</a></li>
<li><a href="#all_dns_resolvetxt_domain_callback_1408">dns.resolveTxt(domain, callback)</a></li>
<li><a href="#all_dns_resolvesrv_domain_callback_1408">dns.resolveSrv(domain, callback)</a></li>
<li><a href="#all_dns_resolvens_domain_callback_1408">dns.resolveNs(domain, callback)</a></li>
<li><a href="#all_dns_resolvecname_domain_callback_1408">dns.resolveCname(domain, callback)</a></li>
<li><a href="#all_dns_reverse_ip_callback_1408">dns.reverse(ip, callback)</a></li>
<li><a href="#all_dns_getservers_1408">dns.getServers()</a></li>
<li><a href="#all_dns_setservers_servers_1408">dns.setServers(servers)</a></li>
<li><a href="#all_70423">错误代码</a></li>
</ul>
</li>
<li><a href="#all_http_1408">HTTP</a><ul>
<li><a href="#all_http_status_codes_1408">http.STATUS_CODES</a></li>
<li><a href="#all_http_createserver_requestlistener_1408">http.createServer([requestListener])</a></li>
<li><a href="#all_http_createclient_port_host_1408">http.createClient([port], [host])</a></li>
<li><a href="#all_class_http_server_1408">Class: http.Server</a><ul>
<li><a href="#all_request_1408">事件 : 'request'</a></li>
<li><a href="#all_connection_2817">事件: 'connection'</a></li>
<li><a href="#all_close_12676">事件: 'close'</a></li>
<li><a href="#all_event_checkcontinue_1408">Event: 'checkContinue'</a></li>
<li><a href="#all_connect_4225">事件: 'connect'</a></li>
<li><a href="#all_event_upgrade_2816">Event: 'upgrade'</a></li>
<li><a href="#all_event_clienterror_2817">Event: 'clientError'</a></li>
<li><a href="#all_server_listen_port_hostname_backlog_callback_1408">server.listen(port, [hostname], [backlog], [callback])</a></li>
<li><a href="#all_server_listen_path_callback_4225">server.listen(path, [callback])</a></li>
<li><a href="#all_server_listen_handle_callback_4225">server.listen(handle, [callback])</a></li>
<li><a href="#all_server_close_callback_4225">server.close([callback])</a></li>
<li><a href="#all_server_maxheaderscount_1408">server.maxHeadersCount</a></li>
<li><a href="#all_server_settimeout_msecs_callback_2816">server.setTimeout(msecs, callback)</a></li>
<li><a href="#all_server_timeout_2816">server.timeout</a></li>
</ul>
</li>
<li><a href="#all_class_http_serverresponse_1408">Class: http.ServerResponse</a><ul>
<li><a href="#all_close_12677">事件: 'close'</a></li>
<li><a href="#all_response_writecontinue_1408">response.writeContinue()</a></li>
<li><a href="#all_response_writehead_statuscode_reasonphrase_headers_1408">response.writeHead(statusCode, [reasonPhrase], [headers])</a></li>
<li><a href="#all_response_settimeout_msecs_callback_1408">response.setTimeout(msecs, callback)</a></li>
<li><a href="#all_response_statuscode_1408">response.statusCode</a></li>
<li><a href="#all_response_setheader_name_value_1408">response.setHeader(name, value)</a></li>
<li><a href="#all_response_headerssent_1408">response.headersSent</a></li>
<li><a href="#all_response_senddate_1408">response.sendDate</a></li>
<li><a href="#all_response_getheader_name_1408">response.getHeader(name)</a></li>
<li><a href="#all_response_removeheader_name_1408">response.removeHeader(name)</a></li>
<li><a href="#all_response_write_chunk_encoding_1408">response.write(chunk, [encoding])</a></li>
<li><a href="#all_response_addtrailers_headers_1408">response.addTrailers(headers)</a></li>
<li><a href="#all_response_end_data_encoding_1408">response.end([data], [encoding])</a></li>
</ul>
</li>
<li><a href="#all_http_request_options_callback_1408">http.request(options, callback)</a></li>
<li><a href="#all_http_get_options_callback_1408">http.get(options, callback)</a></li>
<li><a href="#all_class_http_agent_1408">Class: http.Agent</a><ul>
<li><a href="#all_new_agent_options_1408">new Agent([options])</a></li>
<li><a href="#all_agent_maxsockets_1408">agent.maxSockets</a></li>
<li><a href="#all_agent_maxfreesockets_1408">agent.maxFreeSockets</a></li>
<li><a href="#all_agent_sockets_1408">agent.sockets</a></li>
<li><a href="#all_agent_freesockets_1408">agent.freeSockets</a></li>
<li><a href="#all_agent_requests_1408">agent.requests</a></li>
<li><a href="#all_agent_destroy_1408">agent.destroy()</a></li>
<li><a href="#all_agent_getname_options_1408">agent.getName(options)</a></li>
</ul>
</li>
<li><a href="#all_http_globalagent_1408">http.globalAgent</a></li>
<li><a href="#all_class_http_clientrequest_1408">Class: http.ClientRequest</a><ul>
<li><a href="#all_event_response_1408">Event 'response'</a></li>
<li><a href="#all_event_socket_1408">Event: 'socket'</a></li>
<li><a href="#all_connect_4226">事件: 'connect'</a></li>
<li><a href="#all_event_upgrade_2817">Event: 'upgrade'</a></li>
<li><a href="#all_event_continue_1408">Event: 'continue'</a></li>
<li><a href="#all_request_write_chunk_encoding_1408">request.write(chunk, [encoding])</a></li>
<li><a href="#all_request_end_data_encoding_1408">request.end([data], [encoding])</a></li>
<li><a href="#all_request_abort_1408">request.abort()</a></li>
<li><a href="#all_request_settimeout_timeout_callback_1408">request.setTimeout(timeout, [callback])</a></li>
<li><a href="#all_request_setnodelay_nodelay_1408">request.setNoDelay([noDelay])</a></li>
<li><a href="#all_request_setsocketkeepalive_enable_initialdelay_1408">request.setSocketKeepAlive([enable], [initialDelay])</a></li>
</ul>
</li>
<li><a href="#all_http_incomingmessage_1408">http.IncomingMessage</a><ul>
<li><a href="#all_close_12678">事件: 'close'</a></li>
<li><a href="#all_message_httpversion_1408">message.httpVersion</a></li>
<li><a href="#all_message_headers_1408">message.headers</a></li>
<li><a href="#all_message_rawheaders_1408">message.rawHeaders</a></li>
<li><a href="#all_message_trailers_1408">message.trailers</a></li>
<li><a href="#all_message_rawtrailers_1408">message.rawTrailers</a></li>
<li><a href="#all_message_settimeout_msecs_callback_1408">message.setTimeout(msecs, callback)</a></li>
<li><a href="#all_message_method_1408">message.method</a></li>
<li><a href="#all_message_url_1408">message.url</a></li>
<li><a href="#all_message_statuscode_1408">message.statusCode</a></li>
<li><a href="#all_message_socket_1408">message.socket</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_https_1408">HTTPS</a><ul>
<li><a href="#all_https_server_1408">类: https.Server</a><ul>
<li><a href="#all_server_settimeout_msecs_callback_2817">server.setTimeout(msecs, callback)</a></li>
<li><a href="#all_server_timeout_2817">server.timeout</a></li>
</ul>
</li>
<li><a href="#all_https_createserver_options_requestlistener_1408">https.createServer(options, [requestListener])</a><ul>
<li><a href="#all_server_listen_port_host_backlog_callback_2817">server.listen(port, [host], [backlog], [callback])</a></li>
<li><a href="#all_server_listen_path_callback_4226">server.listen(path, [callback])</a></li>
<li><a href="#all_server_listen_handle_callback_4226">server.listen(handle, [callback])</a></li>
<li><a href="#all_server_close_callback_4226">server.close([callback])</a></li>
</ul>
</li>
<li><a href="#all_https_request_options_callback_1408">https.request(options, callback)</a></li>
<li><a href="#all_https_get_options_callback_1408">https.get(options, callback)</a></li>
<li><a href="#all_https_agent_1408">类: https.Agent</a></li>
<li><a href="#all_https_globalagent_1408">https.globalAgent</a></li>
</ul>
</li>
<li><a href="#all_url_1408">URL</a><ul>
<li><a href="#all_url_parse_urlstr_parsequerystring_slashesdenotehost_1408">url.parse(urlStr, [parseQueryString], [slashesDenoteHost])</a></li>
<li><a href="#all_url_format_urlobj_1408">url.format(urlObj)</a></li>
<li><a href="#all_url_resolve_from_to_1408">url.resolve(from, to)</a></li>
</ul>
</li>
<li><a href="#all_query_string_1408">Query String</a><ul>
<li><a href="#all_querystring_stringify_obj_sep_eq_1408">querystring.stringify(obj, [sep], [eq])</a></li>
<li><a href="#all_querystring_parse_str_sep_eq_options_1408">querystring.parse(str, [sep], [eq], [options])</a></li>
<li><a href="#all_querystring_escape_1408">querystring.escape</a></li>
<li><a href="#all_querystring_unescape_1408">querystring.unescape</a></li>
</ul>
</li>
<li><a href="#all_punycode_1408">punycode</a><ul>
<li><a href="#all_punycode_decode_string_1408">punycode.decode(string)</a></li>
<li><a href="#all_punycode_encode_string_1408">punycode.encode(string)</a></li>
<li><a href="#all_punycode_tounicode_domain_1408">punycode.toUnicode(domain)</a></li>
<li><a href="#all_punycode_toascii_domain_1408">punycode.toASCII(domain)</a></li>
<li><a href="#all_punycode_ucs2_1408">punycode.ucs2</a><ul>
<li><a href="#all_punycode_ucs2_decode_string_1408">punycode.ucs2.decode(string)</a></li>
<li><a href="#all_punycode_ucs2_encode_codepoints_1408">punycode.ucs2.encode(codePoints)</a></li>
</ul>
</li>
<li><a href="#all_punycode_version_1408">punycode.version</a></li>
</ul>
</li>
<li><a href="#all_readline_1408">Readline</a><ul>
<li><a href="#all_readline_createinterface_options_1408">readline.createInterface(options)</a></li>
<li><a href="#all_70424">类: 接口</a><ul>
<li><a href="#all_rl_setprompt_prompt_1408">rl.setPrompt(prompt)</a></li>
<li><a href="#all_rl_prompt_preservecursor_1408">rl.prompt([preserveCursor])</a></li>
<li><a href="#all_rl_question_query_callback_1408">rl.question(query, callback)</a></li>
<li><a href="#all_rl_pause_1408">rl.pause()</a></li>
<li><a href="#all_rl_resume_1408">rl.resume()</a></li>
<li><a href="#all_rl_close_1408">rl.close()</a></li>
<li><a href="#all_rl_write_data_key_1408">rl.write(data, [key])</a></li>
</ul>
</li>
<li><a href="#all_events_1408">Events</a><ul>
<li><a href="#all_event_line_1408">Event: 'line'</a></li>
<li><a href="#all_pause_1408">事件: 'pause'</a></li>
<li><a href="#all_resume_1408">事件: 'resume'</a></li>
<li><a href="#all_close_12679">事件: 'close'</a></li>
<li><a href="#all_event_sigint_1408">Event: 'SIGINT'</a></li>
<li><a href="#all_event_sigtstp_1408">Event: 'SIGTSTP'</a></li>
<li><a href="#all_event_sigcont_1408">Event: 'SIGCONT'</a></li>
</ul>
</li>
<li><a href="#all_tiny_cli_1408">示例: Tiny CLI</a></li>
</ul>
</li>
<li><a href="#all_repl_2816">REPL</a><ul>
<li><a href="#all_repl_start_options_1408">repl.start(options)</a><ul>
<li><a href="#all_exit_7041">事件: 'exit'</a></li>
<li><a href="#all_reset_1408">事件: 'reset'</a></li>
</ul>
</li>
<li><a href="#all_repl_2817">REPL 特性</a></li>
</ul>
</li>
<li><a href="#all_javascript_1408">执行 JavaScript</a><ul>
<li><a href="#all_vm_runinthiscontext_code_options_1408">vm.runInThisContext(code, [options])</a></li>
<li><a href="#all_vm_createcontext_sandbox_1408">vm.createContext([sandbox])</a></li>
<li><a href="#all_vm_iscontext_sandbox_1408">vm.isContext(sandbox)</a></li>
<li><a href="#all_vm_runincontext_code_contextifiedsandbox_options_1408">vm.runInContext(code, contextifiedSandbox, [options])</a></li>
<li><a href="#all_vm_runinnewcontext_code_sandbox_options_1408">vm.runInNewContext(code, [sandbox], [options])</a></li>
<li><a href="#all_script_1408">类: Script</a><ul>
<li><a href="#all_new_vm_script_code_options_1408">new vm.Script(code, options)</a></li>
<li><a href="#all_script_runinthiscontext_options_1408">script.runInThisContext([options])</a></li>
<li><a href="#all_script_runincontext_contextifiedsandbox_options_1408">script.runInContext(contextifiedSandbox, [options])</a></li>
<li><a href="#all_script_runinnewcontext_sandbox_options_1408">script.runInNewContext([sandbox], [options])</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_70425">子进程</a><ul>
<li><a href="#all_childprocess_1408">类: ChildProcess</a><ul>
<li><a href="#all_error_9862">事件:  'error'</a></li>
<li><a href="#all_exit_7042">事件:  'exit'</a></li>
<li><a href="#all_close_12680">事件: 'close'</a></li>
<li><a href="#all_disconnect_4224">事件: 'disconnect'</a></li>
<li><a href="#all_message_4225">事件: 'message'</a></li>
<li><a href="#all_child_stdin_1408">child.stdin</a></li>
<li><a href="#all_child_stdout_1408">child.stdout</a></li>
<li><a href="#all_child_stderr_1408">child.stderr</a></li>
<li><a href="#all_child_pid_1408">child.pid</a></li>
<li><a href="#all_child_kill_signal_1408">child.kill([signal])</a></li>
<li><a href="#all_child_send_message_sendhandle_1408">child.send(message, [sendHandle])</a><ul>
<li><a href="#all_server_1408">例子: 发送一个server对象</a></li>
<li><a href="#all_socket_1408">示例: 发送socket对象</a></li>
</ul>
</li>
<li><a href="#all_child_disconnect_1408">child.disconnect()</a></li>
</ul>
</li>
<li><a href="#all_child_process_spawn_command_args_options_1408">child_process.spawn(command, [args], [options])</a></li>
<li><a href="#all_child_process_exec_command_options_callback_1408">child_process.exec(command, [options], callback)</a></li>
<li><a href="#all_child_process_execfile_file_args_options_callback_1408">child_process.execFile(file, args, options, callback)</a></li>
<li><a href="#all_child_process_fork_modulepath_args_options_1408">child_process.fork(modulePath, [args], [options])</a></li>
</ul>
</li>
<li><a href="#all_assert_1408">断言 (assert)</a><ul>
<li><a href="#all_assert_fail_actual_expected_message_operator_1408">assert.fail(actual, expected, message, operator)</a></li>
<li><a href="#all_assert_value_message_assert_ok_value_message_1408">assert(value, message), assert.ok(value, [message])</a></li>
<li><a href="#all_assert_equal_actual_expected_message_1408">assert.equal(actual, expected, [message])</a></li>
<li><a href="#all_assert_notequal_actual_expected_message_1408">assert.notEqual(actual, expected, [message])</a></li>
<li><a href="#all_assert_deepequal_actual_expected_message_1408">assert.deepEqual(actual, expected, [message])</a></li>
<li><a href="#all_assert_notdeepequal_actual_expected_message_1408">assert.notDeepEqual(actual, expected, [message])</a></li>
<li><a href="#all_assert_strictequal_actual_expected_message_1408">assert.strictEqual(actual, expected, [message])</a></li>
<li><a href="#all_assert_notstrictequal_actual_expected_message_1408">assert.notStrictEqual(actual, expected, [message])</a></li>
<li><a href="#all_assert_throws_block_error_message_1408">assert.throws(block, [error], [message])</a></li>
<li><a href="#all_assert_doesnotthrow_block_message_1408">assert.doesNotThrow(block, [message])</a></li>
<li><a href="#all_assert_iferror_value_1408">assert.ifError(value)</a></li>
</ul>
</li>
<li><a href="#all_tty_1408">TTY</a><ul>
<li><a href="#all_tty_isatty_fd_1408">tty.isatty(fd)</a></li>
<li><a href="#all_tty_setrawmode_mode_1408">tty.setRawMode(mode)</a></li>
<li><a href="#all_readstream_1408">类: ReadStream</a><ul>
<li><a href="#all_rs_israw_1408">rs.isRaw</a></li>
<li><a href="#all_rs_setrawmode_mode_1408">rs.setRawMode(mode)</a></li>
</ul>
</li>
<li><a href="#all_writestream_1408">类: WriteStream</a><ul>
<li><a href="#all_ws_columns_1408">ws.columns</a></li>
<li><a href="#all_ws_rows_1408">ws.rows</a></li>
<li><a href="#all_resize_1408">事件: 'resize'</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_zlib_1408">Zlib</a><ul>
<li><a href="#all_70426">例子</a></li>
<li><a href="#all_zlib_creategzip_options_1408">zlib.createGzip([options])</a></li>
<li><a href="#all_zlib_creategunzip_options_1408">zlib.createGunzip([options])</a></li>
<li><a href="#all_zlib_createdeflate_options_1408">zlib.createDeflate([options])</a></li>
<li><a href="#all_zlib_createinflate_options_1408">zlib.createInflate([options])</a></li>
<li><a href="#all_zlib_createdeflateraw_options_1408">zlib.createDeflateRaw([options])</a></li>
<li><a href="#all_zlib_createinflateraw_options_1408">zlib.createInflateRaw([options])</a></li>
<li><a href="#all_zlib_createunzip_options_1408">zlib.createUnzip([options])</a></li>
<li><a href="#all_zlib_zlib_1408">类: zlib.Zlib</a><ul>
<li><a href="#all_zlib_flush_kind_callback_1408">zlib.flush([kind], callback)</a></li>
<li><a href="#all_zlib_params_level_strategy_callback_1408">zlib.params(level, strategy, callback)</a></li>
<li><a href="#all_zlib_reset_1408">zlib.reset()</a></li>
</ul>
</li>
<li><a href="#all_zlib_gzip_1408">类: zlib.Gzip</a></li>
<li><a href="#all_zlib_gunzip_1408">类: zlib.Gunzip</a></li>
<li><a href="#all_zlib_deflate_1408">类: zlib.Deflate</a></li>
<li><a href="#all_zlib_inflate_1408">类: zlib.Inflate</a></li>
<li><a href="#all_zlib_deflateraw_1408">类: zlib.DeflateRaw</a></li>
<li><a href="#all_zlib_inflateraw_1408">类: zlib.InflateRaw</a></li>
<li><a href="#all_zlib_unzip_1408">类: zlib.Unzip</a></li>
<li><a href="#all_70427">快捷方法</a></li>
<li><a href="#all_zlib_deflate_buf_options_callback_1408">zlib.deflate(buf, [options], callback)</a></li>
<li><a href="#all_zlib_deflateraw_buf_options_callback_1408">zlib.deflateRaw(buf, [options], callback)</a></li>
<li><a href="#all_zlib_gzip_buf_options_callback_1408">zlib.Gzip(buf, [options], callback)</a></li>
<li><a href="#all_zlib_gunzip_buf_options_callback_1408">zlib.gunzip(buf, [options], callback)</a></li>
<li><a href="#all_zlib_inflate_buf_options_callback_1408">zlib.inflate(buf, [options], callback)</a></li>
<li><a href="#all_zlib_inflateraw_buf_options_callback_1408">zlib.inflateRaw(buf, [options], callback)</a></li>
<li><a href="#all_zlib_unzip_buf_options_callback_1408">zlib.unzip(buf, [options], callback)</a></li>
<li><a href="#all_70428">选项</a></li>
<li><a href="#all_70429">内存使用调优</a></li>
<li><a href="#all_70430">常量</a></li>
</ul>
</li>
<li><a href="#all_70431">操作系统</a><ul>
<li><a href="#all_os_tmpdir_1408">os.tmpdir()</a></li>
<li><a href="#all_os_endianness_1408">os.endianness()</a></li>
<li><a href="#all_os_hostname_1408">os.hostname()</a></li>
<li><a href="#all_os_type_1408">os.type()</a></li>
<li><a href="#all_os_platform_1408">os.platform()</a></li>
<li><a href="#all_os_arch_1408">os.arch()</a></li>
<li><a href="#all_os_release_1408">os.release()</a></li>
<li><a href="#all_os_uptime_1408">os.uptime()</a></li>
<li><a href="#all_os_loadavg_1408">os.loadavg()</a></li>
<li><a href="#all_os_totalmem_1408">os.totalmem()</a></li>
<li><a href="#all_os_freemem_1408">os.freemem()</a></li>
<li><a href="#all_os_cpus_1408">os.cpus()</a></li>
<li><a href="#all_os_networkinterfaces_1408">os.networkInterfaces()</a></li>
<li><a href="#all_os_eol_1408">os.EOL</a></li>
</ul>
</li>
<li><a href="#all_70432">调试器</a><ul>
<li><a href="#all_70433">监视器</a></li>
<li><a href="#all_70434">命令参考</a><ul>
<li><a href="#all_70435">步进</a></li>
<li><a href="#all_70436">断点</a></li>
<li><a href="#all_70437">信息</a></li>
<li><a href="#all_70438">执行控制</a></li>
<li><a href="#all_70439">杂项</a></li>
</ul>
</li>
<li><a href="#all_70440">高级使用</a></li>
</ul>
</li>
<li><a href="#all_70441">集群</a><ul>
<li><a href="#all_70442">它是如何工作的</a></li>
<li><a href="#all_cluster_schedulingpolicy_1408">cluster.schedulingPolicy</a></li>
<li><a href="#all_cluster_settings_1408">cluster.settings</a></li>
<li><a href="#all_70443">集群的主进程(判断当前进程是否是主进程)</a></li>
<li><a href="#all_fork_1413">当前进程是否是从主进程的fork出来的</a></li>
<li><a href="#all_fork_1414">事件: 'fork'</a></li>
<li><a href="#all_online_2816">事件: 'online'</a></li>
<li><a href="#all_listening_5634">事件: 'listening'</a></li>
<li><a href="#all_disconnect_4225">事件: 'disconnect'</a></li>
<li><a href="#all_exit_7043">事件: 'exit'</a></li>
<li><a href="#all_setup_1408">事件: 'setup'</a></li>
<li><a href="#all_cluster_setupmaster_settings_1408">cluster.setupMaster([settings])</a></li>
<li><a href="#all_cluster_fork_env_1408">cluster.fork([env])</a></li>
<li><a href="#all_cluster_disconnect_callback_1408">cluster.disconnect([callback])</a></li>
<li><a href="#all_cluster_worker_1408">cluster.worker</a></li>
<li><a href="#all_cluster_workers_1408">cluster.workers</a></li>
<li><a href="#all_worker_1408">类: Worker</a><ul>
<li><a href="#all_worker_id_1408">worker.id</a></li>
<li><a href="#all_worker_process_1408">worker.process</a></li>
<li><a href="#all_worker_suicide_1408">worker.suicide</a></li>
<li><a href="#all_worker_send_message_sendhandle_1408">worker.send(message, [sendHandle])</a></li>
<li><a href="#all_worker_kill_signal_sigterm_1408">worker.kill([signal='SIGTERM'])</a></li>
<li><a href="#all_worker_disconnect_1408">worker.disconnect()</a></li>
<li><a href="#all_message_4226">事件: 'message'</a></li>
<li><a href="#all_online_2817">事件: 'online'</a></li>
<li><a href="#all_listening_5635">事件: 'listening'</a></li>
<li><a href="#all_disconnect_4226">事件: 'disconnect'</a></li>
<li><a href="#all_exit_7044">事件: 'exit'</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#all_smalloc_1408">Smalloc</a><ul>
<li><a href="#all_smalloc_alloc_length_receiver_type_1408">smalloc.alloc(length[, receiver][, type])</a></li>
<li><a href="#all_smalloc_copyonto_source_sourcestart_dest_deststart_copylength_1408">smalloc.copyOnto(source, sourceStart, dest, destStart, copyLength);</a></li>
<li><a href="#all_smalloc_dispose_obj_1408">smalloc.dispose(obj)</a></li>
<li><a href="#all_smalloc_kmaxlength_1408">smalloc.kMaxLength</a></li>
<li><a href="#all_smalloc_types_1408">smalloc.Types</a></li>
</ul>
</li>
</ul>

          </div>

          <div id="apicontent">
            <div class="translate-section" data-hash="aa7405b88a91e3fcb47440d8a50d74e5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>关于本文档<span><a href="#all_70395" id="all_70395">#</a></span></h1>
</div>

<!-- type=misc -->

<div class="translate-section" data-hash="28b50680b19346dc56b4189580109087"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>本文档的目标是从参考和概念的角度全面解释 Node.js 的 API，每章节描述一个内置模块或高级概念。

</p>
</div>

<div class="translate-section" data-hash="12ff05be8361be53d15d1520328a3e12"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在某些情况下，属性类型、方法参数以及事件处理过程（handler）参数 会被列在主标题下的列表中。

</p>
</div>

<div class="translate-section" data-hash="53747a6bca797ecc5a788c80f4b848b1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>每一个 <code>.html</code> 文件都对应一份内容相同的结构化 <code>.json</code> 文档。这个特性现在还是实验性质的，希望能够为一些需要对文档进行操作的IDE或者其他工具提供帮助。

</p>
</div>

<div class="translate-section" data-hash="b4bc306bb19b7007babab5c57177dd5f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>每个 <code>.html</code> 和 <code>.json</code> 文件都是基于源码的 <code>doc/api/</code> 目录下的 <code>.markdown</code> 文件生成的。本文档使用 <code>tools/doc/generate.js</code> 这个程序来生产的。 HTML 模板文件为 <code>doc/template.html</code>。

</p>
</div>

<div class="translate-section" data-hash="0cc8f14f97a09444de3c28d5cdb6eaa9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>稳定度<span><a href="#all_70396" id="all_70396">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="6b0734264357bd938355fff252568595"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在文档中，您可以了解每一个小节的稳定性。Node.js的API会有一些小的改变，当它成熟的时候，会有些部分相比另外一些来说更加可靠。有一部分接受过严格验证，被大量依赖的API几乎是不会改变的。也有一些是新增的、实验性的或者因被证实具有危险性而在重新设计中。











</p>
</div>

<div class="translate-section" data-hash="dff33ae45a3c5d9a9865b6f86f86320d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>稳定度定义如下

</p>
</div>

<div class="translate-section" data-hash="595108504041d4c14e662ce627cbe0e5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">5</span> <span class="sh_symbol">-</span> 已锁定
除非发现严重缺陷，该代码不会被更改。请不要对此区域提出更改，更改提议将被拒绝。</code></pre>
</div>

<div class="translate-section" data-hash="e479f52eacdf0adc6a18c657f5d04098"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>JSON 输出<span><a href="#all_json_1408" id="all_json_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="abc66b23e7a61cdd44feb93bfc606534"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">1</span> <span class="sh_symbol">-</span> 实验性</code></pre>
</div>

<div class="translate-section" data-hash="8239eda588cd4fad8ff7232983be2acc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>每个通过 markdown 生成的 HTML 文件都对应于一个具有相同数据的 JSON 文件。

</p>
</div>

<div class="translate-section" data-hash="77534481ce7937618d53c93f0554df3c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该特性引入于 node v0.6.12。当前是测试性功能。


</p>
</div>
<div class="translate-section" data-hash="0413d7051e9e0752c3a670011326e850"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>概述<span><a href="#all_70397" id="all_70397">#</a></span></h1>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="665e778eac58f3736115e9a6928f6d91"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个输出 “Hello World” 的简单 <a href="http://nodeapi.ucdok.com/api/http.html">Web 服务器</a>例子：

</p>
</div>

<div class="translate-section" data-hash="79870a5977a4cd6344b15c14c9833991"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'服务器已运行，请打开 http://127.0.0.1:8124/'</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="c2860975716c3263cfec0294a562cbcd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>要运行这个服务器，先将程序保存为文件 “example.js”，并使用 node 命令来执行：

</p>
</div>

<div class="translate-section" data-hash="394ce7a8aaf23c0b507e29b848f23483"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_symbol">&gt;</span> node example<span class="sh_symbol">.</span>js
服务器已运行，请打开 http<span class="sh_symbol">:</span><span class="sh_comment">//127.0.0.1:8124/</span></code></pre>
</div>

<div class="translate-section" data-hash="466b45b66579aabc880ee3d4d0f7bdbf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所有的文档中的例子均使用相同的方式运行。

</p>
</div>
<div class="translate-section" data-hash="89f29742c02d0fa625efdb2925fb15e6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>全局对象<span><a href="#all_70398" id="all_70398">#</a></span></h1>
</div>

<!-- type=misc -->

<div class="translate-section" data-hash="7aab1e777cfc8b3ff838a279a1bb9512"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这些对象在所有模块中都是可用的。有些对象实际上并非在全局作用域内而是在模块作用域内——这种情况在以下文档中会特别指出。

</p>
</div>

<div class="translate-section" data-hash="6696fcac4f46156f570aeffd06803da8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>global<span><a href="#all_global_1408" id="all_global_1408">#</a></span></h2>
</div>

<!-- type=global -->

<div class="translate-section" data-hash="40d7f4b975e3ec7f225fb45dfc883cc3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Object} 全局命名空间对象。</li>
</ul>
</div>

<div class="translate-section" data-hash="1f824a168130eb8ed018fc4b377856a2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在浏览器中，顶级作用域就是全局作用域。这就是说，在浏览器中，如果当前是在全局作用域内，<code>var something</code>将会声明一个全局变量。在Node中则不同。顶级作用域并非全局作用域，在Node模块里的<code>var something</code>只属于那个模块。

</p>
</div>

<div class="translate-section" data-hash="102af7b0b1d036243443642f81625831"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process<span><a href="#all_process_2816" id="all_process_2816">#</a></span></h2>
</div>

<!-- type=global -->

<div class="translate-section" data-hash="851aa722fb53608947b18811e82db1f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="b9d0d806ae7dc673c33787be680c6e9b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>进程对象。见 <a href="http://nodeapi.ucdok.com/api/process.html#process_process">进程对象</a>章节。

</p>
</div>

<div class="translate-section" data-hash="f7a829f04f8a11aaa6aca6a8852b1770"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>console<span><a href="#all_console_1408" id="all_console_1408">#</a></span></h2>
</div>

<!-- type=global -->

<div class="translate-section" data-hash="851aa722fb53608947b18811e82db1f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="5441bc45d3d500441cd1b4acaaf6e2c6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用于打印标准输出和标准错误。见<a href="http://nodeapi.ucdok.com/api/console.html">控制台</a>章节。

</p>
</div>

<div class="translate-section" data-hash="035108074901bbc3add526701a3de715"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: Buffer<span><a href="#all_buffer_4224" id="all_buffer_4224">#</a></span></h2>
</div>

<!-- type=global -->

<div class="translate-section" data-hash="2e7e2bc23cfa8b5114d33e138ef083ad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Function}</li>
</ul>
</div>

<div class="translate-section" data-hash="17383b58c051c7322ceb885b356183b7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用于处理二进制数据。见<a href="http://nodeapi.ucdok.com/api/buffer.html#buffer_buffer">Buffer</a>章节。

</p>
</div>

<div class="translate-section" data-hash="80433692e34f55d707581ebbdd0875e5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>require()<span><a href="#all_require_1408" id="all_require_1408">#</a></span></h2>
</div>

<!-- type=var -->

<div class="translate-section" data-hash="2e7e2bc23cfa8b5114d33e138ef083ad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Function}</li>
</ul>
</div>

<div class="translate-section" data-hash="75a9bcd4c1f3c0895fc3de614806c88b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>引入模块。见<a href="http://nodeapi.ucdok.com/api/modules.html#modules_modules">Modules</a>章节。<code>require</code>实际上并非全局的而是各个模块本地的。

</p>
</div>

<div class="translate-section" data-hash="b935e121aab2912440080a4b9dc22c81"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>require.resolve()<span><a href="#all_require_resolve_1408" id="all_require_resolve_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d5b4bbd589fde8d0eeee18b063fa7e17"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用内部的<code>require()</code>机制查找模块的位置，但不加载模块，只返回解析过的模块文件路径。

</p>
</div>

<div class="translate-section" data-hash="b629e53ddd5f06d774758bc88642006e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>require.cache<span><a href="#all_require_cache_1408" id="all_require_cache_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="851aa722fb53608947b18811e82db1f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="00c7f62c76c96a54cf715710f052c5ea"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>模块在引入时会缓存到该对象。通过删除该对象的键值，下次调用<code>require</code>时会重新加载相应模块。

</p>
</div>

<div class="translate-section" data-hash="8c7779cb53dbf597e62f974b63432066"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>require.extensions<span><a href="#all_require_extensions_1408" id="all_require_extensions_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="f4f7e8273ccedeba8f724a80abc4b08c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度：<span class="sh_number">0</span> <span class="sh_symbol">-</span> 已废弃</code></pre>
</div>

<div class="translate-section" data-hash="851aa722fb53608947b18811e82db1f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="198f87c46476cd6d695aee4ae10c3342"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>指导<code>require</code>方法如何处理特定的文件扩展名。

</p>
</div>

<div class="translate-section" data-hash="31d00e89473aac7ac2f0ae4b4681126f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>将<code>.sjs</code>文件作为<code>.js</code>文件处理：

</p>
</div>

<div class="translate-section" data-hash="24d6245e60857e32813e57e100020e3f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>require<span class="sh_symbol">.</span>extensions<span class="sh_symbol">[</span><span class="sh_string">'.sjs'</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> require<span class="sh_symbol">.</span>extensions<span class="sh_symbol">[</span><span class="sh_string">'.js'</span><span class="sh_symbol">];</span></code></pre>
</div>

<div class="translate-section" data-hash="2ee3faa86b24941ba045d2f3a3d89c7b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><strong>已废弃</strong> 之前，该列表用于按需编译非JavaScript模块并加载进Node。然而，实践中有更好的方式实现该功能，如通过其他Node程序加载模块，或提前将他们编译成JavaScript代码。

</p>
</div>

<div class="translate-section" data-hash="20cc6b058a2dc4bb6b83e4770a177ebf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>由于模块系统的API已锁定，该功能可能永远不会去掉。改动它可能会产生细微的错误和复杂性，所以最好保持不变。

</p>
</div>

<div class="translate-section" data-hash="cc7d75deb74692e24e3d876980a98d48"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>__filename<span><a href="#all_filename_1408" id="all_filename_1408">#</a></span></h2>
</div>

<!-- type=var -->

<div class="translate-section" data-hash="7e4b7de3e723b5f21c45cf0326e20ed3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{String}</li>
</ul>
</div>

<div class="translate-section" data-hash="38e38bdba3debf6303339031785450fe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当前所执行代码文件的文件路径。这是该代码文件经过解析后的绝对路径。对于主程序来说，这和命令行中使用的文件路径未必是相同的。在模块中此变量值是该模块文件的路径。

</p>
</div>

<div class="translate-section" data-hash="f21b74eb9322eae18e1c5da5ea8b1719"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例子：在<code>/Users/mjr</code>下运行<code>node example.js</code>

</p>
</div>

<div class="translate-section" data-hash="01248d96f426c2644a08aa0cd5504c2f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>__filename<span class="sh_symbol">);</span>
<span class="sh_comment">// /Users/mjr/example.js</span></code></pre>
</div>

<div class="translate-section" data-hash="6adde8c60f492421c2bcc022dbc22e22"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>__filename</code>实际上并非全局的而是各个模块本地的。

</p>
</div>

<div class="translate-section" data-hash="555c399c34f70743befb90979b745551"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>__dirname<span><a href="#all_dirname_1408" id="all_dirname_1408">#</a></span></h2>
</div>

<!-- type=var -->

<div class="translate-section" data-hash="7e4b7de3e723b5f21c45cf0326e20ed3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{String}</li>
</ul>
</div>

<div class="translate-section" data-hash="2fac4ed16a0939933ab7ec8f5b3807c5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当前执行脚本所在目录的目录名。

</p>
</div>

<div class="translate-section" data-hash="f21b74eb9322eae18e1c5da5ea8b1719"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例子：在<code>/Users/mjr</code>下运行<code>node example.js</code>

</p>
</div>

<div class="translate-section" data-hash="8e94e81297719f5519edef8f451d6f4e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>__dirname<span class="sh_symbol">);</span>
<span class="sh_comment">// /Users/mjr</span></code></pre>
</div>

<div class="translate-section" data-hash="9d3298feacade0f1e8505651a864bbe9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>__dirname</code>实际上并非全局的而是各个模块本地的。

</p>
</div>

<div class="translate-section" data-hash="c1307e89f961d42416dc298eee966000"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>module<span><a href="#all_module_1408" id="all_module_1408">#</a></span></h2>
</div>

<!-- type=var -->

<div class="translate-section" data-hash="851aa722fb53608947b18811e82db1f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="0b77eceab09cb2306de1ca3aa83ec213"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当前模块的引用。特别地，<code>module.exports</code>和<code>exports</code>指向同一个对象。<code>module</code>实际上并非全局的而是各个模块本地的。

</p>
</div>

<div class="translate-section" data-hash="dabd312ed8c076e27f38c979227c48f6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>详情可见<a href="http://nodeapi.ucdok.com/api/modules.html">模块系统文档</a>。

</p>
</div>

<div class="translate-section" data-hash="d6870c2593fa08576c8cf3a5886e7b0f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>exports<span><a href="#all_exports_1408" id="all_exports_1408">#</a></span></h2>
</div>

<!-- type=var -->

<div class="translate-section" data-hash="2d6947e45de7ea0768835bd88aba471e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>module.exports</code>对象的引用，该对象被当前模块的所有实例所共享，通过<code>require()</code>可访问该对象。
何时使用<code>exports</code>以及何时使用<code>module.exports</code>的详情可参见<a href="http://nodeapi.ucdok.com/api/modules.html">模块系统文档</a>。
<code>exports</code>实际上并非全局的而是各个模块本地的。

</p>
</div>

<div class="translate-section" data-hash="dabd312ed8c076e27f38c979227c48f6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>详情可见<a href="http://nodeapi.ucdok.com/api/modules.html">模块系统文档</a>。

</p>
</div>

<div class="translate-section" data-hash="48234f7309936bfc41ff85e3302b51b4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>关于模块系统的更多信息可参见<a href="http://nodeapi.ucdok.com/api/modules.html">模块</a> 。

</p>
</div>

<div class="translate-section" data-hash="6075914eb9f317d8d32b3179513137d7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>setTimeout(cb, ms)<span><a href="#all_settimeout_cb_ms_1408" id="all_settimeout_cb_ms_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="a602cd9cb944b42449ca48aab41d4d14"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在<em>至少</em><code>ms</code>毫秒后调用回调<code>cb</code>。实际延迟取决于外部因素，如操作系统定时器粒度及系统负载。

</p>
</div>

<div class="translate-section" data-hash="db169e344c67ce53b4a1ce8d977b0383"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>超时值必须在1-2147483647的范围内（包含1和2147483647）。如果该值超出范围，则该值被当作1毫秒处理。一般来说，一个定时器不能超过24.8天。

</p>
</div>

<div class="translate-section" data-hash="6226510e9063f56f4e06eb2a8fbb5637"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个代表该定时器的句柄值。

</p>
</div>

<div class="translate-section" data-hash="817f22ffc09c9dbf825c79ea83034c43"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>clearTimeout(t)<span><a href="#all_cleartimeout_t_1408" id="all_cleartimeout_t_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="7bea44d191c5ea8f45048836968e11d0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>停止一个之前通过<code>setTimeout()</code>创建的定时器。回调不会再被执行。

</p>
</div>

<div class="translate-section" data-hash="221e457c1ee333ffab574536f4f030e0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>setInterval(cb, ms)<span><a href="#all_setinterval_cb_ms_1408" id="all_setinterval_cb_ms_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="52999ed9dd01765b8fe159cca68919b7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>每隔<code>ms</code>毫秒重复调用回调<code>cb</code>。注意，取决于外部因素，如操作系统定时器粒度及系统负载，实际间隔可能会改变。它不会少于<code>ms</code>但可能比<code>ms</code>长。

</p>
</div>

<div class="translate-section" data-hash="cc03ac20140b22a704bd9a4d8f615d19"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>间隔值必须在1-2147483647的范围内（包含1和2147483647）。如果该值超出范围，则该值被当作1毫秒处理。一般来说，一个定时器不能超过24.8天。

</p>
</div>

<div class="translate-section" data-hash="6226510e9063f56f4e06eb2a8fbb5637"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个代表该定时器的句柄值。

</p>
</div>

<div class="translate-section" data-hash="fcac72f4f30655b026a210810af32f51"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>clearInterval(t)<span><a href="#all_clearinterval_t_1408" id="all_clearinterval_t_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="656160b538cdbcb9ce5eab27aab00c21"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>停止一个之前通过<code>setInterval()</code>创建的定时器。回调不会再被执行。

</p>
</div>

<!--type=global-->

<div class="translate-section" data-hash="32d747d968396b8c4aa6a86e06e387e2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>定制器函数是全局变量。见<a href="http://nodeapi.ucdok.com/api/timers.html">定时器</a>章节。

</p>
</div>

<div class="translate-section" data-hash="1010d85384a07c1e344e855cc5c5e334"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

</div>
<div class="translate-section" data-hash="336e500f24181596c17199e4abd81dcd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>控制台<span><a href="#all_70399" id="all_70399">#</a></span></h1>
</div>

<div class="translate-section" data-hash="050a2049458b1f3dbf3e3f111adcfb22"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">4</span> <span class="sh_symbol">-</span> 冻结</code></pre>
</div>

<div class="translate-section" data-hash="851aa722fb53608947b18811e82db1f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Object}</li>
</ul>
</div>

<!--type=global-->

<div class="translate-section" data-hash="e9cf4a1e08cef7f752ce71c39f1ad515"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用于向 stdout 和 stderr 打印字符。类似于大部分 Web 浏览器提供的 console 对象函数，在这里则是输出到 stdout 或 stderr。

</p>
</div>

<div class="translate-section" data-hash="9da18eb42b24be520985b0a60c467563"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当输出目标是一个终端或者文件时,console函数是同步的(为了防止过早退出时丢失信息).当输出目标是一个管道时它们是异步的(防止阻塞过长时间).

</p>
</div>

<div class="translate-section" data-hash="255c35632f24eb4ebd4c0de4b546fcbe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>也就是说，在下面的例子中，stdout 是非阻塞的，而 stderr 则是阻塞的。

</p>
</div>

<div class="translate-section" data-hash="4e437dece7c5dcedf84ab77630feecdb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>$ node script<span class="sh_symbol">.</span>js <span class="sh_number">2</span><span class="sh_symbol">&gt;</span> error<span class="sh_symbol">.</span>log <span class="sh_symbol">|</span> tee info<span class="sh_symbol">.</span>log</code></pre>
</div>

<div class="translate-section" data-hash="790368616fae8abd2d801c084f7e3641"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在日常使用中，您不需要太担心阻塞/非阻塞的差别，除非您需要记录大量数据。

</p>
</div>

<div class="translate-section" data-hash="2f33f1eee2162604d6bc8fa5759c5a3f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>console.log([data], [...])<span><a href="#all_console_log_data_1408" id="all_console_log_data_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ebd24baed700eb1f977d13bff601827b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>向 stdout 打印并新起一行。这个函数可以像 <code>printf()</code> 那样接受多个参数，例如：

</p>
</div>

<div class="translate-section" data-hash="e425cc8ba26896aba73510ef2818bfa8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'count: %d'</span><span class="sh_symbol">,</span> count<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="138ed380362add4dafae88f7e1186292"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果在第一个字符串中没有找到格式化元素，那么 <code>util.inspect</code> 将被应用到各个参数。详见 <a href="http://nodeapi.ucdok.com/api/util.html#util_util_format_format">util.format()</a>。

</p>
</div>

<div class="translate-section" data-hash="43a8f7f487b82b9592ecfe1cba5a2dc6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>console.info([data], [...])<span><a href="#all_console_info_data_1408" id="all_console_info_data_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="2f61819dc55885f30ccb0b445ac73e77"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同 <code>console.log</code>。

</p>
</div>

<div class="translate-section" data-hash="f6ecf8389b9b4cf4a9a581a84a43bc63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>console.error([data], [...])<span><a href="#all_console_error_data_1408" id="all_console_error_data_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="15a875079a95270b35ccfb34a60cacc6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同 <code>console.log</code>，但输出到 stderr。

</p>
</div>

<div class="translate-section" data-hash="20357a3290900516d5b77897948d14a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>console.warn([data], [...])<span><a href="#all_console_warn_data_1408" id="all_console_warn_data_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="dab05de3f7f551ff1e3698216003a859"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同 <code>console.error</code>。

</p>
</div>

<div class="translate-section" data-hash="01188864ebb8cb029c3ae5cc2a1254b0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>console.dir(obj)<span><a href="#all_console_dir_obj_1408" id="all_console_dir_obj_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="cba3e0ada1014debb8402c8331896c45"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>对 <code>obj</code> 使用 <code>util.inspect</code> 并将结果字符串输出到 stdout。这个函数会忽略 <code>obj</code> 上的任何自定义 <code>inspect()</code>。

</p>
</div>

<div class="translate-section" data-hash="2f53e6d66d2be5af3c124582d2b7ca6a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>console.time(label)<span><a href="#all_console_time_label_1408" id="all_console_time_label_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="500771e27f7329796719f0c320b208a9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>标记一个时间点。

</p>
</div>

<div class="translate-section" data-hash="afd34a609320ca41a6ce3e126e2a5dc1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>console.timeEnd(label)<span><a href="#all_console_timeend_label_1408" id="all_console_timeend_label_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="7878d09d334a6ab3b9acab9cafab1fa0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>结束计时器，记录输出。例如：

</p>
</div>

<div class="translate-section" data-hash="63db0aaccb4c346e0ef4cf8e4239fa60"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">time</span><span class="sh_symbol">(</span><span class="sh_string">'100-elements'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> <span class="sh_number">100</span><span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span> <span class="sh_cbracket">{</span>
  <span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>
console<span class="sh_symbol">.</span><span class="sh_function">timeEnd</span><span class="sh_symbol">(</span><span class="sh_string">'100-elements'</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="fc5601dca61f517c006eb558e068011c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>console.trace(label)<span><a href="#all_console_trace_label_1408" id="all_console_trace_label_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="6deb1081745814e7a6039e9955cc5a83"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>打印当前位置的栈跟踪到 stderr。

</p>
</div>

<div class="translate-section" data-hash="1f5ade07c0f84f203af9586b0c1c7d2f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>console.assert(expression, [message])<span><a href="#all_console_assert_expression_message_1408" id="all_console_assert_expression_message_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="9fe56664605de466458c8d5e8eb9bdbf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>与 <a href="http://nodeapi.ucdok.com/api/assert.html#assert_assert_value_message_assert_ok_value_message">assert.ok()</a> 相同，如果 <code>expression</code> 执行结果为 <code>false</code> 则抛出一个带上 <code>message</code> 的 AssertionError。

</p>
</div>

<div class="translate-section" data-hash="e937f1a66d9c4b81be20eca387054b78"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

</div>
<div class="translate-section" data-hash="7b67dc55d3ffe9803142836bb53f2852"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>定时器<span><a href="#all_70400" id="all_70400">#</a></span></h1>
</div>

<div class="translate-section" data-hash="1832a6bdec37a3991495a83f92b71e51"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">5</span> <span class="sh_symbol">-</span> 已锁定</code></pre>
</div>

<div class="translate-section" data-hash="660d26ed67912ca449f6752fb2debc46"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所有的定时器函数都是全局变量. 你使用这些函数时不需要 <code>require()</code>模块.

</p>
</div>

<div class="translate-section" data-hash="4165a2eeaa0cfcd959ac9a2103d5972a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>setTimeout(callback, delay, [arg], [...])<span><a href="#all_settimeout_callback_delay_arg_1408" id="all_settimeout_callback_delay_arg_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b9dba4cc39731239ab7fdcfca121186f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>调度 <code>delay</code> 毫秒后的一次 <code>callback</code> 执行。返回一个可能被 <code>clearTimeout()</code> 用到的 <code>timeoutId</code>。可选地，您还能给回调传入参数。

</p>
</div>

<div class="translate-section" data-hash="f3cbac435b304b02867563ff4b6ba254"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请务必注意，您的回调有可能不会在准确的 <code>delay</code> 毫秒后被调用。Node.js 不保证回调被触发的精确时间和顺序。回调会在尽可能接近所指定时间上被调用。

</p>
</div>

<div class="translate-section" data-hash="f31745195f8e469cf01277ceb832a9d1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>clearTimeout(timeoutId)<span><a href="#all_cleartimeout_timeoutid_1408" id="all_cleartimeout_timeoutid_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="bc35fc1d515de3740e10849c45152d31"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>阻止一个 timeout 被触发。

</p>
</div>

<div class="translate-section" data-hash="cd2438122b2c347352d0e4a75bde999e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>setInterval(callback, delay, [arg], [...])<span><a href="#all_setinterval_callback_delay_arg_1408" id="all_setinterval_callback_delay_arg_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b46f48b49a9a3a5f8f7842c4824b0033"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>调度每隔 <code>delay</code> 毫秒执行一次的 <code>callback</code>。返回一个可能被 <code>clearInterval()</code> 用到的 <code>intervalId</code>。可选地，您还能给回调传入参数。

</p>
</div>

<div class="translate-section" data-hash="67b9ceab73e555aaf2961756034ae67d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>clearInterval(intervalId)<span><a href="#all_clearinterval_intervalid_1408" id="all_clearinterval_intervalid_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b6d2c8d6a9308224cedd1c74dbd8e3f1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>停止一个 interval 的触发。

</p>
</div>

<div class="translate-section" data-hash="a7342434f88510acf0b84e401cdc5a52"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>unref()<span><a href="#all_unref_1408" id="all_unref_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="be2f9c735db533b2b9ffc8c63d8b0b5d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>setTimeout</code> 和 <code>setInterval</code> 所返回的值同时具有 <code>timer.unref()</code> 方法，允许您创建一个活动的、但当它是事件循环中仅剩的项目时不会保持程序运行的定时器。如果定时器已被 <code>unref</code>，再次调用 <code>unref</code> 不会产生其它影响。

</p>
</div>

<div class="translate-section" data-hash="09ee2ad6643a0aff89525bf2cda47267"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在 <code>setTimeout</code> 的情景中当您 <code>unref</code> 您会创建另一个定时器，并唤醒事件循环。创建太多这种定时器可能会影响事件循环的性能，慎用。

</p>
</div>

<div class="translate-section" data-hash="39edd3d76190e081cc29c5b034591016"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>ref()<span><a href="#all_ref_1408" id="all_ref_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="8117cfbc235a1e7345f335dad5e56a5b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果您之前 <code>unref()</code> 了一个定时器，您可以调用 <code>ref()</code> 来明确要求定时器让程序保持运行。如果定时器已被 <code>ref</code> 那么再次调用 <code>ref</code> 不会产生其它影响。

</p>
</div>

<div class="translate-section" data-hash="9d42aab7a53208884478c25e135d0a24"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>setImmediate(callback, [arg], [...])<span><a href="#all_setimmediate_callback_arg_1408" id="all_setimmediate_callback_arg_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b0ce26bab290a23430ac9ecc057f26b7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>调度在所有 I/O 事件回调之后、<code>setTimeout</code> 和 <code>setInterval</code> 之前“立即”执行 <code>callback</code>。返回一个可能被 <code>clearImmediate()</code> 用到的 <code>immediateId</code>。可选地，您还能给回调传入参数。

</p>
</div>

<div class="translate-section" data-hash="3e41ec32bbccab9a5ff09d08a433c4ad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>immediate 的回调以它们创建的顺序被加入队列。整个回调队列会在每个事件循环迭代中被处理。如果您在一个正被执行的回调中添加 immediate，那么这个 immediate 在下一个事件循环迭代之前都不会被触发。

</p>
</div>

<div class="translate-section" data-hash="4415f24d311bb5b12038963c791dc171"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>clearImmediate(immediateId)<span><a href="#all_clearimmediate_immediateid_1408" id="all_clearimmediate_immediateid_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="7dd4bcbd263c6827290874cc9358f37e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>停止一个 immediate 的触发。

</p>
</div>
<div class="translate-section" data-hash="4ea0ec87b5569294c2d34c57f9b7e108"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>Modules<span><a href="#all_modules_1408" id="all_modules_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="1832a6bdec37a3991495a83f92b71e51"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">5</span> <span class="sh_symbol">-</span> 已锁定</code></pre>
</div>

<!--name=module-->

<div class="translate-section" data-hash="965bca5fd900757dd46124070a907555"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Node有一个简易的模块加载系统。在node中，文件和模块是一一对应的。下面示例是<code>foo.js</code>加载同一目录下的<code>circle.js</code>。

</p>
</div>

<div class="translate-section" data-hash="299e26daecf680eabe1f37e1d3a1a32d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p> <code>foo.js</code>的内容：

</p>
</div>

<div class="translate-section" data-hash="1da653f93a56e49fb54cd3735004b1e0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> circle <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./circle.js'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span> <span class="sh_string">'The area of a circle of radius 4 is '</span>
           <span class="sh_symbol">+</span> circle<span class="sh_symbol">.</span><span class="sh_function">area</span><span class="sh_symbol">(</span><span class="sh_number">4</span><span class="sh_symbol">));</span></code></pre>
</div>

<div class="translate-section" data-hash="f2e66811d7fa0da0189258a92c62cfeb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>circle.js</code>的内容:

</p>
</div>

<div class="translate-section" data-hash="d11b57eece83dfd3ca6856bfd369be6d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> PI <span class="sh_symbol">=</span> <span class="sh_predef_var">Math</span><span class="sh_symbol">.</span>PI<span class="sh_symbol">;</span>
exports<span class="sh_symbol">.</span>area <span class="sh_symbol">=</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>r<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">return</span> PI <span class="sh_symbol">*</span> r <span class="sh_symbol">*</span> r<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
exports<span class="sh_symbol">.</span>circumference <span class="sh_symbol">=</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>r<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">return</span> <span class="sh_number">2</span> <span class="sh_symbol">*</span> PI <span class="sh_symbol">*</span> r<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span></code></pre>
</div>

<div class="translate-section" data-hash="93e2a7f60caeab9ef97ba1f1b5cf1e1b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>circle.js</code>模块输出了<code>area()</code>和<code>circumference()</code>两个函数。要输出某个对象，把它加到<code>exports</code>这个特殊对象下即可。

</p>
</div>

<div class="translate-section" data-hash="6a55eef417c516be8a7dae93b260a042"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意，<code>exports</code>是<code>module.exports</code>的一个引用，只是为了用起来方便。当你想输出的是例如构造函数这样的单个项目，那么需要使用<code>module.exports</code>。

</p>
</div>

<div class="translate-section" data-hash="86552207164fda79a89559b5dbe9efc2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 正确输出构造函数</span>
module<span class="sh_symbol">.</span>exports <span class="sh_symbol">=</span> MyConstructor<span class="sh_symbol">;</span></code></pre>
</div>

<div class="translate-section" data-hash="290f39a75da0488e9113e5d9c9a6bb4c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>模块内的本地变量是私有的。在这里例子中，<code>PI</code>这个变量就是<code>circle.js</code>私有的。

</p>
</div>

<div class="translate-section" data-hash="487c9e96d26be294074cb9b55fee2be7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>模块系统的实现在<code>require("module")</code>中。

</p>
</div>

<div class="translate-section" data-hash="2ea228a368417a7d10eb92427e73e960"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>循环<span><a href="#all_70401" id="all_70401">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="474aff92dcbf40a60216bbb3c21fec5b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当存在循环的<code>require()</code>调用时，一个模块可能在返回时并不会被执行。

</p>
</div>

<div class="translate-section" data-hash="2cbde2402f93f8e7ee690620c574df3f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>考虑这样一种情形:

</p>
</div>

<div class="translate-section" data-hash="4b63f02c6bbd5e33cbda640e9ad261ea"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>a.js</code>:

</p>
</div>

<div class="translate-section" data-hash="eef300af775c791090dfc9e64921391e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'a starting'</span><span class="sh_symbol">);</span>
exports<span class="sh_symbol">.</span>done <span class="sh_symbol">=</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
<span class="sh_keyword">var</span> b <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./b.js'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'in a, b.done = %j'</span><span class="sh_symbol">,</span> b<span class="sh_symbol">.</span>done<span class="sh_symbol">);</span>
exports<span class="sh_symbol">.</span>done <span class="sh_symbol">=</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'a done'</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="6f8690846e58f962711a8c08368d39e6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>b.js</code>:

</p>
</div>

<div class="translate-section" data-hash="5ca0e80018d88fc9972a6a759a7b7aa8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'b starting'</span><span class="sh_symbol">);</span>
exports<span class="sh_symbol">.</span>done <span class="sh_symbol">=</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
<span class="sh_keyword">var</span> a <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./a.js'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'in b, a.done = %j'</span><span class="sh_symbol">,</span> a<span class="sh_symbol">.</span>done<span class="sh_symbol">);</span>
exports<span class="sh_symbol">.</span>done <span class="sh_symbol">=</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'b done'</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="1dda41cdf45175786b9c825a5e1af528"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>main.js</code>:

</p>
</div>

<div class="translate-section" data-hash="b7a2f10aa498e6976a7c9627e25527c5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'main starting'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> a <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./a.js'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> b <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./b.js'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'in main, a.done=%j, b.done=%j'</span><span class="sh_symbol">,</span> a<span class="sh_symbol">.</span>done<span class="sh_symbol">,</span> b<span class="sh_symbol">.</span>done<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="39760be97c64a6b20c4a88c59ff206be"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>首先<code>main.js</code>加载<code>a.js</code>,接着<code>a.js</code>又去加载<code>b.js</code>。这时，<code>b.js</code>会尝试去加载<code>a.js</code>。为了防止无限的循环，<code>a.js</code>会返回一个<strong>unfinished copy</strong>给<code>b.js</code>。然后<code>b.js</code>就会停止加载，并将其<code>exports</code>对象返回给<code>a.js</code>模块。

</p>
</div>

<div class="translate-section" data-hash="2922c58adef34bccf0b8bb4db40399de"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这样<code>main.js</code>就把这两个模块都加载完成了。这段程序的输出如下：

</p>
</div>

<div class="translate-section" data-hash="5e97f481cc6957354c1dbc6f7461582b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>$ node main<span class="sh_symbol">.</span>js
main starting
a starting
b starting
<span class="sh_keyword">in</span> b<span class="sh_symbol">,</span> a<span class="sh_symbol">.</span>done <span class="sh_symbol">=</span> <span class="sh_keyword">false</span>
b done
<span class="sh_keyword">in</span> a<span class="sh_symbol">,</span> b<span class="sh_symbol">.</span>done <span class="sh_symbol">=</span> <span class="sh_keyword">true</span>
a done
<span class="sh_keyword">in</span> main<span class="sh_symbol">,</span> a<span class="sh_symbol">.</span>done<span class="sh_symbol">=</span><span class="sh_keyword">true</span><span class="sh_symbol">,</span> b<span class="sh_symbol">.</span>done<span class="sh_symbol">=</span><span class="sh_keyword">true</span></code></pre>
</div>

<div class="translate-section" data-hash="cd81e4a8bde5a7777bb3ae7e3578065b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果你的程序中有循环的模块依赖，请确保工作正常。

</p>
</div>

<div class="translate-section" data-hash="9b544e670f501e5fcc5de04ba14b3c65"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>核心模块<span><a href="#all_70402" id="all_70402">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="94daedbde594adfe364ba65a69ac320c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Node中有一些模块是编译成二进制的。这些模块在本文档的其他地方有更详细的描述。

</p>
</div>

<div class="translate-section" data-hash="af92ea7cd15935a86828849938f747be"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>核心模块定义在node源代码的<code>lib/</code>目录下。

</p>
</div>

<div class="translate-section" data-hash="3bc71bd322df3ecf1fc0676ae2327c01"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>require()</code>总是会优先加载核心模块。例如，<code>require('http')</code>总是返回编译好的HTTP模块，而不管是否有这个名字的文件。

</p>
</div>

<div class="translate-section" data-hash="c8302ba841fde5ab68f546352c8bb26f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>文件模块<span><a href="#all_70403" id="all_70403">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="ebbe401ccd4618383f4a5a1165a2786e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果按文件名没有查找到，那么node会添加 <code>.js</code>和 <code>.json</code>后缀名，再尝试加载，如果还是没有找到，最后会加上<code>.node</code>的后缀名再次尝试加载。

</p>
</div>

<div class="translate-section" data-hash="0896442f55cb60119af333f8d9307e9f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>.js</code> 会被解析为Javascript纯文本文件，<code>.json</code> 会被解析为JSON格式的纯文本文件. <code>.node</code> 则会被解析为编译后的插件模块，由<code>dlopen</code>进行加载。

</p>
</div>

<div class="translate-section" data-hash="4c7efb7ec9143d9d7aed99b033ecc4e8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>模块以<code>'/'</code>为前缀，则表示绝对路径。例如，<code>require('/home/marco/foo.js')</code> ，加载的是<code>/home/marco/foo.js</code>这个文件。

</p>
</div>

<div class="translate-section" data-hash="a4e4056372bc95aa439d8e262b3a01ae"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>模块以<code>'./'</code>为前缀，则路径是相对于调用<code>require()</code>的文件。
也就是说，<code>circle.js</code>必须和<code>foo.js</code>在同一目录下，<code>require('./circle')</code>才能找到。

</p>
</div>

<div class="translate-section" data-hash="fa0cab6b89900aa4d9cf9a7a89cbf6a1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当没有以'/'或者'./'来指向一个文件时，这个模块要么是"核心模块"，要么就是从<code>node_modules</code>文件夹加载的。

</p>
</div>

<div class="translate-section" data-hash="25dfa8c9612162cbaba1fef1ba4249c4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果指定的路径不存在，<code>require()</code>会抛出一个<code>code</code>属性为<code>'MODULE_NOT_FOUND'</code>的错误。

</p>
</div>

<div class="translate-section" data-hash="96fe5005f0c25bf0f18ea1b25235ad43"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>从<code>node_modules</code>文件夹中加载<span><a href="#all_node_modules_1408" id="all_node_modules_1408">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="31e53b90434ea9d35f0f95fd014781b1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果<code>require()</code>中的模块名不是一个本地模块，也没有以<code>'/'</code>, <code>'../'</code>, 或是 <code>'./'</code>开头，那么node会从当前模块的父目录开始，尝试在它的<code>/node_modules</code>文件夹里加载相应模块。

</p>
</div>

<div class="translate-section" data-hash="15063bbf475019333effb7f412a33cff"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果没有找到，那么就再向上移动到父目录，直到到达顶层目录位置。

</p>
</div>

<div class="translate-section" data-hash="538da18f64be552d632e27c5055aa66b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例如，如果位于<code>'/home/ry/projects/foo.js'</code>的文件调用了<code>require('bar.js')</code>，那么node查找的位置依次为：

</p>
</div>

<div class="translate-section" data-hash="ef507cafbc3b4677fded8e562718b893"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>/home/ry/projects/node_modules/bar.js</code></li>
<li><code>/home/ry/node_modules/bar.js</code></li>
<li><code>/home/node_modules/bar.js</code></li>
<li><code>/node_modules/bar.js</code></li>
</ul>
</div>

<div class="translate-section" data-hash="fe77c659c4b815b17be8372e5bb0c6a8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这就要求程序员应尽量把依赖放在就近的位置，以防崩溃。

</p>
</div>

<div class="translate-section" data-hash="2d44e0a564eb74c886a57ad1eaf3a438"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Folders as Modules<span><a href="#all_folders_as_modules_1408" id="all_folders_as_modules_1408">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="ee435180dcff072f92647d16a2f7dd94"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>可以把程序和库放到一个单独的文件夹里，并提供单一入口来指向它。有三种方法，使一个文件夹可以作为<code>require()</code>的参数来加载。

</p>
</div>

<div class="translate-section" data-hash="2b3f7ec01c15346bfb5b01039e04f9d0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>首先是在文件夹的根目录创建一个叫做<code>package.json</code>的文件，它需要指定一个<code>main</code>模块。下面是一个package.json文件的示例。

</p>
</div>

<div class="translate-section" data-hash="0271324da8f65e2dae8b4357a6c1af7f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> <span class="sh_string">"name"</span> <span class="sh_symbol">:</span> <span class="sh_string">"some-library"</span><span class="sh_symbol">,</span>
  <span class="sh_string">"main"</span> <span class="sh_symbol">:</span> <span class="sh_string">"./lib/some-library.js"</span> <span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="f49c6b24d9d073051f85a0628b32e1f9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例中这个文件，如果是放在<code>./some-library</code>目录下面，那么<code>require('./some-library')</code>就将会去加载<code>./some-library/lib/some-library.js</code>。

</p>
</div>

<div class="translate-section" data-hash="dd1bd25e6eb4e220b1119157b685fb63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>This is the extent of Node's awareness of package.json files.

</p>
</div>

<div class="translate-section" data-hash="0da0c91a17e024b87a3c86e95eadb0de"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果目录里没有package.json这个文件，那么node就会尝试去加载这个路径下的<code>index.js</code>或者<code>index.node</code>。例如，若上面例子中，没有package.json，那么<code>require('./some-library')</code>就将尝试加载下面的文件：

</p>
</div>

<div class="translate-section" data-hash="86af8b1b19e8f6f4948946cd4d1babaa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>./some-library/index.js</code></li>
<li><code>./some-library/index.node</code></li>
</ul>
</div>

<div class="translate-section" data-hash="59823b78e566a4e3fa0e40ab35b5ecf8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Caching<span><a href="#all_caching_1408" id="all_caching_1408">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="3427328acd33f0230382c76b1fc9b7de"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>模块在第一次加载后会被缓存。这意味着（类似其他缓存）每次调用<code>require('foo')</code>的时候都会返回同一个对象，当然，必须是每次都解析到同一个文件。

</p>
</div>

<div class="translate-section" data-hash="078c6c96be25ba3d1c33c528be26398c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Multiple calls to <code>require('foo')</code> may not cause the module code to be
executed multiple times.  This is an important feature.  With it,
"partially done" objects can be returned, thus allowing transitive
dependencies to be loaded even when they would cause cycles.

</p>
</div>

<div class="translate-section" data-hash="45a6587d46138e085c705219e8c0f662"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果你希望一个模块多次执行，那么就输出一个函数，然后调用这个函数。

</p>
</div>

<div class="translate-section" data-hash="9f2e444753074a1a3899ac07e39b119e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Module Caching Caveats<span><a href="#all_module_caching_caveats_1408" id="all_module_caching_caveats_1408">#</a></span></h3>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="0879ebf9fe82e50b13682e9a19840ba0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>模块的缓存是依赖于解析后的文件名。由于随着调用的位置不同，可能解析到不同的文件（比如需从<code>node_modules</code>文件夹加载的情况），所以，如果解析到其他文件时，就不能<em>保证</em><code>require('foo')</code>总是会返回确切的同一对象。

</p>
</div>

<div class="translate-section" data-hash="d35ba5ca3333a1a7cb8d2ccbd666dc4b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>The <code>module</code> Object<span><a href="#all_the_module_object_1408" id="all_the_module_object_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="51eba6753e013634d86c86adc229c5a7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<!-- type=var -->
<!-- name=module -->

</div>

<div class="translate-section" data-hash="851aa722fb53608947b18811e82db1f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="9d49e4134bb03518e8c39b95a50e2bb8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在每一个模块中，变量 <code>module</code> 是一个代表当前模块的对象的引用。
特别地，<code>module.exports</code> 可以通过全局模块对象 <code>exports</code> 获取到。
<code>module</code> 不是事实上的全局对象，而更像是每个模块内部的。

</p>
</div>

<div class="translate-section" data-hash="c06779d6687203f200c2d311c252a1cb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>module.exports<span><a href="#all_module_exports_1408" id="all_module_exports_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="851aa722fb53608947b18811e82db1f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="3dc21d401052e1ec9d12fc4c84c7d87f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>module.exports</code> 对象是通过模块系统产生的。有时候这是难以接受的，许多人想让他们的模块是某个类的实例。
因此，将要导出的对象赋值给 <code>module.exports</code> 。例如，假设我们有一个模块称之为 <code>a.js</code>

</p>
</div>

<div class="translate-section" data-hash="6156bf45c9af789cd675dbcc34e5d4b4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// Do some work, and after some time emit</span>
<span class="sh_comment">// the 'ready' event from the module itself.</span>
<span class="sh_function">setTimeout</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  module<span class="sh_symbol">.</span>exports<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'ready'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="383e210393786f74f97b347d478d59d6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>那么，在另一个文件中我们可以这样写

</p>
</div>

<div class="translate-section" data-hash="890285d6e942649b9f38c3406995e304"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> a <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./a'</span><span class="sh_symbol">);</span>
a<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'ready'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'module a is ready'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="6e85d814f0b5bb6a85ebd366913e72ad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Note that assignment to <code>module.exports</code> must be done immediately. It cannot be
done in any callbacks.  This does not work:

</p>
</div>

<div class="translate-section" data-hash="e069ebccb6889f10ada25229a1b90584"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>x.js:

</p>
</div>

<div class="translate-section" data-hash="fc8a6d28fadd2ea92f510e766caf9406"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_function">setTimeout</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  module<span class="sh_symbol">.</span>exports <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span> a<span class="sh_symbol">:</span> <span class="sh_string">"hello"</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="1a30f872f0c59ec0ca73da0b7da9bd37"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>y.js:

</p>
</div>

<div class="translate-section" data-hash="1d168c233c586719bf187595f33aa95e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> x <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./x'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>x<span class="sh_symbol">.</span>a<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="8842a4e7ff0b68be4ac7e3646cde8585"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>module.require(id)<span><a href="#all_module_require_id_1408" id="all_module_require_id_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d09b0446197a0b878d93b45781b43297"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>id</code> {String}</li>
<li>Return: {Object} 已解析模块的 <code>module.exports</code></li>
</ul>
</div>

<div class="translate-section" data-hash="d62c533ae6ee04998de3756f7eb48cb3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>module.require</code> 方法提供了一种像 <code>require()</code> 一样从最初的模块加载一个模块的方法。

</p>
</div>

<div class="translate-section" data-hash="2b09c98fb5b21c8c08ab616e656df928"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意，为了这样做，你必须取得一个对 <code>module</code> 对象的引用。
<code>require()</code> 返回 <code>module.exports</code>，并且 <code>module</code> 是一个典型的只能在特定模块作用域内有效的变量，如果要使用它，就必须明确的导出。

</p>
</div>

<div class="translate-section" data-hash="d36c216e4eb56e876e41dcc19ef10b9a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>module.id<span><a href="#all_module_id_1408" id="all_module_id_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="7e4b7de3e723b5f21c45cf0326e20ed3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{String}</li>
</ul>
</div>

<div class="translate-section" data-hash="7700686ef79fe1d252c956dd5650e8b3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用于区别模块的标识符。通常是完全解析后的文件名。

</p>
</div>

<div class="translate-section" data-hash="17338d996eb707c6699b01f4fbda9a12"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>module.filename<span><a href="#all_module_filename_1408" id="all_module_filename_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="7e4b7de3e723b5f21c45cf0326e20ed3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{String}</li>
</ul>
</div>

<div class="translate-section" data-hash="327ca77a6d1152588d79828f3a4aec9c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>模块完全解析后的文件名。

</p>
</div>

<div class="translate-section" data-hash="e49517962dbb2dcf792e5e4b987e0d6c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>module.loaded<span><a href="#all_module_loaded_1408" id="all_module_loaded_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="36c536c875e3e8bfc2e789f2da475d4d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Boolean}</li>
</ul>
</div>

<div class="translate-section" data-hash="097a78cd971824dd9d482f6fe1fc8f6a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>不论该模块是否加载完毕，或者正在加载的过程中。

</p>
</div>

<div class="translate-section" data-hash="8a494d162c0ab64aaae2f42e890b697d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>module.parent<span><a href="#all_module_parent_1408" id="all_module_parent_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="2d80769f101da31c3cbf0756be443f04"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Module Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="c24f922e4eae0f5d7bc5262e72c66d2f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>引入这个模块的模块。

</p>
</div>

<div class="translate-section" data-hash="c97cf8427e6be043e4aa250a97d8d76e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>module.children<span><a href="#all_module_children_1408" id="all_module_children_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="da988593f493b305c0e8d1e200e041c4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Array}</li>
</ul>
</div>

<div class="translate-section" data-hash="b4eaa88c565505b616ea2ab5d9179acf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个模块引入的所有模块对象。

</p>
</div>

<div class="translate-section" data-hash="2bbace181ab1c85b93ca262d1669daf5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>总体来说...<span><a href="#all_70404" id="all_70404">#</a></span></h2>
</div>

<!-- type=misc -->

<div class="translate-section" data-hash="3b45d1afc5c2c18cfe4f3811d1c4cc9c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>为了获取调用 <code>require</code> 加载的确切的文件名，使用 <code>require.resolve()</code> 函数。

</p>
</div>

<div class="translate-section" data-hash="0c2ed2cb029d5b6334cbffe5bfd76e78"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>综上所述，下面用伪代码的高级算法形式表达了 require.resolve 是如何工作的：

</p>
</div>

<div class="translate-section" data-hash="34d8ab1120dbaf606313dc4de78ed4f7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_function">NODE_MODULES_PATHS</span><span class="sh_symbol">(</span>START<span class="sh_symbol">)</span>
<span class="sh_number">1</span><span class="sh_symbol">.</span> let PARTS <span class="sh_symbol">=</span> path <span class="sh_function">split</span><span class="sh_symbol">(</span>START<span class="sh_symbol">)</span>
<span class="sh_number">2</span><span class="sh_symbol">.</span> let ROOT <span class="sh_symbol">=</span> index of first instance of <span class="sh_string">"node_modules"</span> <span class="sh_keyword">in</span> PARTS<span class="sh_symbol">,</span> or <span class="sh_number">0</span>
<span class="sh_number">3</span><span class="sh_symbol">.</span> let I <span class="sh_symbol">=</span> count of PARTS <span class="sh_symbol">-</span> <span class="sh_number">1</span>
<span class="sh_number">4</span><span class="sh_symbol">.</span> let DIRS <span class="sh_symbol">=</span> <span class="sh_symbol">[]</span>
<span class="sh_number">5</span><span class="sh_symbol">.</span> <span class="sh_keyword">while</span> I <span class="sh_symbol">&gt;</span> ROOT<span class="sh_symbol">,</span>
   a<span class="sh_symbol">.</span> <span class="sh_keyword">if</span> PARTS<span class="sh_symbol">[</span>I<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_string">"node_modules"</span> CONTINUE
   c<span class="sh_symbol">.</span> DIR <span class="sh_symbol">=</span> path <span class="sh_function">join</span><span class="sh_symbol">(</span>PARTS<span class="sh_symbol">[</span><span class="sh_number">0</span> <span class="sh_symbol">..</span> I<span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_string">"node_modules"</span><span class="sh_symbol">)</span>
   b<span class="sh_symbol">.</span> DIRS <span class="sh_symbol">=</span> DIRS <span class="sh_symbol">+</span> DIR
   c<span class="sh_symbol">.</span> let I <span class="sh_symbol">=</span> I <span class="sh_symbol">-</span> <span class="sh_number">1</span>
<span class="sh_number">6</span><span class="sh_symbol">.</span> <span class="sh_keyword">return</span> DIRS</code></pre>
</div>

<div class="translate-section" data-hash="7775a9093c2dfcf89c4b4d0c53c44b55"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>从全局文件夹加载<span><a href="#all_70405" id="all_70405">#</a></span></h2>
</div>

<!-- type=misc -->

<div class="translate-section" data-hash="5b5a21186a870c10615369fe06ec2539"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果 <code>NODE_PATH</code> 环境变量设置为一个以冒号分割的绝对路径的列表，
找不到模块时 node 将会从这些路径中搜索模块。
（注意：在 windows 操作系统上，<code>NODE_PATH</code> 是以分号间隔的）

</p>
</div>

<div class="translate-section" data-hash="e58f97b318ebc1de19e588aa0855d139"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>此外，node 将会搜索以下地址：

</p>
</div>

<div class="translate-section" data-hash="dda5022ee7924602b399b581800fba78"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>1: <code>$HOME/.node_modules</code></li>
<li>2: <code>$HOME/.node_libraries</code></li>
<li>3: <code>$PREFIX/lib/node</code></li>
</ul>
</div>

<div class="translate-section" data-hash="07d38ded40b7892ec987c3d47fed5f8c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>$HOME</code> 是用户的主目录，<code>$PREFIX</code> 是 node 里配置的 <code>node_prefix</code> 。

</p>
</div>

<div class="translate-section" data-hash="b628b120ffd658b314276c352f8239cb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这些大多是由于历史原因。强烈建议读者将所依赖的模块放到 <code>node_modules</code> 文件夹里。
这样加载的更快也更可靠。

</p>
</div>

<div class="translate-section" data-hash="9182bb6b181da5cb3ab79cbb80f88cba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>访问主模块<span><a href="#all_70406" id="all_70406">#</a></span></h2>
</div>

<!-- type=misc -->

<div class="translate-section" data-hash="9df40e8c5bc30a61f705bcf010f9eec1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当 Node 直接运行一个文件时，<code>require.main</code> 就被设置为它的 <code>module</code> 。
也就是说你可以判断一个文件是否是直接被运行的

</p>
</div>

<div class="translate-section" data-hash="8a345a4f59e2f6f876af2a89f74cbc1f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>require<span class="sh_symbol">.</span>main <span class="sh_symbol">===</span> module</code></pre>
</div>

<div class="translate-section" data-hash="4f76d517729b54316d98374d4b6adcac"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>对于一个 <code>foo.js</code> 文件，如果通过 <code>node foo.js</code> 运行是 <code>true</code> ，但是通过 <code>require('./foo')</code> 运行却是 <code>false</code> 。

</p>
</div>

<div class="translate-section" data-hash="6726258b09adaddc91f270ea022a39e6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>因为 <code>module </code> 提供了一个 <code>filename </code> 属性（通常等于 <code>__filename</code>），
所以当前程序的入口点可以通过 <code>require.main.filename</code> 来获取。

</p>
</div>

<div class="translate-section" data-hash="85dcfcb1123db24879b0b683bb0bdcf4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>附录： 包管理技巧<span><a href="#all_70407" id="all_70407">#</a></span></h2>
</div>

<!-- type=misc -->

<div class="translate-section" data-hash="717d274473b7be3cc40473a680e0ec2c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Node 的 <code>require()</code> 函数的语义被设计的足够通用化，以支持各种常规目录结构。
包管理程序如 dpkg，rpm 和 npm 将不用修改就能够从 Node 模块构建本地包。

</p>
</div>

<div class="translate-section" data-hash="38c0b2263784a1bbf6c91ed7ab0a3be8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>接下来我们将给你一个可行的目录结构建议：

</p>
</div>

<div class="translate-section" data-hash="4768d94799f802caef6773fbadaa708b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>假设我们希望将一个包的指定版本放在 <code>/usr/lib/node/&lt;some-package&gt;/&lt;some-version&gt;</code> 目录中。

</p>
</div>

<div class="translate-section" data-hash="b251f96637619801e7d2dac261f5adc0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>包可以依赖于其他包。为了安装包 foo，可能需要安装包 bar 的一个指定版本。
包 bar 也可能有依赖关系，在某些情况下依赖关系可能发生冲突或者形成循环。

</p>
</div>

<div class="translate-section" data-hash="af8044b810dd4f80781a571a2c8cc7a7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>因为 Node 会查找它所加载的模块的真实路径（也就是说会解析符号链接），
然后按照上文描述的方式在 node_modules 目录中寻找依赖关系，这种情形跟以下体系结构非常相像：

</p>
</div>

<div class="translate-section" data-hash="70e8c89a4a3be0523c45dc383e0a87e2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>/usr/lib/node/foo/1.2.3/ - foo 包 1.2.3 版本的内容</li>
<li>/usr/lib/node/bar/4.3.2/ - foo 包所依赖的 bar 包的内容</li>
<li>/usr/lib/node/foo/1.2.3/node_modules/bar - 指向 /usr/lib/node/bar/4.3.2/ 的符号链接</li>
<li>/usr/lib/node/bar/4.3.2/node_modules/* - 指向 bar 包所依赖的包的符号链接</li>
</ul>
</div>

<div class="translate-section" data-hash="61b108ec9003d996e306c6789ca90772"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>因此即便存在循环依赖或依赖冲突，每个模块还是可以获得他所依赖的包的一个可用版本。

</p>
</div>

<div class="translate-section" data-hash="abac2f87ea10f1bc3de5a48b439c09c6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当 foo 包中的代码调用 require('bar')，将获得符号链接 <code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> 指向的版本。
然后，当 bar 包中的代码调用 <code>require('queue')</code>，将会获得符号链接 <code>/usr/lib/node/bar/4.3.2/node_modules/quux</code> 指向的版本。

</p>
</div>

<div class="translate-section" data-hash="c37fa0d31b242fe2bbdb4828798e7259"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>此外，为了进一步优化模块搜索过程，不要将包直接放在 <code>/usr/lib/node</code> 目录中，而是将它们放在 <code>/usr/lib/node_modules/&lt;name&gt;/&lt;version&gt;</code> 目录中。
这样在依赖的包找不到的情况下，就不会一直寻找 <code>/usr/node_modules</code> 目录或 <code>/node_modules</code> 目录了。

</p>
</div>

<div class="translate-section" data-hash="e1e5ab1bff01268c99b1adce6b2d2ddf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>为了使模块在 node 的 REPL 中可用，你可能需要将 <code>/usr/lib/node_modules</code> 目录加入到 <code>$NODE_PATH</code> 环境变量中。
由于在 node_modules 目录中搜索模块使用的是相对路径，基于调用 <code>require()</code> 的文件所在真实路径，因此包本身可以放在任何位置。

</p>
</div>
<div class="translate-section" data-hash="f8babbcd51921de1b64d3a10e0aae161"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>Addons插件<span><a href="#all_addons_1408" id="all_addons_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="a25a1a7193d916d4ebab62e4a7e6d224"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Addons插件就是动态连接库。它类似胶水，将c、c++和Node粘贴起来。它的API（目前来说）相当复杂，涉及到了几个类库的知识。

</p>
</div>

<div class="translate-section" data-hash="34127073de16a547c49a54f3c70e2285"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>V8 JavaScript引擎,一个 C++ 类库. 用于和JavaScript进行交互的接口。
创建对象, 调用函数等. 文档大部分在这里：
<code>v8.h</code> 头文件 (<code>deps/v8/include/v8.h</code>在Node源代码目录里), 也有可用的线上文档
<a href="http://izs.me/v8-docs/main.html">线上</a>.
（译者：想要学习c++的addons插件编写，必须先了解v8的接口）</li>
</ul>
</div>

<div class="translate-section" data-hash="07891818de27626a53c2e6edfa3b75b0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><a href="https://github.com/joyent/libuv">libuv</a>, C语言编写的事件循环类库。任何时候需要等待一个文件描述符变为可读状态，等待一个定时器，或者等待一个接受信号都需要使用libuv类库的接口。也就是说，如果你执行任何I/O操作，libuv类库将会被用到。</li>
</ul>
</div>

<div class="translate-section" data-hash="76f53262902ab3f221c845939b855667"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>内部 Node 类库.最重要的接口就是 <code>node::ObjectWrap</code> 类，这个类你应该是最可能想要派生的。</li>
</ul>
</div>

<div class="translate-section" data-hash="3fa6b1ff1213bcfec945b1eb85e1d7e6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>其他.请参阅 <code>deps/</code> 获得更多可用类库。</li>
</ul>
</div>

<div class="translate-section" data-hash="89a26f4240db67fbe079416f8330be08"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Node 静态编译了所有依赖到它的可执行文件中去了。当编译你的模块时，你不必担心无法连接上述那些类库。
（译者：换而言之，你在编译自己的addons插件时，只管在头部 #include &lt;uv.h&gt;，不必在binding.gyp中声明）

</p>
</div>

<div class="translate-section" data-hash="32af1ac10a0a70b04142c10fb0cc20a2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>下面所有的例子都可以下载到：
<a href="https://github.com/rvagg/node-addon-examples">下载</a> 
这或许能成为你学习和创作自己addon插件的起点。

</p>
</div>

<div class="translate-section" data-hash="b7154046c4d57a805eb5d402cd0842a6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Hello world（世界你好）<span><a href="#all_hello_world_1408" id="all_hello_world_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="5ffb966b38dc42cc0a4ebbf937c12980"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>作为开始，让我们用编写一个小的addon插件，这个addon插件的c++代码相当于下面的JavaScript代码。

</p>
</div>

<div class="translate-section" data-hash="1a8a401406e06461c69d9b2658fedfe3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>module<span class="sh_symbol">.</span>exports<span class="sh_symbol">.</span>hello <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span> <span class="sh_keyword">return</span> <span class="sh_string">'world'</span><span class="sh_symbol">;</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span></code></pre>
</div>

<div class="translate-section" data-hash="b5f292700b7ff2e241f9a2e588584ac1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>首先我们创建一个 <code>hello.cc</code>文件:

</p>
</div>

<div class="translate-section" data-hash="9723cf7ef79aee1c9bbaeeb154285759"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>hello<span class="sh_symbol">,</span> init<span class="sh_symbol">)</span><span class="sh_comment">//译者：将addon插件名hello和上述init函数关联输出</span></code></pre>
</div>

<div class="translate-section" data-hash="0c78fb4af2fdc16141b887b37a6d1df7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意所有Node的addons插件都必须输出一个初始化函数：

</p>
</div>

<div class="translate-section" data-hash="478921479f1a877451995f9fa0192a2b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>void <span class="sh_function">Initialize</span> <span class="sh_symbol">(</span>Handle<span class="sh_symbol">&lt;</span><span class="sh_predef_func">Object</span><span class="sh_symbol">&gt;</span> exports<span class="sh_symbol">);</span>
<span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>module_name<span class="sh_symbol">,</span> Initialize<span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="6e450b17869bbf815b095656ef819c77"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在<code>NODE_MODULE</code>之后没有分号，因为它不是一个函数（请参阅<code>node.h</code>）

</p>
</div>

<div class="translate-section" data-hash="20de22397bcc425f466b63c00af5a943"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个<code>module_name</code>（模块名）需要和最后编译生成的2进制文件名（减去.node后缀名）相同。

</p>
</div>

<div class="translate-section" data-hash="52cce42c62beb23c75889ed6bd6ac78a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>源代码需要生成在<code>hello.node</code>，这个2进制addon插件中。
需要做到这些，我们要创建一个名为<code>binding.gyp</code>的文件，它描述了创建这个模块的配置，并且它的格式是类似JSON的。
文件将被命令：<a href="https://github.com/TooTallNate/node-gyp">node-gyp</a> 编译。

</p>
</div>

<div class="translate-section" data-hash="fb9837ed9d494b35881bb5743865002f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span>
  <span class="sh_string">"targets"</span><span class="sh_symbol">:</span> <span class="sh_symbol">[</span>
    <span class="sh_cbracket">{</span>
      <span class="sh_string">"target_name"</span><span class="sh_symbol">:</span> <span class="sh_string">"hello"</span><span class="sh_symbol">,</span> <span class="sh_comment">//译者：addon插件名，注意这里的名字必需和上面NODE_MODULE中的一致</span>
      <span class="sh_string">"sources"</span><span class="sh_symbol">:</span> <span class="sh_symbol">[</span> <span class="sh_string">"hello.cc"</span> <span class="sh_symbol">]</span>  <span class="sh_comment">//译者：这是需要编译的源文件</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="5d8837eea0e7886ef35a93c402637826"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>下一步是根据当前的操作系统平台，利用<code>node-gyp configure</code>命令，生成合适的项目文件。

</p>
</div>

<div class="translate-section" data-hash="83cbd64cfb6cac4cab511c6f55e5fc91"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>现在你会有一个<code>Makefile</code> (在Unix平台) 或者一个 <code>vcxproj</code> file
(在Windows上)，它们都在<code>build/</code> 文件夹中. 
然后执行命令 <code>node-gyp build</code>进行编译。
（译者：当然你可以执行 <code>node-gyp rebuild</code>一步搞定）

</p>
</div>

<div class="translate-section" data-hash="ea8b782a98055da2ee35f5298b844dc9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>现在你已经有了编译好的 <code>.node</code> 文件了，这个编译好的绑定文件会在目录 <code>build/Release/</code>下

</p>
</div>

<div class="translate-section" data-hash="508e85e5b957235494f92b68eacc1ee2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>现在你可以使用这个2进制addon插件在Node项目<code>hello.js</code> 中了，通过指明<code>require</code>这个刚刚创建的<code>hello.node</code>模块使用它。

</p>
</div>

<div class="translate-section" data-hash="1a7903c7ce4040781950c2d9c92554f1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">.</span><span class="sh_function">hello</span><span class="sh_symbol">());</span> <span class="sh_comment">// 'world'</span></code></pre>
</div>

<div class="translate-section" data-hash="8b4296da4a587764c08b508a5f1e3a89"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请阅读下面的内容获得更多详情或者访问<a href="https://github.com/arturadib/node-qt">https://github.com/arturadib/node-qt</a>获取一个生产环境的例子。

</p>
</div>

<div class="translate-section" data-hash="56a8439b88a27412bde2b0b4544ed977"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Addon patterns（插件方式）<span><a href="#all_addon_patterns_1408" id="all_addon_patterns_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="e7727a77fbe818e9ff83efc925135e56"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>下面是一些帮助你开始编写addon插件的方式。参考这个在线的<a href="http://izs.me/v8-docs/main.html">v8 手册</a>用来帮助你调用各种v8接口， 然后是v8的 <a href="http://code.google.com/apis/v8/embed.html">嵌入式开发向导</a> ，解释几个概念，如 handles, scopes,function templates等。


</p>
</div>

<div class="translate-section" data-hash="47fb3fdb76e4e768fcf059a3cc9e0ee0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>为了能跑起来这些例子，你必须用 <code>node-gyp</code> 来编译他们。
创建一个<code>binding.gyp</code> 文件：

</p>
</div>

<div class="translate-section" data-hash="629b6cfc557bffcebb8295d4e1ab0eeb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span>
  <span class="sh_string">"targets"</span><span class="sh_symbol">:</span> <span class="sh_symbol">[</span>
    <span class="sh_cbracket">{</span>
      <span class="sh_string">"target_name"</span><span class="sh_symbol">:</span> <span class="sh_string">"addon"</span><span class="sh_symbol">,</span>
      <span class="sh_string">"sources"</span><span class="sh_symbol">:</span> <span class="sh_symbol">[</span> <span class="sh_string">"addon.cc"</span> <span class="sh_symbol">]</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="bbe1421e10ed8878f88b82e40136bd04"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>事实上可以有多个  <code>.cc</code> 文件, 就简单的在 <code>sources</code>  数组里加上即可，例子：

</p>
</div>

<div class="translate-section" data-hash="b4aa363bdb3af220622b3ee75319bc97"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_string">"sources"</span><span class="sh_symbol">:</span> <span class="sh_symbol">[</span><span class="sh_string">"addon.cc"</span><span class="sh_symbol">,</span> <span class="sh_string">"myexample.cc"</span><span class="sh_symbol">]</span></code></pre>
</div>

<div class="translate-section" data-hash="df09c6ebf2068c4c111aa37954b945ce"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>现在你有了你的<code>binding.gyp</code>文件了，你可要开始执行configure 和 build 命令构建你的addon插件了

</p>
</div>

<div class="translate-section" data-hash="c2eda95b20455abdefba1e6fe62cab54"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>$ node<span class="sh_symbol">-</span>gyp configure build</code></pre>
</div>

<div class="translate-section" data-hash="7e0d7974e0c1edb2e5a40973c703bf6f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Function arguments（函数参数）<span><a href="#all_function_arguments_1408" id="all_function_arguments_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="2ca202efec5d0709d1130690f7ee4a25"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>下面的部分说明了如何从JavaScript的函数调用获得参数然后返回一个值。这是主要的内容并且仅需要源代码<code>addon.cc</code>。

</p>
</div>

<div class="translate-section" data-hash="93b500fc16bb2d26d02ed2dcc65c7371"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> Init<span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="683f73da086ef78c6f1e60a36aedef1b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>你可以使用下面的JavaScript代码片段来测试它

</p>
</div>

<div class="translate-section" data-hash="e575de82dae957e0c26bd24f20aaee53"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span> <span class="sh_string">'This should be eight:'</span><span class="sh_symbol">,</span> addon<span class="sh_symbol">.</span><span class="sh_function">add</span><span class="sh_symbol">(</span><span class="sh_number">3</span><span class="sh_symbol">,</span><span class="sh_number">5</span><span class="sh_symbol">)</span> <span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="d80972a865fb829c3b9df02991ac331f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Callbacks（回调）<span><a href="#all_callbacks_1408" id="all_callbacks_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c14ef5c64d645a69f38e105b314b7595"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>你可以传递JavaScript functions 到一个C++ function 并且执行他们，这里是 <code>addon.cc</code>文件:

</p>
</div>

<div class="translate-section" data-hash="93b500fc16bb2d26d02ed2dcc65c7371"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> Init<span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="eaaaa42d7d413a3a6349cb27c889b721"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意这个例子对<code>Init()</code>使用了两个参数，将完整的 <code>module</code> 对象作为第二个参数传入。这允许addon插件完全的重写 <code>exports</code>，这样就可以用一个函数代替多个函数作为<code>exports</code>的属性了。

</p>
</div>

<div class="translate-section" data-hash="b5cb8a8b148d5d45f44ee4258a386221"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>你可以使用下面的JavaScript代码片段来测试它

</p>
</div>

<div class="translate-section" data-hash="8d7b50d1700cdcf81c67c499b6becb02"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_function">addon</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">(</span>msg<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>msg<span class="sh_symbol">);</span> <span class="sh_comment">// 'hello world'</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="66262b4f8b045bd62c536b19693b8191"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Object factory（对象工厂）<span><a href="#all_object_factory_1408" id="all_object_factory_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="b3869b4e15e2c7db8d1baae3632c69d4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在这个<code>addon.cc</code>文件里用一个c++函数，你可以创建并且返回一个新的对象，这个新的对象拥有一个msg的属性，它的值是通过createObject()方法传入的

</p>
</div>

<div class="translate-section" data-hash="93b500fc16bb2d26d02ed2dcc65c7371"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> Init<span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="b5d6a97dff8729fa31fd8c0955f66eeb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在js中测试如下:

</p>
</div>

<div class="translate-section" data-hash="ad61a568cc7f57aa408acc8cfed6209b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> obj1 <span class="sh_symbol">=</span> <span class="sh_function">addon</span><span class="sh_symbol">(</span><span class="sh_string">'hello'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> obj2 <span class="sh_symbol">=</span> <span class="sh_function">addon</span><span class="sh_symbol">(</span><span class="sh_string">'world'</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>obj1<span class="sh_symbol">.</span>msg<span class="sh_symbol">+</span><span class="sh_string">' '</span><span class="sh_symbol">+</span>obj2<span class="sh_symbol">.</span>msg<span class="sh_symbol">);</span> <span class="sh_comment">// 'hello world'</span></code></pre>
</div>

<div class="translate-section" data-hash="c2ec78362d8977bb70214aa9ba23123a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Function factory（函数工厂）<span><a href="#all_function_factory_1408" id="all_function_factory_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d7684b66a295e8397e9423672b424b87"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这次将展示如何创建并返回一个JavaScript function函数，这个函数其实是通过c++包装的。

</p>
</div>

<div class="translate-section" data-hash="93b500fc16bb2d26d02ed2dcc65c7371"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> Init<span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="aaa662c1681cd0c77fe6c381d01ebb8f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>测试它:

</p>
</div>

<div class="translate-section" data-hash="ffa43f8e5d26e3247c4542bbcf73789d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> fn <span class="sh_symbol">=</span> <span class="sh_function">addon</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_function">fn</span><span class="sh_symbol">());</span> <span class="sh_comment">// 'hello world'</span></code></pre>
</div>

<div class="translate-section" data-hash="9089915ff03d1475ab234f56f429e9f3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Wrapping C++ objects（包装c++对象）<span><a href="#all_wrapping_c_objects_c_1408" id="all_wrapping_c_objects_c_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="1e6f3cafeb820058cbc13d77de03fbd0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这里将创建一个被c++包裹的对象或类<code>MyObject</code>，它是可以在JavaScript中通过<code>new</code>操作符实例化的。
首先我们要准备主要的模块文件<code>addon.cc</code>:

</p>
</div>

<div class="translate-section" data-hash="cccdd90b74c9b35a6b594b8c25d98a84"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> InitAll<span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="1bb7b612c5b92c8b85592a69f45670b5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>然后在<code>myobject.h</code>文件中创建你的包装类，它继承自 <code>node::ObjectWrap</code>:

</p>
</div>

<div class="translate-section" data-hash="a1797f9e1973f5a70e55f1f4a6ee1251"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>#endif</code></pre>
</div>

<div class="translate-section" data-hash="10c1c386661fc1b3f94d7f5996e4a522"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在文件 <code>myobject.cc</code> 可以实施各种你想要暴露给js的方法。 
这里我们暴露方法名为 <code>plusOne</code>给就是，它表示将构造函数的属性加1.

</p>
</div>

<div class="translate-section" data-hash="be1f48d998617486c18f8c7fcb7e0024"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>  <span class="sh_keyword">return</span> scope<span class="sh_symbol">.</span><span class="sh_function">Close</span><span class="sh_symbol">(</span><span class="sh_predef_func">Number</span><span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">-&gt;</span>counter_<span class="sh_symbol">));</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="4548e76b2876bd28c840e8610a4581db"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>测试它:

</p>
</div>

<div class="translate-section" data-hash="c4a335665457e130c24be6cb58cfa061"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> obj <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> addon<span class="sh_symbol">.</span><span class="sh_function">MyObject</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span> obj<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">()</span> <span class="sh_symbol">);</span> <span class="sh_comment">// 11</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span> obj<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">()</span> <span class="sh_symbol">);</span> <span class="sh_comment">// 12</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span> obj<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">()</span> <span class="sh_symbol">);</span> <span class="sh_comment">// 13</span></code></pre>
</div>

<div class="translate-section" data-hash="532e1c6b20cea2ba401f61810445cc7f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Factory of wrapped objects（工厂包装对象）<span><a href="#all_factory_of_wrapped_objects_1408" id="all_factory_of_wrapped_objects_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="aad9ba64b2248fdde122c0ab11489921"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是非常有用的，当你想创建原生的JavaScript对象时，又不想明确的使用JavaScript的<code>new</code>操作符。

</p>
</div>

<div class="translate-section" data-hash="b9e45584470172042fb40a0597264d34"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> obj <span class="sh_symbol">=</span> addon<span class="sh_symbol">.</span><span class="sh_function">createObject</span><span class="sh_symbol">();</span>
<span class="sh_comment">// 用上面的方式代替下面的:</span>
<span class="sh_comment">// var obj = new addon.Object();</span></code></pre>
</div>

<div class="translate-section" data-hash="22602a0a5d3c720d3dea86f4090ed683"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>让我们注册在 <code>addon.cc</code> 文件中注册<code>createObject</code>方法:

</p>
</div>

<div class="translate-section" data-hash="cccdd90b74c9b35a6b594b8c25d98a84"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> InitAll<span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="0224df31a15dee5b8c06a9a968c8d85f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在<code>myobject.h</code>文件中，我们现在介绍静态方法NewInstance<code>，它能够实例化对象（举个例子，它的工作就像是 在JavaScript中的</code>new` 操作符。）

</p>
</div>

<div class="translate-section" data-hash="a1797f9e1973f5a70e55f1f4a6ee1251"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>#endif</code></pre>
</div>

<div class="translate-section" data-hash="4bf05a2c549da5d2c486aec4aa365113"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这里的处理方式和上面的 <code>myobject.cc</code>很像:

</p>
</div>

<div class="translate-section" data-hash="be1f48d998617486c18f8c7fcb7e0024"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>  <span class="sh_keyword">return</span> scope<span class="sh_symbol">.</span><span class="sh_function">Close</span><span class="sh_symbol">(</span><span class="sh_predef_func">Number</span><span class="sh_symbol">::</span><span class="sh_function">New</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">-&gt;</span>counter_<span class="sh_symbol">));</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="4548e76b2876bd28c840e8610a4581db"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>测试它:

</p>
</div>

<div class="translate-section" data-hash="e37777aa0361f99c5f2584a2f2d71393"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> obj2 <span class="sh_symbol">=</span> <span class="sh_function">createObject</span><span class="sh_symbol">(</span><span class="sh_number">20</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span> obj2<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">()</span> <span class="sh_symbol">);</span> <span class="sh_comment">// 21</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span> obj2<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">()</span> <span class="sh_symbol">);</span> <span class="sh_comment">// 22</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span> obj2<span class="sh_symbol">.</span><span class="sh_function">plusOne</span><span class="sh_symbol">()</span> <span class="sh_symbol">);</span> <span class="sh_comment">// 23</span></code></pre>
</div>

<div class="translate-section" data-hash="ffe6aed8e48afb4e1a7d2e347c06172a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Passing wrapped objects around（传递包装的对象）<span><a href="#all_passing_wrapped_objects_around_1408" id="all_passing_wrapped_objects_around_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="9dbe81d8ee897d6215c9e8cfcd68b350"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>除了包装和返回c++对象以外，你可以传递他们并且通过Node的<code>node::ObjectWrap::Unwrap</code>帮助函数解包装他们。
在下面的<code>addon.cc</code> 文件中，我们介绍了一个函数<code>add()</code>，它能够获取2个<code>MyObject</code>对象。

</p>
</div>

<div class="translate-section" data-hash="cccdd90b74c9b35a6b594b8c25d98a84"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_function">NODE_MODULE</span><span class="sh_symbol">(</span>addon<span class="sh_symbol">,</span> InitAll<span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="890cca6007664d3694346b9c58ab3a53"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>为了使事情变得有趣，我们在 <code>myobject.h</code> 采用一个公共的方法，所以我们能够在unwrapping解包装对象之后使用私有成员的值。

</p>
</div>

<div class="translate-section" data-hash="a1797f9e1973f5a70e55f1f4a6ee1251"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>#endif</code></pre>
</div>

<div class="translate-section" data-hash="518b6d052ae2418a05dc500bae55142c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>myobject.cc</code>文件的处理方式和前面类似

</p>
</div>

<div class="translate-section" data-hash="e5aafe3ca98b219a461242fbecd05e68"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>  <span class="sh_keyword">return</span> scope<span class="sh_symbol">.</span><span class="sh_function">Close</span><span class="sh_symbol">(</span>instance<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="4548e76b2876bd28c840e8610a4581db"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>测试它:

</p>
</div>

<div class="translate-section" data-hash="723bcf6c0489ab2f8e0e4f3fd184bb19"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> obj1 <span class="sh_symbol">=</span> addon<span class="sh_symbol">.</span><span class="sh_function">createObject</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> obj2 <span class="sh_symbol">=</span> addon<span class="sh_symbol">.</span><span class="sh_function">createObject</span><span class="sh_symbol">(</span><span class="sh_number">20</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> result <span class="sh_symbol">=</span> addon<span class="sh_symbol">.</span><span class="sh_function">add</span><span class="sh_symbol">(</span>obj1<span class="sh_symbol">,</span> obj2<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="b5bae7ce4ba0e54e2c9b6f7862af40e9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>result<span class="sh_symbol">);</span> <span class="sh_comment">// 30</span></code></pre>
</div>
<div class="translate-section" data-hash="94d69859cace289e8bffcb76c6af6373"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>process<span><a href="#all_process_2817" id="all_process_2817">#</a></span></h1>
</div>

<!-- type=global -->

<div class="translate-section" data-hash="e0818d3e407b69c06f7ddd9409c3bb2c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>process</code>对象是一个全局对象，可以在任何地方访问到它。
它是<a href="http://nodeapi.ucdok.com/api/events.html#events_class_events_eventemitter">EventEmitter</a>的一个实例。

</p>
</div>

<div class="translate-section" data-hash="70e872f0dfbb95405af9e1391641467f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Exit Codes<span><a href="#all_exit_codes_1408" id="all_exit_codes_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="d38ec1e6c07234dd8e2276145d65c4ed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Node 执行程序正常情况下会返回 0，这也意味着，包括所有“异步”在内的操作都已结束。（笔者注：linux terminal 下使用 echo $? 查看，win cmd 下使用 echo %ERRORLEVEL% 查看）除此之外的其他返回状态如下：

</p>
</div>

<div class="translate-section" data-hash="f9474b7286d4dba74ce82427e02b557a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>1</code> <strong>未捕获的致命异常(Uncaught Fatal Exception)</strong> - There was an uncaught exception,
and it was not handled by a domain or an <code>uncaughtException</code> event
handler.</li>
<li><code>2</code> - 未使用(Unused) (reserved by Bash for builtin misuse)</li>
<li><code>3</code> <strong>解析错误(Internal JavaScript Parse Error)</strong> - The JavaScript source code
internal in Node's bootstrapping process caused a parse error.  This
is extremely rare, and generally can only happen during development
of Node itself.</li>
<li><code>4</code> <strong>评估失败(Internal JavaScript Evaluation Failure)</strong> - The JavaScript
source code internal in Node's bootstrapping process failed to
return a function value when evaluated.  This is extremely rare, and
generally can only happen during development of Node itself.</li>
<li><code>5</code> <strong>致命错误(Fatal Error)</strong> - There was a fatal unrecoverable error in V8.
Typically a message will be printed to stderr with the prefix <code>FATAL
ERROR</code>.</li>
<li><code>6</code> <strong>未正确的异常处理(Non-function Internal Exception Handler)</strong> - There was an
uncaught exception, but the internal fatal exception handler
function was somehow set to a non-function, and could not be called.</li>
<li><code>7</code> <strong>异常处理函数运行时失败(Internal Exception Handler Run-Time Failure)</strong> - There was an
uncaught exception, and the internal fatal exception handler
function itself threw an error while attempting to handle it.  This
can happen, for example, if a <code>process.on('uncaughtException')</code> or
<code>domain.on('error')</code> handler throws an error.</li>
<li><code>8</code> - 未使用(Unused).  In previous versions of Node, exit code 8 sometimes
indicated an uncaught exception.</li>
<li><code>9</code> - <strong>无效的参数(Invalid Argument)</strong> - Either an unknown option was specified,
or an option requiring a value was provided without a value.</li>
<li><code>10</code> <strong>运行时失败(Internal JavaScript Run-Time Failure)</strong> - The JavaScript
source code internal in Node's bootstrapping process threw an error
when the bootstrapping function was called.  This is extremely rare,
and generally can only happen during development of Node itself.</li>
<li><code>12</code> <strong>无效的调试参数(Invalid Debug Argument)</strong> - The <code>--debug</code> and/or <code>--debug-brk</code>
options were set, but an invalid port number was chosen.</li>
<li><code>&gt;128</code> <strong>信号退出(Signal Exits)</strong> - If Node receives a fatal signal such as
<code>SIGKILL</code> or <code>SIGHUP</code>, then its exit code will be <code>128</code> plus the
value of the signal code.  This is a standard Unix practice, since
exit codes are defined to be 7-bit integers, and signal exits set
the high-order bit, and then contain the value of the signal code.</li>
</ul>
</div>

<div class="translate-section" data-hash="3a2174949569f8fb7419aaffd4129ba1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>事件: 'exit'<span><a href="#all_exit_7040" id="all_exit_7040">#</a></span></h2>
</div>

<div class="translate-section" data-hash="2c834564a64e8ad210ce0e6f3c737a1f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当进程将要退出时触发。这是一个在固定时间检查模块状态（如单元测试）的好时机。需要注意的是 'exit' 的回调结束后，主事件循环将不再运行，所以计时器也会失效。

</p>
</div>

<div class="translate-section" data-hash="62c60612c4cade1c920c3b230bfdd399"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>监听 <code>exit</code> 事件的例子：

</p>
</div>

<div class="translate-section" data-hash="e3e807dcd3c68792d6739c0651607f14"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 设置一个延迟执行</span>
  <span class="sh_function">setTimeout</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'主事件循环已停止，所以不会执行'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'退出前执行'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="12f5e42dd2b667cfb55187d85cf34295"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>事件: 'uncaughtException'（未捕获错误）<span><a href="#all_uncaughtexception_1408" id="all_uncaughtexception_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="8200167db6ae96e48bde211ae4d60368"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当一个异常冒泡回归到事件循环中就会触发这个事件，如果建立了一个监听器来监听这个异常，默认的行为（打印堆栈跟踪信息并退出）就不会发生。

</p>
</div>

<div class="translate-section" data-hash="ff8f8be2d2b4b939258db86024af8234"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>监听 <code>uncaughtException</code> 示例:

</p>
</div>

<div class="translate-section" data-hash="25128e1f2b23b2e7d5ff7bca4999a8ce"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 故意制造一个异常，而且不catch捕获它.</span>
<span class="sh_function">nonexistentFunc</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'This will not run.'</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="aeed885cdfb8794f511a96c5c3598ab4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意，<code>uncaughtException</code>未捕获异常是一个非常粗略的异常处理。

</p>
</div>

<div class="translate-section" data-hash="ad3f191ecceec84efecc4fe387b37faf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>尽量不要使用它，使用 <a href="http://nodeapi.ucdok.com/api/domain.html">domains</a> 来代替它，如果你已经使用了，请在不处理这个异常之后重启你的应用。

</p>
</div>

<div class="translate-section" data-hash="146290fe83bc56b411de59dd27b3c146"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请 <em>不要</em> 象使用node.js的<code>有错误回复执行</code>这样使用.一个未处理异常意味着你的应用和你的扩展Node.js自身是有未知状态的。盲目的恢复意味着<em>任何事情</em>都可能发生。

</p>
</div>

<div class="translate-section" data-hash="6903fa243c9dde59d22732c4d64de0e1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>你在升级的系统时拉掉了电源线，然后恢复了。可能10次里有9次每一偶问题，但是第10次，你的系统就会崩溃。

</p>
</div>

<div class="translate-section" data-hash="8c90b15c2f107a406042ac379bf45d3e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>你已经被警告。

</p>
</div>

<div class="translate-section" data-hash="fd6d0b0c8acd08133e86ca244c46afdc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Signal Events<span><a href="#all_signal_events_1408" id="all_signal_events_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b347d2a19501913d9619d0235cde1122"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<!--type=event-->
<!--name=SIGINT, SIGUSR1, etc.-->

</div>

<div class="translate-section" data-hash="b43803249f434c358a46f4a9606ba55e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当进程接收到信号时触发。信号列表详见 POSIX 标准的 sigaction（2）如 SIGINT、SIGUSR1 等。

</p>
</div>

<div class="translate-section" data-hash="7f135a18651f35a74a0020d4f58e3e20"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>监听 <code>SIGINT</code> 信号的示例：

</p>
</div>

<div class="translate-section" data-hash="faddb70a97f80a39a8eafc5b2ffe734d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 设置 'SIGINT' 信号触发事件</span>
process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'SIGINT'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'收到 SIGINT 信号。  退出请使用 Ctrl + D '</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="4764e68c102b94c0487192909793c55d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在大多数终端下，一个发送 <code>SIGINT</code> 信号的简单方法是按下 <code>ctrl + c</code> 。

</p>
</div>

<div class="translate-section" data-hash="e98ce873943ad688cacbdb69eb1e70de"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.stdout<span><a href="#all_process_stdout_1408" id="all_process_stdout_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="e2fc4658e3e1634eecc5bf7910b96ae6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个指向<code>标准输出流(stdout)</code>的 <code>可写的流(Writable Stream)</code>。

</p>
</div>

<div class="translate-section" data-hash="f155e7fa42e54d987deed4141bf61697"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>举例: <code>console.log</code> 的实现

</p>
</div>

<div class="translate-section" data-hash="5fbcf23111430ff12694138e032bda93"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span>log <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>d<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>d <span class="sh_symbol">+</span> <span class="sh_string">'</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span> </code></pre>
</div>

<div class="translate-section" data-hash="60774d6a099a57f78c6810fbf0a57b93"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>process.stderr 和 process.stdout 不像 Node 中其他的流(Streams) 那样，他们通常是阻塞式的写入。当其引用指向 <code>普通文件</code> 或者 <code>TTY文件描述符</code> 时他们就是阻塞的（注：TTY 可以理解为终端的一种，可联想 PuTTY，详见<a href="http://baike.baidu.com/view/749979.htm">百科</a>）。当他们引用指向管道(pipes)时，他们就同其他的流(Streams)一样是非阻塞的。

</p>
</div>

<div class="translate-section" data-hash="aef4f749d5416cdff68f4e8c74049040"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>要检查 Node 是否正在运行一个 TTY上下文 中（注：linux 中没有运行在 tty 下的进程是 <code>守护进程</code> ），可以用使用 process.stderr、process.stdout 或 process.stdin 的 isTTY 属性：

</p>
</div>

<div class="translate-section" data-hash="db23ab07640a481c63f26c85cb57e3be"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>$ node <span class="sh_symbol">-</span>p <span class="sh_string">"Boolean(process.stdout.isTTY)"</span>
<span class="sh_keyword">true</span>
$ node <span class="sh_symbol">-</span>p <span class="sh_string">"Boolean(process.stdout.isTTY)"</span> <span class="sh_symbol">|</span> cat
<span class="sh_keyword">false</span> </code></pre>
</div>

<div class="translate-section" data-hash="bca314da663b7462728248c60df5d6c2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>更多信息，请查看 <a href="http://nodeapi.ucdok.com/api/tty.html#tty_tty">tty 文档</a>。

</p>
</div>

<div class="translate-section" data-hash="a3a89de3dc809be43c7c6dbbe50c3958"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.stderr<span><a href="#all_process_stderr_1408" id="all_process_stderr_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="8a244250495205d9bcefacf068117c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个指向标准错误流(stderr)的 可写的流(Writable Stream)。

</p>
</div>

<div class="translate-section" data-hash="60774d6a099a57f78c6810fbf0a57b93"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>process.stderr 和 process.stdout 不像 Node 中其他的流(Streams) 那样，他们通常是阻塞式的写入。当其引用指向 <code>普通文件</code> 或者 <code>TTY文件描述符</code> 时他们就是阻塞的（注：TTY 可以理解为终端的一种，可联想 PuTTY，详见<a href="http://baike.baidu.com/view/749979.htm">百科</a>）。当他们引用指向管道(pipes)时，他们就同其他的流(Streams)一样是非阻塞的。

</p>
</div>

<div class="translate-section" data-hash="ef9914914100afd9299b3966077dba39"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.stdin<span><a href="#all_process_stdin_1408" id="all_process_stdin_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="15b2f5188914041d1248b8521e72fd97"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个指向 标准输入流(stdin) 的可读流(Readable Stream)。标准输入流默认是暂停 (pause) 的，所以必须要调用 process.stdin.resume() 来恢复 (resume) 接收。

</p>
</div>

<div class="translate-section" data-hash="975792ea6558ca62fa0acb011219cf24"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>打开标准输入流，并监听两个事件的示例：

</p>
</div>

<div class="translate-section" data-hash="d2487ea0d2034dcf01dde5e0b24e99a9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>


<span class="sh_comment">// gets 函数的简单实现</span>
<span class="sh_keyword">function</span> <span class="sh_function">gets</span><span class="sh_symbol">(</span>cb<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
  process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">resume</span><span class="sh_symbol">();</span>
  process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>

  process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
     process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">pause</span><span class="sh_symbol">();</span>
     <span class="sh_function">cb</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_function">gets</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">(</span>reuslt<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"["</span><span class="sh_symbol">+</span>reuslt<span class="sh_symbol">+</span><span class="sh_string">"]"</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="1264aa02595beb6bcffe7fa51e32e3b1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.argv<span><a href="#all_process_argv_1408" id="all_process_argv_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="cfb5e4eb1015cdce076388d6379f8ab3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个包含命令行参数的数组。第一个元素会是 'node'， 第二个元素将是 .Js 文件的名称。接下来的元素依次是命令行传入的参数。

</p>
</div>

<div class="translate-section" data-hash="48523c6f6259fc27d0652dc51a9d7fa4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 打印 process.argv</span>
process<span class="sh_symbol">.</span>argv<span class="sh_symbol">.</span><span class="sh_function">forEach</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">(</span>val<span class="sh_symbol">,</span> index<span class="sh_symbol">,</span> array<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>index <span class="sh_symbol">+</span> <span class="sh_string">': '</span> <span class="sh_symbol">+</span> val<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="9c7011b361244c871a1c0e3b4fd56a19"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>输出将会是：

</p>
</div>

<div class="translate-section" data-hash="ecdd9f9d50c03f2ee133b922b5ee6b5e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>$ node process<span class="sh_number">-2</span><span class="sh_symbol">.</span>js one two<span class="sh_symbol">=</span>three four
<span class="sh_number">0</span><span class="sh_symbol">:</span> node
<span class="sh_number">1</span><span class="sh_symbol">:</span> <span class="sh_regexp">/Users/m</span><span class="sh_normal">jr</span><span class="sh_symbol">/</span><span class="sh_normal">work</span><span class="sh_symbol">/</span><span class="sh_normal">node</span><span class="sh_symbol">/</span>process<span class="sh_number">-2</span><span class="sh_symbol">.</span>js
<span class="sh_number">2</span><span class="sh_symbol">:</span> one
<span class="sh_number">3</span><span class="sh_symbol">:</span> two<span class="sh_symbol">=</span>three
<span class="sh_number">4</span><span class="sh_symbol">:</span> four </code></pre>
</div>

<div class="translate-section" data-hash="72b8a528fc434f77e08347ed613ab14b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.execPath<span><a href="#all_process_execpath_1408" id="all_process_execpath_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="e4d65142930c3055336f1a744e081875"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>开启当前进程的这个可执行文件的绝对路径。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="c2cc8c781a8af1a04f7ebfa09f2111f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_regexp">/usr/</span><span class="sh_normal">local</span><span class="sh_symbol">/</span><span class="sh_normal">bin</span><span class="sh_symbol">/</span>node </code></pre>
</div>

<div class="translate-section" data-hash="aaf582dfe4ae55f3369e7d7a3422ebdd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.execArgv<span><a href="#all_process_execargv_1408" id="all_process_execargv_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="1533a9bd0ae200b0dbbd9bd44c158b30"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>与 <code>process.argv</code> 类似，不过是用于保存 node特殊(node-specific) 的命令行选项（参数）。这些特殊的选项不会出现在 <code>process.argv</code> 中，而且 process.execArgv 不会保存 <code>process.argv</code> 中保存的参数（如 0:node 1:文件名 2.3.4.参数 等），
所有文件名之后的参数都会被忽视。这些选项可以用于派生与与父进程相同执行环境的子进程。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="e0c0006a8e087d6e0812ee6cc09fbd53"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>$ node <span class="sh_symbol">--</span>harmony script<span class="sh_symbol">.</span>js <span class="sh_symbol">--</span>version </code></pre>
</div>

<div class="translate-section" data-hash="29252380c96078533a865abee3523ba6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>process.execArgv 中的特殊选项:

</p>
</div>

<div class="translate-section" data-hash="83933c0a9bd3e8d7012a3097d179e398"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_symbol">[</span><span class="sh_string">'--harmony'</span><span class="sh_symbol">]</span> </code></pre>
</div>

<div class="translate-section" data-hash="f5d047d620e4cceec788468d64263af6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>process.argv 接收到的参数:

</p>
</div>

<div class="translate-section" data-hash="8ad4161ad310b93d945528989c11bc2f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_symbol">[</span><span class="sh_string">'/usr/local/bin/node'</span><span class="sh_symbol">,</span> <span class="sh_string">'script.js'</span><span class="sh_symbol">,</span> <span class="sh_string">'--version'</span><span class="sh_symbol">]</span> </code></pre>
</div>

<div class="translate-section" data-hash="c51dc73c2e060a68a76554387d28305c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.abort()<span><a href="#all_process_abort_1408" id="all_process_abort_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="a76a170274a50a06eeec6d9d13110687"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这将导致 Node 触发一个abort事件，这会导致Node退出并且创建一个核心文件。

</p>
</div>

<div class="translate-section" data-hash="42e63a4263c92487d28eb9fdb1282e54"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.chdir(directory)<span><a href="#all_process_chdir_directory_1408" id="all_process_chdir_directory_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="23f0828f1b5076b74b3eee7bd0ae99c1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>改变进程的当前进程的工作目录，若操作失败则抛出异常。 

</p>
</div>

<div class="translate-section" data-hash="28f37bbe72719492a030730d4bae4e72"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'当前目录：'</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span><span class="sh_function">cwd</span><span class="sh_symbol">());</span>
<span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
  process<span class="sh_symbol">.</span><span class="sh_function">chdir</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp'</span><span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'新目录：'</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span><span class="sh_function">cwd</span><span class="sh_symbol">());</span>
<span class="sh_cbracket">}</span>
<span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'chdir: '</span> <span class="sh_symbol">+</span> err<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="520e2e7f729c955b0eb8cf26b4e9a6ff"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.cwd()<span><a href="#all_process_cwd_1408" id="all_process_cwd_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="fde9b04c7e4ee25577679f187243ce79"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回进程当前的工作目录。 

</p>
</div>

<div class="translate-section" data-hash="4fce92a340960298d58533fc4041813c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'当前目录：'</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span><span class="sh_function">cwd</span><span class="sh_symbol">());</span></code></pre>
</div>

<div class="translate-section" data-hash="0869dfbceea296071f74607984f21afb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.env<span><a href="#all_process_env_1408" id="all_process_env_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="932151fa0e50cc9fc7925e10ed595fb2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个包括用户环境的对象。详细参见 environ(7)。

</p>
</div>

<div class="translate-section" data-hash="47cb06e5e41f31d80f1344fcc48a24c3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.exit([code])<span><a href="#all_process_exit_code_1408" id="all_process_exit_code_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="7854058b0e41a83562fc37baa00ebc69"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>终止当前进程并返回给定的 <code>code</code>。如果省略了 <code>code</code>，退出是会默认返回成功的状态码('success' code) 也就是 <code>0</code>。

</p>
</div>

<div class="translate-section" data-hash="ca3a0b514bfb12e25578c4b728b597a9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>退出并返回失败的状态 ('failure' code):

</p>
</div>

<div class="translate-section" data-hash="bcd088fd53778fe257d7614c578ea20e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>process<span class="sh_symbol">.</span><span class="sh_function">exit</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">);</span> </code></pre>
</div>

<div class="translate-section" data-hash="9a7404113ce9d21ce11546514c391cd9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>执行上述代码，用来执行 node 的 shell 就能收到值为 1 的 exit code

</p>
</div>

<div class="translate-section" data-hash="6797b3befdabaa21edb10018263c9e57"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.exitCode<span><a href="#all_process_exitcode_1408" id="all_process_exitcode_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="1b6cf606bcccd46293725c1481fa6653"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当进程既正常退出，或者通过未指定 code 的 <code>process.exit()</code> 退出时，这个属性中所存储的数字将会成为进程退出的错误码 (exit code)。

</p>
</div>

<div class="translate-section" data-hash="2054364c79c85f6ac4a67f04d1988e96"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果指名了 <code>process.exit(code)</code> 中退出的错误码 (code)，则会覆盖掉 <code>process.exitCode</code> 的设置。

</p>
</div>

<div class="translate-section" data-hash="048964d76cf4f6d235911c77e6cd1aa3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.getgid()<span><a href="#all_process_getgid_1408" id="all_process_getgid_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="667873417466d36af0727eab921560ff"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意： 该函数仅适用于遵循 POSIX 标准的系统平台如 Unix、Linux等  而 Windows、
Android 等则不适用。

</p>
</div>

<div class="translate-section" data-hash="cc53d45f2c7aff2b8788732406e3fd3e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>获取进程的群组标识（详见getgid(2)）。获取到的是群组的数字ID，不是群组名称。

</p>
</div>

<div class="translate-section" data-hash="a05607121cf8240d38f84b99b6f9afdf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>getgid<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'当前 gid: '</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span><span class="sh_function">getgid</span><span class="sh_symbol">());</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="24264ae6654dd972216a3f6f9cd297aa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.setgid(id)<span><a href="#all_process_setgid_id_1408" id="all_process_setgid_id_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="667873417466d36af0727eab921560ff"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意： 该函数仅适用于遵循 POSIX 标准的系统平台如 Unix、Linux等  而 Windows、
Android 等则不适用。

</p>
</div>

<div class="translate-section" data-hash="c3b8bc48c4f5d5e72ea70abfad8b7009"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置进程的群组标识（详见getgid(2)）。参数可以是一个数字ID或者群组名字符串。如果指定了一个群组名，这个方法会阻塞等待将群组名解析为数字ID。 

</p>
</div>

<div class="translate-section" data-hash="144b24931201ce437dfeab20e1afa574"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>getgid <span class="sh_symbol">&amp;&amp;</span> process<span class="sh_symbol">.</span>setgid<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'当前 gid: '</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span><span class="sh_function">getgid</span><span class="sh_symbol">());</span>
  <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
    process<span class="sh_symbol">.</span><span class="sh_function">setgid</span><span class="sh_symbol">(</span><span class="sh_number">501</span><span class="sh_symbol">);</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'新 gid: '</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span><span class="sh_function">getgid</span><span class="sh_symbol">());</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'设置 gid 失败: '</span> <span class="sh_symbol">+</span> err<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="872cab23943a34385f7fd3a3a3a6a418"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.getuid()<span><a href="#all_process_getuid_1408" id="all_process_getuid_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="667873417466d36af0727eab921560ff"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意： 该函数仅适用于遵循 POSIX 标准的系统平台如 Unix、Linux等  而 Windows、
Android 等则不适用。

</p>
</div>

<div class="translate-section" data-hash="65d313cd8d6b1b4ecddc5d84ddf2b7fd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>获取执行进程的用户ID（详见getgid(2)）。这是用户的数字ID，不是用户名。

</p>
</div>

<div class="translate-section" data-hash="e2ac7d8ad44c59c0e4c40688d8972312"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>getuid<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'当前 uid: '</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span><span class="sh_function">getuid</span><span class="sh_symbol">());</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="b990d2f658469f0c3d104f25bbd1ede2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.setuid(id)<span><a href="#all_process_setuid_id_1408" id="all_process_setuid_id_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="667873417466d36af0727eab921560ff"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意： 该函数仅适用于遵循 POSIX 标准的系统平台如 Unix、Linux等  而 Windows、
Android 等则不适用。

</p>
</div>

<div class="translate-section" data-hash="d234514a252dedda5e05902100a56595"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置执行进程的用户ID（详见getgid(2)）。参数可以使一个数字ID或者用户名字符串。如果指定了一个用户名，那么该方法会阻塞等待将用户名解析为数字ID。

</p>
</div>

<div class="translate-section" data-hash="99124386aeafbcf27cedfe7490b14237"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>getuid <span class="sh_symbol">&amp;&amp;</span> process<span class="sh_symbol">.</span>setuid<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'当前 uid: '</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span><span class="sh_function">getuid</span><span class="sh_symbol">());</span>
  <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
    process<span class="sh_symbol">.</span><span class="sh_function">setuid</span><span class="sh_symbol">(</span><span class="sh_number">501</span><span class="sh_symbol">);</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'新 uid: '</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span><span class="sh_function">getuid</span><span class="sh_symbol">());</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'设置 uid 失败: '</span> <span class="sh_symbol">+</span> err<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="f58485be94f288db955d9f23f9565949"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.getgroups()<span><a href="#all_process_getgroups_1408" id="all_process_getgroups_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="667873417466d36af0727eab921560ff"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意： 该函数仅适用于遵循 POSIX 标准的系统平台如 Unix、Linux等  而 Windows、
Android 等则不适用。

</p>
</div>

<div class="translate-section" data-hash="6c4c4b5265872b3356d30da1e8a6864e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个保存补充组ID(supplementary group ID)的数组。POSIX 标准没有指名 如果有效组 
ID（effective group ID）被包括在内的情况，而在 node.js 中则确保它始终是。（POSIX leaves it 
unspecified if the effective group ID is included but node.js ensures it
 always is.  ）

</p>
</div>

<div class="translate-section" data-hash="86abf1066f8cf2c21d9b62abb856f26e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.setgroups(groups)<span><a href="#all_process_setgroups_groups_1408" id="all_process_setgroups_groups_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="667873417466d36af0727eab921560ff"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意： 该函数仅适用于遵循 POSIX 标准的系统平台如 Unix、Linux等  而 Windows、
Android 等则不适用。

</p>
</div>

<div class="translate-section" data-hash="8dc79c10353317cbb030982617e0066b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置补充分组的ID标识. 这是一个特殊的操作, 意味着你必须拥有root或者CAP_SETGID权限才可以。（译者：CAP_SETGID表示设定程序允许普通用户使用setgid函数,这与文件的setgid权限位无关）

</p>
</div>

<div class="translate-section" data-hash="da93dead973471993a21cd08aa002d29"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个列表可以包括分组的ID表示，或分组名或两者都有。

</p>
</div>

<div class="translate-section" data-hash="a31256c7d9c1b544400a254b75eceba4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.initgroups(user, extra_group)<span><a href="#all_process_initgroups_user_extra_group_1408" id="all_process_initgroups_user_extra_group_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="667873417466d36af0727eab921560ff"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意： 该函数仅适用于遵循 POSIX 标准的系统平台如 Unix、Linux等  而 Windows、
Android 等则不适用。

</p>
</div>

<div class="translate-section" data-hash="de626618f1da0fefbee15e744ac37709"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>读取 /etc/group 并且初始化group分组访问列表，使用改成员所在的所有分组， 这是一个特殊的操作, 意味着你必须拥有root或者CAP_SETGID权限才可以。

</p>
</div>

<div class="translate-section" data-hash="9f9fa5cd924c004fc60b215ba3f2e3ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>user</code> 是一个用户名或者用户ID. <code>extra_group</code>是分组的组名或者分组ID。

</p>
</div>

<div class="translate-section" data-hash="7f26849428401f13b99ed07531fdc28e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>有时候，当你在注销权限 (dropping privileges) 的时候需要注意。例如： 

</p>
</div>

<div class="translate-section" data-hash="59d8cfaa2061c667226b5a807c2746d5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span><span class="sh_function">getgroups</span><span class="sh_symbol">());</span>         <span class="sh_comment">// [ 0 ]</span>
process<span class="sh_symbol">.</span><span class="sh_function">initgroups</span><span class="sh_symbol">(</span><span class="sh_string">'bnoordhuis'</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>   <span class="sh_comment">// switch user</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span><span class="sh_function">getgroups</span><span class="sh_symbol">());</span>         <span class="sh_comment">// [ 27, 30, 46, 1000, 0 ]</span>
process<span class="sh_symbol">.</span><span class="sh_function">setgid</span><span class="sh_symbol">(</span><span class="sh_number">1000</span><span class="sh_symbol">);</span>                     <span class="sh_comment">// drop root gid</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span><span class="sh_function">getgroups</span><span class="sh_symbol">());</span>         <span class="sh_comment">// [ 27, 30, 46, 1000 ]</span></code></pre>
</div>

<div class="translate-section" data-hash="8c8934ef723226c68ffcd74722447150"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.version<span><a href="#all_process_version_1408" id="all_process_version_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b21b3c13767e6fdfd81527e69e40f492"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个暴露编译时存储版本信息的内置变量 <code>NODE_VERSION</code> 的属性。

</p>
</div>

<div class="translate-section" data-hash="aa023b836619755ee9d362d034d865a8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'版本: '</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span>version<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="20cb46ac2bec3f1744ce11c0895a67d1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.versions<span><a href="#all_process_versions_1408" id="all_process_versions_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="221f5fecbab40627552eded79301ce6c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个暴露存储 node 以及其依赖包 版本信息的属性。

</p>
</div>

<div class="translate-section" data-hash="6bcadd3cacf05ac2e37c7527dbf75111"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>versions<span class="sh_symbol">);</span> </code></pre>
</div>

<div class="translate-section" data-hash="fb8e489d9eec7df1888e6dae4c2757ec"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>输出：

</p>
</div>

<div class="translate-section" data-hash="13aa9c9c815f2acb91ac146b092b6074"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> http_parser<span class="sh_symbol">:</span> <span class="sh_string">'1.0'</span><span class="sh_symbol">,</span>
  node<span class="sh_symbol">:</span> <span class="sh_string">'0.10.4'</span><span class="sh_symbol">,</span>
  v8<span class="sh_symbol">:</span> <span class="sh_string">'3.14.5.8'</span><span class="sh_symbol">,</span>
  ares<span class="sh_symbol">:</span> <span class="sh_string">'1.9.0-DEV'</span><span class="sh_symbol">,</span>
  uv<span class="sh_symbol">:</span> <span class="sh_string">'0.10.3'</span><span class="sh_symbol">,</span>
  zlib<span class="sh_symbol">:</span> <span class="sh_string">'1.2.3'</span><span class="sh_symbol">,</span>
  modules<span class="sh_symbol">:</span> <span class="sh_string">'11'</span><span class="sh_symbol">,</span>
  openssl<span class="sh_symbol">:</span> <span class="sh_string">'1.0.1e'</span> <span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="5c51edaee58f052f6d91cc43e8c93e59"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.config<span><a href="#all_process_config_1408" id="all_process_config_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="92790b0243089a8959f0c8c55beb2856"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个包含用来编译当前 node.exe 的配置选项的对象。内容与运行 <code>./configure</code> 脚本生成的 "config.gypi" 文件相同。

</p>
</div>

<div class="translate-section" data-hash="b7a0ec8a495634e861910430933336b7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>最可能的输出示例如下：

</p>
</div>

<div class="translate-section" data-hash="38be3e544d316601a048a2e0e9e0852f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> target_defaults<span class="sh_symbol">:</span>
   <span class="sh_cbracket">{</span> cflags<span class="sh_symbol">:</span> <span class="sh_symbol">[],</span>
     default_configuration<span class="sh_symbol">:</span> <span class="sh_string">'Release'</span><span class="sh_symbol">,</span>
     defines<span class="sh_symbol">:</span> <span class="sh_symbol">[],</span>
     include_dirs<span class="sh_symbol">:</span> <span class="sh_symbol">[],</span>
     libraries<span class="sh_symbol">:</span> <span class="sh_symbol">[]</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  variables<span class="sh_symbol">:</span>
   <span class="sh_cbracket">{</span> host_arch<span class="sh_symbol">:</span> <span class="sh_string">'x64'</span><span class="sh_symbol">,</span>
     node_install_npm<span class="sh_symbol">:</span> <span class="sh_string">'true'</span><span class="sh_symbol">,</span>
     node_prefix<span class="sh_symbol">:</span> <span class="sh_string">''</span><span class="sh_symbol">,</span>
     node_shared_cares<span class="sh_symbol">:</span> <span class="sh_string">'false'</span><span class="sh_symbol">,</span>
     node_shared_http_parser<span class="sh_symbol">:</span> <span class="sh_string">'false'</span><span class="sh_symbol">,</span>
     node_shared_libuv<span class="sh_symbol">:</span> <span class="sh_string">'false'</span><span class="sh_symbol">,</span>
     node_shared_v8<span class="sh_symbol">:</span> <span class="sh_string">'false'</span><span class="sh_symbol">,</span>
     node_shared_zlib<span class="sh_symbol">:</span> <span class="sh_string">'false'</span><span class="sh_symbol">,</span>
     node_use_dtrace<span class="sh_symbol">:</span> <span class="sh_string">'false'</span><span class="sh_symbol">,</span>
     node_use_openssl<span class="sh_symbol">:</span> <span class="sh_string">'true'</span><span class="sh_symbol">,</span>
     node_shared_openssl<span class="sh_symbol">:</span> <span class="sh_string">'false'</span><span class="sh_symbol">,</span>
     strict_aliasing<span class="sh_symbol">:</span> <span class="sh_string">'true'</span><span class="sh_symbol">,</span>
     target_arch<span class="sh_symbol">:</span> <span class="sh_string">'x64'</span><span class="sh_symbol">,</span>
     v8_use_snapshot<span class="sh_symbol">:</span> <span class="sh_string">'true'</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="85553a43d6432a2df3f886b83a4abb44"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.kill(pid, [signal])<span><a href="#all_process_kill_pid_signal_1408" id="all_process_kill_pid_signal_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="229727eaea32f3eb3bbb24b033a1c960"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>向进程发送一个信号。 <code>pid</code> 是进程的 id 而 <code>signal</code> 则是描述信号的字符串名称。信号的名称都形似 'SIGINT' 或者 'SIGUSR1'。如果没有指定参数则会默认发送 'SIGTERM' 信号，更多信息请查看 kill(2) 。

</p>
</div>

<div class="translate-section" data-hash="f8897660227fe3d5d6cc041fbc2a61ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>值得注意的是，这个函数的名称虽然是 <code>process.kill</code>， 但就像 <code>kill</code> 系统调用（详见《Unix高级编程》）一样，它仅仅只是一个信号发送器。而信号的发送不仅仅只是用来杀死（kill）目标进程。

</p>
</div>

<div class="translate-section" data-hash="39ad78549ed25e04e0fa9fdcaba840fd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>向当前进程发送信号的示例：

</p>
</div>

<div class="translate-section" data-hash="8f745e2639ad38e2a8b28f3f6ebdd00c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>process<span class="sh_symbol">.</span><span class="sh_function">kill</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>pid<span class="sh_symbol">,</span> <span class="sh_string">'SIGHUP'</span><span class="sh_symbol">);</span> </code></pre>
</div>

<div class="translate-section" data-hash="bb1a87c97d7c02632f487e1f264326ff"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.pid<span><a href="#all_process_pid_1408" id="all_process_pid_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="a85a5c1e3337abf8b4e2c3a2d0dce392"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当前进程的 PID 

</p>
</div>

<div class="translate-section" data-hash="9437d6e1e1900b5ba7486884c12941d5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'当前进程 id: '</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span>pid<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="e27af35a82183a2a00a6e4e5ed4dd087"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.title<span><a href="#all_process_title_1408" id="all_process_title_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="6ed939d5dbde6800f3543e69cbf6f7c0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>获取/设置 (Getter/setter) 'ps' 中显示的进程名。

</p>
</div>

<div class="translate-section" data-hash="35a02e5e29e6fc0ea82d070576253e49"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当设置该属性时，所能设置的字符串最大长度视具体平台而定，如果超过的话会自动截断。

</p>
</div>

<div class="translate-section" data-hash="e7df7d719b6f836b21847f3efd5452f0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在 Linux 和 OS X 上，它受限于名称的字节长度加上命令行参数的长度，因为它有覆盖参数内存(argv memory)。

</p>
</div>

<div class="translate-section" data-hash="e545a895edcfccd8eb7c3759be01a124"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>v0.8 版本允许更长的进程标题字符串，也支持覆盖环境内存，但是存在潜在的不安全和混乱（很难说清楚）。

</p>
</div>

<div class="translate-section" data-hash="a1ed8e38d02bf6ca0d29c3693ac7299c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.arch<span><a href="#all_process_arch_1408" id="all_process_arch_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="62eb6fa4fb08a1d8ba5e1c6d9d36b0ad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回当前 CPU 处理器的架构：'arm'、'ia32' 或者 'x64'.

</p>
</div>

<div class="translate-section" data-hash="c7f373d0d5abfe1e1a9cc7352d7cc2fe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'当前CPU架构是：'</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span>arch<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="b0523b1c59d221110483d9bfb1f3abfd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.platform<span><a href="#all_process_platform_1408" id="all_process_platform_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="226fa75798abecbb1efd1fb7bf6b87e3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回当前程序运行的平台：<code>'darwin'</code>, <code>'freebsd'</code>, <code>'linux'</code>, <code>'sunos'</code> 或者 <code>'win32'</code>

</p>
</div>

<div class="translate-section" data-hash="8266bb1fd71103e90b2879e6a6a928e7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'当前系统平台是： '</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span>platform<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="5f5680da9c4a47be3c286ad0df21c532"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.memoryUsage()<span><a href="#all_process_memoryusage_1408" id="all_process_memoryusage_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b71aa3eaea87d7bbfceed4c6e84b9da2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个对象，它描述了Node进程的内存使用情况单位是bytes。 

</p>
</div>

<div class="translate-section" data-hash="999abafc52a7d95efd614208a232190d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span><span class="sh_function">memoryUsage</span><span class="sh_symbol">()));</span> </code></pre>
</div>

<div class="translate-section" data-hash="9c7011b361244c871a1c0e3b4fd56a19"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>输出将会是：

</p>
</div>

<div class="translate-section" data-hash="abc103c4a566ca803e534e6b6a31dc47"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> rss<span class="sh_symbol">:</span> <span class="sh_number">4935680</span><span class="sh_symbol">,</span>
  heapTotal<span class="sh_symbol">:</span> <span class="sh_number">1826816</span><span class="sh_symbol">,</span>
  heapUsed<span class="sh_symbol">:</span> <span class="sh_number">650472</span> <span class="sh_cbracket">}</span> </code></pre>
</div>

<div class="translate-section" data-hash="9a9e281d1a4d3d5f07b2634017438bc1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>heapTotal</code> 和 <code>heapUsed</code> 是根据 V8引擎的内存使用情况来的

</p>
</div>

<div class="translate-section" data-hash="14e6d0bdb152be8a7f541e19deb1deae"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.nextTick(callback)<span><a href="#all_process_nexttick_callback_1408" id="all_process_nexttick_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="feee3c183e3ae8daf8d1a02eef135818"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>callback</code> {Function}</li>
</ul>
</div>

<div class="translate-section" data-hash="50669097937caaad790da3d7ab111079"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在事件循环的下一次循环中调用 callback 回调函数。

</p>
</div>

<div class="translate-section" data-hash="91b8d4ac73e110fa7aa5f5fb060c19d1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这 <em>不是</em> <code>setTimeout(fn, 0)</code> 函数的一个简单别名，因为它的效率高多了。该函数能在任何 I/O 事前之前调用我们的回调函数。但是这个函数在层次超过某个限制的时候，也会出现瑕疵，详细见 <code>process.maxTickDepth</code>。

</p>
</div>

<div class="translate-section" data-hash="8fa161271be89ef13c299bd0e8ff9acc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'开始'</span><span class="sh_symbol">);</span>
process<span class="sh_symbol">.</span><span class="sh_function">nextTick</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'nextTick 回调'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'已设定'</span><span class="sh_symbol">);</span>
<span class="sh_comment">// 输出:</span>
<span class="sh_comment">// 开始</span>
<span class="sh_comment">// 已设定</span>
<span class="sh_comment">// nextTick 回调</span></code></pre>
</div>

<div class="translate-section" data-hash="50a700b557ef29fa9a86527d7b090c90"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果你想要在【对象创建】之后而【I/O 操作】发生之前执行某些操作，那么这个函数对你而言就十分重要了。

</p>
</div>

<div class="translate-section" data-hash="a8def1e6111b0b01d4fbe75d22dc9233"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// thing.startDoingStuff() 现在被调用了, 而不是之前.</span></code></pre>
</div>

<div class="translate-section" data-hash="f23660f6def3fd60b6a5bfeab46847cf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>【注意！！】保证你的函数一定是同步执行或者一定是异步执行，这非常重要！！参考如下的例子：

</p>
</div>

<div class="translate-section" data-hash="140e946d0cbdbd121ec34265b7b1d25e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>  fs<span class="sh_symbol">.</span><span class="sh_function">stat</span><span class="sh_symbol">(</span><span class="sh_string">'file'</span><span class="sh_symbol">,</span> cb<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span> </code></pre>
</div>

<div class="translate-section" data-hash="80dc9cd0936da39a4a1892a35bec01e5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这样执行是很危险。如果你还不清楚上述行为的危害请看下面的例子：

</p>
</div>

<div class="translate-section" data-hash="22e46d19068909c589dbf076032afa33"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_function">maybeSync</span><span class="sh_symbol">(</span><span class="sh_keyword">true</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">foo</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_function">bar</span><span class="sh_symbol">();</span> </code></pre>
</div>

<div class="translate-section" data-hash="bfda22d4fb226da0a1eac2b8a95c81bb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>那么，使用刚才那个不知道是同步还是异步的操作，在编程的时候你就会发现，你不能确定到底是 foo() 先执行，还是 bar() 先执行。

</p>
</div>

<div class="translate-section" data-hash="a537a6f09c4f3bec8178cd2768b5d3d5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用下面的方法就可以更好的解决：

</p>
</div>

<div class="translate-section" data-hash="140e946d0cbdbd121ec34265b7b1d25e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>  fs<span class="sh_symbol">.</span><span class="sh_function">stat</span><span class="sh_symbol">(</span><span class="sh_string">'file'</span><span class="sh_symbol">,</span> cb<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span> </code></pre>
</div>

<div class="translate-section" data-hash="c773a727d60d6afcebe5ed7941c271c4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意：nextTick 的队列会在完全执行完毕之后才调用 I/O 操作 (the nextTick queue is completely drained on each pass of the event loop <strong>before</strong> additional I/O is processed.) 。因此，递归设置 nextTick 的回调就像一个 <code>while(true) ;</code> 循环一样，将会阻止任何 I/O 操作的发生。

</p>
</div>

<div class="translate-section" data-hash="47c7c826a9b9003377e6789c63e519ea"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.umask([mask])<span><a href="#all_process_umask_mask_1408" id="all_process_umask_mask_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="9d9a3153aa243b22372c4141402c953b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置或者读取进程的文件模式的创建掩码。子进程从父进程中继承这个掩码。如果设定了参数 mask 那么返回旧的掩码，否则返回当前的掩码。

</p>
</div>

<div class="translate-section" data-hash="7ff05eb408688bc89f88881213b511b1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>oldmask <span class="sh_symbol">=</span> process<span class="sh_symbol">.</span><span class="sh_function">umask</span><span class="sh_symbol">(</span>newmask<span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'原掩码: '</span> <span class="sh_symbol">+</span> oldmask<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_number">8</span><span class="sh_symbol">)</span> <span class="sh_symbol">+</span> <span class="sh_string">'</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span>
            <span class="sh_string">'新掩码: '</span> <span class="sh_symbol">+</span> newmask<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_number">8</span><span class="sh_symbol">));</span></code></pre>
</div>

<div class="translate-section" data-hash="ac11f163086772b79528f584e50b4d0f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.uptime()<span><a href="#all_process_uptime_1408" id="all_process_uptime_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ac25774af1130acd2b4f88c07fc60d7f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回 Node 程序已运行的秒数。

</p>
</div>

<div class="translate-section" data-hash="09d182fa6178f3da2c0f2b5d33f909d4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>process.hrtime()<span><a href="#all_process_hrtime_1408" id="all_process_hrtime_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="8bac6979719a631a14723a56dcb394f2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回当前的高分辨时间，形式为 <code>[秒，纳秒]</code> 的元组数组。它是相对于在过去的任意时间。该值与日期无关，因此不受时钟漂移的影响。主要用途是可以通过精确的时间间隔，来衡量程序的性能。

</p>
</div>

<div class="translate-section" data-hash="6d6428301737c656e4e59a5310fb2774"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>你可以将前一个 <code>process.hrtime()</code> 的结果传递给当前的 <code>process.hrtime()</code> 函数，结果会返回一个比较值，用于基准和衡量时间间隔。

</p>
</div>

<div class="translate-section" data-hash="c40618c80799847f7641e532daa4dd2b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'基准相差 %d 纳秒'</span><span class="sh_symbol">,</span> diff<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_symbol">*</span> <span class="sh_number">1e9</span> <span class="sh_symbol">+</span> diff<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]);</span>
  <span class="sh_comment">// 基准相差 1000000527 纳秒</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="6949f457689f76a715805ad76aa0f835"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

</div>
<div class="translate-section" data-hash="7ffdbb5978ce74db896c7fcaea9de2fb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>utils<span><a href="#all_utils_1408" id="all_utils_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="050a2049458b1f3dbf3e3f111adcfb22"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">4</span> <span class="sh_symbol">-</span> 冻结</code></pre>
</div>

<div class="translate-section" data-hash="8f2dd81be517033cf66afeea8f943bbe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果你想使用模块 <code>'util'</code>中已定义的方法. 只需 <code>require('util')</code> 即可使用.

</p>
</div>

<div class="translate-section" data-hash="bd1ec80ad6885396d2b87b46d6a08622"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>util</code>模块设计的主要目的是为了满足Node内部API的需求
。这个模块中的很多方法在你编写Node程序的时候都是很有帮助的。如果你觉得提供的这些方法满足不了你的需求，那么我们鼓励你编写自己的实用工具方法。我们
不希望<code>util</code>模块中添加任何对于Node的内部功能非必要的扩展。

</p>
</div>

<div class="translate-section" data-hash="deddd2b3686ed64d236bf7a50291c773"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>util.debuglog(section)<span><a href="#all_util_debuglog_section_1408" id="all_util_debuglog_section_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="32797bf726f7d15c6290c49f11c96e25"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>section</code> {String} 被调试的程序节点部分</li>
<li>返回值: {Function} 日志处理函数</li>
</ul>
</div>

<div class="translate-section" data-hash="bf4e7e6a51ae5fdc4cb9adcaf5426dc4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个方法是在存在<code>NODE_DEBUG</code>环境变量的基础上，创建一个有条件写到stderr里的函数。如果“节点”的名字出现在这个环境变量里,那么就返回一个功能类似于<code>console.error()</code>的函数.如果不是,那么返回一个空函数.

</p>
</div>

<div class="translate-section" data-hash="506c2c0c7f5b70af3df68c45c46f45a7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例如：

</p>
</div>

<div class="translate-section" data-hash="4ceb0d2e9dd8f1bf52d212c938cb96a6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>var bar = 123;
debuglog('hello from foo [%d]', bar);
</p>
<pre class="sh_sourceCode"><code>
<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>841c12a486aeca12985eeae2d550044e <span class="sh_symbol">--&gt;</span>

如果这个程序以`NODE_DEBUG<span class="sh_symbol">=</span>foo` 的环境运行，那么它将会输出：

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>cefee92825ed4220569779223fcc49f3 <span class="sh_symbol">--&gt;</span>

    FOO <span class="sh_number">3245</span><span class="sh_symbol">:</span> hello from foo <span class="sh_symbol">[</span><span class="sh_number">123</span><span class="sh_symbol">]</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>17ef1e93428ebec32b98fa8fe18e7807 <span class="sh_symbol">--&gt;</span>

`<span class="sh_number">3245</span>`是进程的ID<span class="sh_symbol">,</span> 如果程序不以刚才那样设置的环境变量运行，那么将不会输出任何东西。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>fb8af07a0bc0e884ec481501fb9ee17d <span class="sh_symbol">--&gt;</span>

多个`NODE_DEBUG`环境变量<span class="sh_symbol">,</span>你可以用逗号进行分割。例如，`NODE_DEBUG<span class="sh_symbol">=</span> fs<span class="sh_symbol">,</span> net<span class="sh_symbol">,</span> tls`。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>1785afa5e0b057aea818cd8bc131248a <span class="sh_symbol">--&gt;</span>

## util<span class="sh_symbol">.</span><span class="sh_function">format</span><span class="sh_symbol">(</span>format<span class="sh_symbol">,</span> <span class="sh_symbol">[...])</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>91ee7971cb6dbe7c7841d5c0357a625a <span class="sh_symbol">--&gt;</span>

根据第一个参数，返回一个格式化字符串，类似`printf`的格式化输出。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>eed068a3508e3b9cc687607e97338b9f <span class="sh_symbol">--&gt;</span>

第一个参数是一个字符串，包含零个或多个<span class="sh_symbol">*</span>占位符<span class="sh_symbol">*</span>。
每一个占位符被替换为与其对应的转换后的值。
支持的占位符有<span class="sh_symbol">:</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>da9b014604572a67a757e892ddd36dd3 <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">*</span> `<span class="sh_symbol">%</span>s` <span class="sh_symbol">-</span> 字符串<span class="sh_symbol">.</span>
<span class="sh_symbol">*</span> `<span class="sh_symbol">%</span>d` <span class="sh_symbol">-</span> 数字 <span class="sh_symbol">(</span>整型和浮点型<span class="sh_symbol">).</span>
<span class="sh_symbol">*</span> `<span class="sh_symbol">%</span>j` <span class="sh_symbol">-</span> JSON<span class="sh_symbol">.</span> 如果这个参数包含循环对象的引用，将会被替换成字符串 `<span class="sh_string">'[Circular]'</span>`。
<span class="sh_symbol">*</span> `<span class="sh_symbol">%%</span>` <span class="sh_symbol">-</span> 单独一个百分号<span class="sh_symbol">(</span>`<span class="sh_string">'%'</span>`<span class="sh_symbol">)</span>。不会消耗一个参数。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>c2996cb0cabc702cd8d2bf9d2410599b <span class="sh_symbol">--&gt;</span>

如果占位符没有相对应的参数，占位符将不会被替换。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>8b6a9f474a82c2495887bf9fe6602308 <span class="sh_symbol">--&gt;</span>

    util<span class="sh_symbol">.</span><span class="sh_function">format</span><span class="sh_symbol">(</span><span class="sh_string">'%s:%s'</span><span class="sh_symbol">,</span> <span class="sh_string">'foo'</span><span class="sh_symbol">);</span> <span class="sh_comment">// 'foo:%s'</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>1e95291ba804f022549694a216ac10c6 <span class="sh_symbol">--&gt;</span>

如果有多个参数占位符，额外的参数将会调用`util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">()</span>`转换为字符串。这些字符串被连接在一起，并且以空格分隔。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>ba9ecf5f8b441a986c81bee295e7f5f6 <span class="sh_symbol">--&gt;</span>

    util<span class="sh_symbol">.</span><span class="sh_function">format</span><span class="sh_symbol">(</span><span class="sh_string">'%s:%s'</span><span class="sh_symbol">,</span> <span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_string">'bar'</span><span class="sh_symbol">,</span> <span class="sh_string">'baz'</span><span class="sh_symbol">);</span> <span class="sh_comment">// 'foo:bar baz'</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>f34f71da627ffc546bb170512e2ffa99 <span class="sh_symbol">--&gt;</span>

如果第一个参数是一个非格式化字符串，那么`util<span class="sh_symbol">.</span><span class="sh_function">format</span><span class="sh_symbol">()</span>`将会把所有的参数转成字符串，以空格隔开，拼接在一块，并返回该字符串。`util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">()</span>`会把每个参数都转成一个字符串。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>25dcc02c2222a4275231d90579c8598e <span class="sh_symbol">--&gt;</span>

    util<span class="sh_symbol">.</span><span class="sh_function">format</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">,</span> <span class="sh_number">3</span><span class="sh_symbol">);</span> <span class="sh_comment">// '1 2 3'</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>f695fcc4f18f5c6e339ccce4e3389dcf <span class="sh_symbol">--&gt;</span>

## util<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>string<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>726d139874d57d83bf5da6c193940e4d <span class="sh_symbol">--&gt;</span>

在控制台进行输出，并带有时间戳。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>ba5cd1d0dee4eb1d7de5808ac9c816b8 <span class="sh_symbol">--&gt;</span>

    示例：<span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">).</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Timestamped message.'</span><span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>49290ff385e98b889e7199f35d8fdd82 <span class="sh_symbol">--&gt;</span>

## util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>object<span class="sh_symbol">,</span> <span class="sh_symbol">[</span>options<span class="sh_symbol">])</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>1109f4d3eef77037e85144a6ac35edb4 <span class="sh_symbol">--&gt;</span>

返回一个对象的字符串表现形式<span class="sh_symbol">,</span> 在代码调试的时候非常有用<span class="sh_symbol">.</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>258dc184e5a4c8130e86a263acb47331 <span class="sh_symbol">--&gt;</span>

可以通过加入一些可选选项，来改变对象的格式化输出形式：

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>e8f8d3d45f5ea0449c8466bcc7d1aef5 <span class="sh_symbol">--&gt;</span>

 <span class="sh_symbol">-</span> `showHidden` <span class="sh_symbol">-</span> 如果设为 `<span class="sh_keyword">true</span>`，那么该对象的不可枚举的属性将会被显示出来。默认为`<span class="sh_keyword">false</span>`<span class="sh_symbol">.</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>961283759790f15496ef9cfd71e80da0 <span class="sh_symbol">--&gt;</span>

 <span class="sh_symbol">-</span> `depth` <span class="sh_symbol">-</span> 告诉 `inspect` 格式化对象的时候递归多少次。这个选项在格式化复杂对象的时候比较有用。 默认为
   `<span class="sh_number">2</span>`。如果想无穷递归下去，则赋值为`<span class="sh_keyword">null</span>`即可。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>87002282463d3e4ae824462785cdb97f <span class="sh_symbol">--&gt;</span>

 <span class="sh_symbol">-</span> `colors` <span class="sh_symbol">-</span> 如果设为`<span class="sh_keyword">true</span>`，将会以`ANSI`颜色代码风格进行输出<span class="sh_symbol">.</span>
   默认是`<span class="sh_keyword">false</span>`。颜色是可定制的，请看下面：

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>e58f864e5d78935059b0d82a0de99ac5 <span class="sh_symbol">--&gt;</span>

 <span class="sh_symbol">-</span> `customInspect` <span class="sh_symbol">-</span> 如果设为 `<span class="sh_keyword">false</span>`，那么定义在被检查对象上的`<span class="sh_function">inspect</span><span class="sh_symbol">(</span>depth<span class="sh_symbol">,</span> opts<span class="sh_symbol">)</span>` 方法将不会被调用。 默认为`<span class="sh_keyword">true</span>`。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>ba2e5c5a48d29e5af4a12604012adbed <span class="sh_symbol">--&gt;</span>

示例：检查`util`对象上的所有属性

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>b18c78721710be6505a368795090fa2a <span class="sh_symbol">--&gt;</span>

    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>util<span class="sh_symbol">,</span> <span class="sh_cbracket">{</span> showHidden<span class="sh_symbol">:</span> <span class="sh_keyword">true</span><span class="sh_symbol">,</span> depth<span class="sh_symbol">:</span> <span class="sh_keyword">null</span> <span class="sh_cbracket">}</span><span class="sh_symbol">));</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>861c779d7e06e5793e09df841bcb961e <span class="sh_symbol">--&gt;</span>

当被调用的时候，参数值可以提供自己的自定义`<span class="sh_function">inspect</span><span class="sh_symbol">(</span>depth<span class="sh_symbol">,</span> opts<span class="sh_symbol">)</span>`方法。该方法会接收当前的递归检查深度，以及传入`util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">()</span>`的其他参数。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>4a6133be34b7ea241e0ca2c1f1352b67 <span class="sh_symbol">--&gt;</span>

### 自定义 `util<span class="sh_symbol">.</span>inspect` 颜色

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> type<span class="sh_symbol">=</span>misc <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>e67331593b47e5b33c512bdb1b0ff48a <span class="sh_symbol">--&gt;</span>

`util<span class="sh_symbol">.</span>inspect`彩色输出<span class="sh_symbol">(</span>如果启用的话<span class="sh_symbol">)</span> ，可以通过`util<span class="sh_symbol">.</span>inspect<span class="sh_symbol">.</span>styles` 和 `util<span class="sh_symbol">.</span>inspect<span class="sh_symbol">.</span>colors` 来全局定义。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>a54599adbca30a4d73b7f925966c5603 <span class="sh_symbol">--&gt;</span>

`util<span class="sh_symbol">.</span>inspect<span class="sh_symbol">.</span>styles`是通过`util<span class="sh_symbol">.</span>inspect<span class="sh_symbol">.</span>colors`分配给每个风格颜色的一个映射。
高亮风格和它们的默认值<span class="sh_symbol">:</span>
 <span class="sh_symbol">*</span> `number` <span class="sh_symbol">(</span>黄色<span class="sh_symbol">)</span>
 <span class="sh_symbol">*</span> `boolean` <span class="sh_symbol">(</span>黄色<span class="sh_symbol">)</span>
 <span class="sh_symbol">*</span> `string` <span class="sh_symbol">(</span>绿色<span class="sh_symbol">)</span>
 <span class="sh_symbol">*</span> `date` <span class="sh_symbol">(</span>洋红色<span class="sh_symbol">)</span>
 <span class="sh_symbol">*</span> `regexp` <span class="sh_symbol">(</span>红色<span class="sh_symbol">)</span>
 <span class="sh_symbol">*</span> `<span class="sh_keyword">null</span>` <span class="sh_symbol">(</span>粗体<span class="sh_symbol">)</span>
 <span class="sh_symbol">*</span> `<span class="sh_predef_var">undefined</span>` <span class="sh_symbol">(</span>灰色<span class="sh_symbol">)</span>
 <span class="sh_symbol">*</span> `special` <span class="sh_symbol">-</span> 在这个时候的唯一方法 <span class="sh_symbol">(</span>青绿色<span class="sh_symbol">)</span>
 <span class="sh_symbol">*</span> `name` <span class="sh_symbol">(</span>无风格<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>3ee112e8f48b058b8ad29568e75ef607 <span class="sh_symbol">--&gt;</span>

预定义的颜色代码<span class="sh_symbol">:</span> `white`<span class="sh_symbol">,</span> `grey`<span class="sh_symbol">,</span> `black`<span class="sh_symbol">,</span> `blue`<span class="sh_symbol">,</span> `cyan`<span class="sh_symbol">,</span> 
`green`<span class="sh_symbol">,</span> `magenta`<span class="sh_symbol">,</span> `red` 和 `yellow`。
还有 `bold`<span class="sh_symbol">,</span> `italic`<span class="sh_symbol">,</span> `underline` 和 `inverse` 代码。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>440be6fb8aa71354fef5dea7fc96943d <span class="sh_symbol">--&gt;</span>

### 自定义对象的`<span class="sh_function">inspect</span><span class="sh_symbol">()</span>`方法

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> type<span class="sh_symbol">=</span>misc <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>3e669407dab4df9d4b8bb939bd6a2ae8 <span class="sh_symbol">--&gt;</span>

对象可以定义自己的 `<span class="sh_function">inspect</span><span class="sh_symbol">(</span>depth<span class="sh_symbol">)</span>`方法；当使用`util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">()</span>`检查该对象的时候，将会执行对象自定义的检查方法。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>2f67cef2dc14fcc47a091e9b18eda982 <span class="sh_symbol">--&gt;</span>

    util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">);</span>
      <span class="sh_comment">// "{nate}"</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>53e8daad6eb7817fc7dd12eec07bcb31 <span class="sh_symbol">--&gt;</span>

您也可以返回完全不同的另一个对象，而且返回的字符串将被根据返回的对象格式化。它和`JSON<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">()</span>`工作原理类似<span class="sh_symbol">:</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>237e76b838a128a2faf99212684fa8b9 <span class="sh_symbol">--&gt;</span>

    util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">);</span>
      <span class="sh_comment">// "{ bar: 'baz' }"</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>f7540c4eb10d670a568d050db1ea2bb5 <span class="sh_symbol">--&gt;</span>

## util<span class="sh_symbol">.</span><span class="sh_function">isArray</span><span class="sh_symbol">(</span>object<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>ea6ec473af78d910796c4ff2f4beba6d <span class="sh_symbol">--&gt;</span>

如果给定的对象是`数组`类型，就返回`<span class="sh_keyword">true</span>`，否则返回`<span class="sh_keyword">false</span>`

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>d54b11adadfb753c5dc492ca11c2be6c <span class="sh_symbol">--&gt;</span>

    util<span class="sh_symbol">.</span><span class="sh_function">isArray</span><span class="sh_symbol">([])</span>
      <span class="sh_comment">// true</span>
    util<span class="sh_symbol">.</span><span class="sh_function">isArray</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">Array</span><span class="sh_symbol">)</span>
      <span class="sh_comment">// true</span>
    util<span class="sh_symbol">.</span><span class="sh_function">isArray</span><span class="sh_symbol">(</span><span class="sh_cbracket">{}</span><span class="sh_symbol">)</span>
      <span class="sh_comment">// false</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>d93077c7b296f1169872fefca84c9be9 <span class="sh_symbol">--&gt;</span>

## util<span class="sh_symbol">.</span><span class="sh_function">isRegExp</span><span class="sh_symbol">(</span>object<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>4e189cb02b2cbad06d09d47e35f806cb <span class="sh_symbol">--&gt;</span>

如果给定的对象是`<span class="sh_predef_func">RegExp</span>`类型，就返回`<span class="sh_keyword">true</span>`，否则返回`<span class="sh_keyword">false</span>`。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>8d9463d7c3b441728cdaee8c6995c91e <span class="sh_symbol">--&gt;</span>

    util<span class="sh_symbol">.</span><span class="sh_function">isRegExp</span><span class="sh_symbol">(</span><span class="sh_regexp">/some regexp/</span><span class="sh_symbol">)</span>
      <span class="sh_comment">// true</span>
    util<span class="sh_symbol">.</span><span class="sh_function">isRegExp</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">RegExp</span><span class="sh_symbol">(</span><span class="sh_string">'another regexp'</span><span class="sh_symbol">))</span>
      <span class="sh_comment">// true</span>
    util<span class="sh_symbol">.</span><span class="sh_function">isRegExp</span><span class="sh_symbol">(</span><span class="sh_cbracket">{}</span><span class="sh_symbol">)</span>
      <span class="sh_comment">// false</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>931161fabda5cc5e34b8b244fa3a1739 <span class="sh_symbol">--&gt;</span>

## util<span class="sh_symbol">.</span><span class="sh_function">isDate</span><span class="sh_symbol">(</span>object<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>0e10fe8824ec08d1a4604ec484b4ee75 <span class="sh_symbol">--&gt;</span>

如果给定的对象是`<span class="sh_predef_func">Date</span>`类型，就返回`<span class="sh_keyword">true</span>`，否则返回`<span class="sh_keyword">false</span>`。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>a18b5ed95ee84e4dd2f4f0edce689916 <span class="sh_symbol">--&gt;</span>

    util<span class="sh_symbol">.</span><span class="sh_function">isDate</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">Date</span><span class="sh_symbol">())</span>
      <span class="sh_comment">// true</span>
    util<span class="sh_symbol">.</span><span class="sh_function">isDate</span><span class="sh_symbol">(</span><span class="sh_predef_func">Date</span><span class="sh_symbol">())</span>
      <span class="sh_comment">// false (没有关键字 'new' 返回一个字符串)</span>
    util<span class="sh_symbol">.</span><span class="sh_function">isDate</span><span class="sh_symbol">(</span><span class="sh_cbracket">{}</span><span class="sh_symbol">)</span>
      <span class="sh_comment">// false</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>8d36aedca50abcc1df1990d2e2bee19a <span class="sh_symbol">--&gt;</span>

## util<span class="sh_symbol">.</span><span class="sh_function">isError</span><span class="sh_symbol">(</span>object<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>4e7d0ccda0f08bf4e2499e2529303237 <span class="sh_symbol">--&gt;</span>

如果给定的对象是`<span class="sh_predef_func">Error</span>`类型，就返回`<span class="sh_keyword">true</span>`，否则返回`<span class="sh_keyword">false</span>`。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>e2ac9e8dc03345e5cb9a55f6a9d340f3 <span class="sh_symbol">--&gt;</span>

    util<span class="sh_symbol">.</span><span class="sh_function">isError</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">())</span>
      <span class="sh_comment">// true</span>
    util<span class="sh_symbol">.</span><span class="sh_function">isError</span><span class="sh_symbol">(</span><span class="sh_keyword">new</span> <span class="sh_predef_func">TypeError</span><span class="sh_symbol">())</span>
      <span class="sh_comment">// true</span>
    util<span class="sh_symbol">.</span><span class="sh_function">isError</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span> name<span class="sh_symbol">:</span> <span class="sh_string">'Error'</span><span class="sh_symbol">,</span> message<span class="sh_symbol">:</span> <span class="sh_string">'an error occurred'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
      <span class="sh_comment">// false</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>81fdd6c58be9d08b05ff8f7756b39195 <span class="sh_symbol">--&gt;</span>

## util<span class="sh_symbol">.</span><span class="sh_function">inherits</span><span class="sh_symbol">(</span>constructor<span class="sh_symbol">,</span> superConstructor<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>4477c32b0656b2610fd0d5967137862f <span class="sh_symbol">--&gt;</span>

通过<span class="sh_symbol">[</span>构造函数<span class="sh_symbol">](</span>https<span class="sh_symbol">:</span><span class="sh_comment">//developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor)，继承原型对象上的方法。构造函数的`原型`将被设置为一个新的</span>
从`超类`创建的对象。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>d27d3ddf50111db4f9c6bf7796b6c7cd <span class="sh_symbol">--&gt;</span>

你可以很方便的通过 `constructor<span class="sh_symbol">.</span>super_`来访问到`superConstructor` 

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>bb768700b523e98319d92c95c8f3c055 <span class="sh_symbol">--&gt;</span>

    stream<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">"data"</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
        console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Received data: "'</span> <span class="sh_symbol">+</span> data <span class="sh_symbol">+</span> <span class="sh_string">'"'</span><span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
    stream<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">"It works!"</span><span class="sh_symbol">);</span> <span class="sh_comment">// 输出结果：Received data: "It works!"</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>a3f76941a46977219d729ec32e53c169 <span class="sh_symbol">--&gt;</span>

## util<span class="sh_symbol">.</span><span class="sh_function">debug</span><span class="sh_symbol">(</span>string<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>082abafa227eefa4d2d293287dde4ffc <span class="sh_symbol">--&gt;</span>

    稳定度<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> 已过时<span class="sh_symbol">:</span> 请使用 console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">()</span> 代替

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>70aa4fdc0ad82574f81cea79a9524c49 <span class="sh_symbol">--&gt;</span>

`console<span class="sh_symbol">.</span>error`的已过时的前身

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>107d1fd1ab87080f18dfba53fe1973d0 <span class="sh_symbol">--&gt;</span>

## util<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">([...])</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>8470c9173b3022a3aaa5c99b573d1213 <span class="sh_symbol">--&gt;</span>

    稳定度<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> 已过时<span class="sh_symbol">:</span> 请使用 console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">()</span> 代替

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>70aa4fdc0ad82574f81cea79a9524c49 <span class="sh_symbol">--&gt;</span>

`console<span class="sh_symbol">.</span>error`的已过时的前身

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>14669ebe2f4fa3a034d5c8324b84ba0e <span class="sh_symbol">--&gt;</span>

## util<span class="sh_symbol">.</span><span class="sh_function">puts</span><span class="sh_symbol">([...])</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>292d0ba9e4d38fca3ad39db7b0576fc4 <span class="sh_symbol">--&gt;</span>

   稳定度<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> 已过时<span class="sh_symbol">:</span> 请使用 console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">()</span> 代替

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>fc6c6925ce3665fbb2e48ca90bb64632 <span class="sh_symbol">--&gt;</span>

`console<span class="sh_symbol">.</span>log`的已过时的前身

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>65a5b8c03e11e172f9755a1f81e3a745 <span class="sh_symbol">--&gt;</span>

## util<span class="sh_symbol">.</span><span class="sh_function">print</span><span class="sh_symbol">([...])</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>34d7799b56a10685b5e6afa53049eb41 <span class="sh_symbol">--&gt;</span>

   稳定度<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> 已过时<span class="sh_symbol">:</span> 请使用 console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">()</span> 代替

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>fc6c6925ce3665fbb2e48ca90bb64632 <span class="sh_symbol">--&gt;</span>

`console<span class="sh_symbol">.</span>log`的已过时的前身

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>11c756a231f455e357545d47573db5aa <span class="sh_symbol">--&gt;</span>

## util<span class="sh_symbol">.</span><span class="sh_function">pump</span><span class="sh_symbol">(</span>readableStream<span class="sh_symbol">,</span> writableStream<span class="sh_symbol">,</span> <span class="sh_symbol">[</span>callback<span class="sh_symbol">])</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>697b95943d8e32d1b3c8126d4c2464d3 <span class="sh_symbol">--&gt;</span>

   稳定度<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> 已过时<span class="sh_symbol">:</span> 请使用readableStream<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>writableStream<span class="sh_symbol">)</span>代替

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>d10aa97ce6544f151e627e28f34da150 <span class="sh_symbol">--&gt;</span>

`stream<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">()</span>`的已过时的前身


<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>
<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>50067abc5ffa11c9b47cc886357867f3 <span class="sh_symbol">--&gt;</span>

# 事件 <span class="sh_symbol">(</span>Events<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>050a2049458b1f3dbf3e3f111adcfb22 <span class="sh_symbol">--&gt;</span>

    稳定度<span class="sh_symbol">:</span> <span class="sh_number">4</span> <span class="sh_symbol">-</span> 冻结

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span>type<span class="sh_symbol">=</span>module<span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>7f7a3ddc542d9af4dc52c2424c9b3372 <span class="sh_symbol">--&gt;</span>

Node里面的许多对象都会分发事件：一个`net<span class="sh_symbol">.</span>Server`对象会在每次有新连接时分发一个事件， 一个`fs<span class="sh_symbol">.</span>readStream`对象会在文件被打开的时候发出一个事件。
所有这些产生事件的对象都是 `events<span class="sh_symbol">.</span>EventEmitter` 的实例。
你可以通过`<span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">"events"</span><span class="sh_symbol">);</span>`来访问该模块

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>6d51594acab94889caec68537bcbda17 <span class="sh_symbol">--&gt;</span>

通常，事件名是驼峰命名 <span class="sh_symbol">(</span>camel<span class="sh_symbol">-</span>cased<span class="sh_symbol">)</span> 的字符串。不过也没有强制的要求，任何字符串都是可以使用的。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>e4b58d5a58cc1f95ee6e57ac0c291aab <span class="sh_symbol">--&gt;</span>

为了处理发出的事件，我们将函数 <span class="sh_symbol">(</span><span class="sh_predef_func">Function</span><span class="sh_symbol">)</span> 关联到对象上。
我们把这些函数称为 _监听器 <span class="sh_symbol">(</span>listeners<span class="sh_symbol">)</span>_。
在监听函数中 `<span class="sh_keyword">this</span>` 指向当前监听函数所关联的 `EventEmitter` 对象。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>2b8a6e164096f811fa8bf664e7e472c7 <span class="sh_symbol">--&gt;</span>

## 类<span class="sh_symbol">:</span> events<span class="sh_symbol">.</span>EventEmitter

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>e645ea46cb2c41306cbe95cedc37e779 <span class="sh_symbol">--&gt;</span>

通过 `<span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'events'</span><span class="sh_symbol">).</span>EventEmitter` 获取 EventEmitter 类。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>2055e28a1e68af4b8eccb472c83c9405 <span class="sh_symbol">--&gt;</span>

当 `EventEmitter` 实例遇到错误，通常的处理方法是产生一个 `<span class="sh_string">'error'</span>` 事件，node 对错误事件做特殊处理。
如果程序没有监听错误事件，程序会按照默认行为在打印出 栈追踪信息 <span class="sh_symbol">(</span>stack trace<span class="sh_symbol">)</span> 后退出。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>ed8b0d43e3f5764e2e59d882b03e9455 <span class="sh_symbol">--&gt;</span>

EventEmitter 会在添加 listener 时触发 `<span class="sh_string">'newListener'</span>` 事件，删除 listener 时触发 `<span class="sh_string">'removeListener'</span>` 事件

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>913dcf12a24c31ab548b614f25f45423 <span class="sh_symbol">--&gt;</span>

### emitter<span class="sh_symbol">.</span><span class="sh_function">addListener</span><span class="sh_symbol">(</span>event<span class="sh_symbol">,</span> listener<span class="sh_symbol">)</span>
### emitter<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span>event<span class="sh_symbol">,</span> listener<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>a67bc20697622a368255913731414b90 <span class="sh_symbol">--&gt;</span>

添加一个 listener 至特定事件的 listener 数组尾部。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>19dcc396a5e6e364ee6fdc2ac4d9ce91 <span class="sh_symbol">--&gt;</span>

    server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>stream<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'someone connected!'</span><span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>f8a794bb5a470673ac332f06e02697b0 <span class="sh_symbol">--&gt;</span>

返回 emitter，方便链式调用。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>8337b32ac40477f65b612c80b9ff98f5 <span class="sh_symbol">--&gt;</span>

### emitter<span class="sh_symbol">.</span><span class="sh_function">once</span><span class="sh_symbol">(</span>event<span class="sh_symbol">,</span> listener<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>7bc0510dd38534106967c6989bb37f65 <span class="sh_symbol">--&gt;</span>

添加一个 <span class="sh_symbol">**</span>一次性<span class="sh_symbol">**</span> listener，这个 listener 只会在下一次事件发生时被触发一次，触发完成后就被删除。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>e2ce327df5ffc2bc634f8ad41b64736f <span class="sh_symbol">--&gt;</span>

    server<span class="sh_symbol">.</span><span class="sh_function">once</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>stream<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Ah, we have our first user!'</span><span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>f8a794bb5a470673ac332f06e02697b0 <span class="sh_symbol">--&gt;</span>

返回 emitter，方便链式调用。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>d9f647871d1a7bbb46b69321cfd81c08 <span class="sh_symbol">--&gt;</span>

### emitter<span class="sh_symbol">.</span><span class="sh_function">removeListener</span><span class="sh_symbol">(</span>event<span class="sh_symbol">,</span> listener<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>af2e0a30ab565a277fa00e119ae7822e <span class="sh_symbol">--&gt;</span>

从一个事件的 listener 数组中删除一个 listener
<span class="sh_symbol">**</span>注意<span class="sh_symbol">**</span>：此操作会改变 listener 数组中当前 listener 后的所有 listener 在的下标

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>990e0558498e767e51f7ea0c0c5cb042 <span class="sh_symbol">--&gt;</span>

    <span class="sh_keyword">var</span> callback <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>stream<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'someone connected!'</span><span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
    server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> callback<span class="sh_symbol">);</span>
    <span class="sh_comment">// ...</span>
    server<span class="sh_symbol">.</span><span class="sh_function">removeListener</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> callback<span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>f8a794bb5a470673ac332f06e02697b0 <span class="sh_symbol">--&gt;</span>

返回 emitter，方便链式调用。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>4d8352cda5b3eb935d3152752ba71c91 <span class="sh_symbol">--&gt;</span>

### emitter<span class="sh_symbol">.</span><span class="sh_function">removeAllListeners</span><span class="sh_symbol">([</span>event<span class="sh_symbol">])</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>a339aa62a2f3910e917b30c2a51f60b9 <span class="sh_symbol">--&gt;</span>

删除所有 listener，或者删除某些事件 <span class="sh_symbol">(</span>event<span class="sh_symbol">)</span> 的 listener

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>f8a794bb5a470673ac332f06e02697b0 <span class="sh_symbol">--&gt;</span>

返回 emitter，方便链式调用。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>a36c89f2ca78381d065f3bc64f63c4af <span class="sh_symbol">--&gt;</span>

### emitter<span class="sh_symbol">.</span><span class="sh_function">setMaxListeners</span><span class="sh_symbol">(</span>n<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>6144a744b6f9ee4d42048fd453b00cb8 <span class="sh_symbol">--&gt;</span>

在默认情况下，EventEmitter 会在多于 <span class="sh_number">10</span> 个 listener 监听某个事件的时候出现警告，此限制在寻找内存泄露时非常有用。
显然，也不是所有的 Emitter 事件都要被限制在 <span class="sh_number">10</span> 个 listener 以下，在这种情况下可以使用这个函数来改变这个限制。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>f8a794bb5a470673ac332f06e02697b0 <span class="sh_symbol">--&gt;</span>

返回 emitter，方便链式调用。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>3cbb5b1cdc26b98048d02ee59e200085 <span class="sh_symbol">--&gt;</span>

### EventEmitter<span class="sh_symbol">.</span>defaultMaxListeners

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>3f8697f74741fb77dc105c396c369118 <span class="sh_symbol">--&gt;</span>

`emitter<span class="sh_symbol">.</span><span class="sh_function">setMaxListeners</span><span class="sh_symbol">(</span>n<span class="sh_symbol">)</span>` 设置每个 emitter 实例的最大监听数。
这个类属性为 <span class="sh_symbol">**</span>所有<span class="sh_symbol">**</span> `EventEmitter` 实例设置最大监听数（对所有已创建的实例和今后创建的实例都将立即生效）。
使用时请注意。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>ade73e4b7792e2b08162712ddbbbf6a6 <span class="sh_symbol">--&gt;</span>

请注意，`emitter<span class="sh_symbol">.</span><span class="sh_function">setMaxListeners</span><span class="sh_symbol">(</span>n<span class="sh_symbol">)</span>` 优先于 `EventEmitter<span class="sh_symbol">.</span>defaultMaxListeners`。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>ba73b4320fe912daf900d9b75575b092 <span class="sh_symbol">--&gt;</span>

### emitter<span class="sh_symbol">.</span><span class="sh_function">listeners</span><span class="sh_symbol">(</span>event<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>f118af568a602d164a3c9bc8abd2f113 <span class="sh_symbol">--&gt;</span>

返回指定事件的 listener 数组

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>b9fc5400d3bf978204af2becda716c84 <span class="sh_symbol">--&gt;</span>

    server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>stream<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'someone connected!'</span><span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>util<span class="sh_symbol">.</span><span class="sh_function">inspect</span><span class="sh_symbol">(</span>server<span class="sh_symbol">.</span><span class="sh_function">listeners</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">)));</span> <span class="sh_comment">// [ [Function] ]</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>c7e909a1c6559cf990730664daa95727 <span class="sh_symbol">--&gt;</span>

### emitter<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span>event<span class="sh_symbol">,</span> <span class="sh_symbol">[</span>arg1<span class="sh_symbol">],</span> <span class="sh_symbol">[</span>arg2<span class="sh_symbol">],</span> <span class="sh_symbol">[...])</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>32a896a1670303a11ddf018be68a05b8 <span class="sh_symbol">--&gt;</span>

使用提供的参数按顺序执行指定事件的 listener

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>97f7fcb289631ff8b970f572f5fc23a3 <span class="sh_symbol">--&gt;</span>

若事件有 listener 则返回 `<span class="sh_keyword">true</span>` 否则返回 `<span class="sh_keyword">false</span>`。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>a6b3da0a0acb015accda9106a1ed5914 <span class="sh_symbol">--&gt;</span>

### 类方法<span class="sh_symbol">:</span> EventEmitter<span class="sh_symbol">.</span><span class="sh_function">listenerCount</span><span class="sh_symbol">(</span>emitter<span class="sh_symbol">,</span> event<span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>f5c8597bec06973f818d385f56871f57 <span class="sh_symbol">--&gt;</span>

返回指定事件的 listener 数量

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>a7c55b76049b86734b2943f83acc833f <span class="sh_symbol">--&gt;</span>

### 事件<span class="sh_symbol">:</span> <span class="sh_string">'newListener'</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>a8e2a4f5abdec4d8a52bacf1dee9f2e7 <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">*</span> `event` <span class="sh_cbracket">{</span><span class="sh_predef_func">String</span><span class="sh_cbracket">}</span> 事件名
<span class="sh_symbol">*</span> `listener` <span class="sh_cbracket">{</span><span class="sh_predef_func">Function</span><span class="sh_cbracket">}</span> 事件处理函数

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>7815a60313e081a7ba22c61f63437710 <span class="sh_symbol">--&gt;</span>

在添加 listener 时会发生该事件。
此时无法确定 `listener` 是否在 `emitter<span class="sh_symbol">.</span><span class="sh_function">listeners</span><span class="sh_symbol">(</span>event<span class="sh_symbol">)</span>` 返回的列表中。

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>689154e61bde2e8fc9df9e19d1139ec6 <span class="sh_symbol">--&gt;</span>

### 事件<span class="sh_symbol">:</span> <span class="sh_string">'removeListener'</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>a8e2a4f5abdec4d8a52bacf1dee9f2e7 <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">*</span> `event` <span class="sh_cbracket">{</span><span class="sh_predef_func">String</span><span class="sh_cbracket">}</span> 事件名
<span class="sh_symbol">*</span> `listener` <span class="sh_cbracket">{</span><span class="sh_predef_func">Function</span><span class="sh_cbracket">}</span> 事件处理函数

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>72d198d24c91e07c4927b53c4b2fa2f5 <span class="sh_symbol">--&gt;</span>

在移除 listener 时会发生该事件。
此时无法确定 `listener` 是否在 `emitter<span class="sh_symbol">.</span><span class="sh_function">listeners</span><span class="sh_symbol">(</span>event<span class="sh_symbol">)</span>` 返回的列表中。


<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>
<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>02cca00571635b304013bb0f1929d602 <span class="sh_symbol">--&gt;</span>

# 域

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>14ae3b8a1560651cf34fa2e5562e7f27 <span class="sh_symbol">--&gt;</span>

    稳定度<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> 不稳定

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>4518ebd75856bc13fa183ae778a0f8cf <span class="sh_symbol">--&gt;</span>

Domains 提供了一种方式，即以一个单一的组的形式来处理多个不同的IO操作。如果任何一个注册到domain的事件触发器或回调触发了一个‘error’事件，或者抛出一个错误，那么domain对象将会被通知到。而不是直接让这个错误的上下文从`process<span class="sh_symbol">.</span>on（<span class="sh_string">'uncaughtException'</span>）<span class="sh_string">'处理程序中丢失掉，也不会致使程序因为这个错误伴随着错误码立即退出。</span>

<span class="sh_string">&lt;!-- endsection --&gt;</span>

<span class="sh_string">&lt;!-- section:9f7e65c02ceb7847e9d1b089fd9045db --&gt;</span>

<span class="sh_string">## 警告: 不要忽视错误!</span>

<span class="sh_string">&lt;!-- endsection --&gt;</span>

<span class="sh_string">&lt;!-- type=misc --&gt;</span>

<span class="sh_string">&lt;!-- section:0e9443611b77944922566c8d53e84ffb --&gt;</span>

<span class="sh_string">Domain error处理程序不是一个在错误发生时，关闭你的进程的替代品</span>

<span class="sh_string">&lt;!-- endsection --&gt;</span>

<span class="sh_string">&lt;!-- section:d2e33c9dd4cbc57096f58347b126fd5e --&gt;</span>

<span class="sh_string">基于'</span>抛出（<span class="sh_keyword">throw</span>）<span class="sh_string">'在JavaScript中工作的方式，几乎从来没有任何方式能够在‘不泄露引用，不造成一些其他种类的未定义的脆弱状态’的前提下，安全的“从你离开的地方重新拾起（pick up where you left off）”，</span>

<span class="sh_string">&lt;!-- endsection --&gt;</span>

<span class="sh_string">&lt;!-- section:48116c9b8f54166db432d18a336ea5ed --&gt;</span>

<span class="sh_string">响应一个被抛出错误的最安全方式就是关闭进程。当然，在一个正常的Web服务器中，你可能会有很多活跃的连接。由于其他触发的错误你去突然关闭这些连接是不合理。</span>

<span class="sh_string">&lt;!-- endsection --&gt;</span>

<span class="sh_string">&lt;!-- section:31e72d6174069a5067433645717c9973 --&gt;</span>

<span class="sh_string">更好的方法是发送错误响应给那个触发错误的请求，在保证其他人正常完成工作时，停止监听那个触发错误的人的新请求。</span>

<span class="sh_string">&lt;!-- endsection --&gt;</span>

<span class="sh_string">&lt;!-- section:3bc705aac660bdeab33e0469f620025f --&gt;</span>

<span class="sh_string">在这种方式中，`域`使用伴随着集群模块，由于主过程可以叉新工人时，一个工人发生了一个错误。节点程序规模的多</span>
<span class="sh_string">机，终止代理或服务注册可以注意一下失败，并做出相应的反应。</span>

<span class="sh_string">&lt;!-- endsection --&gt;</span>

<span class="sh_string">&lt;!-- section:697acd8be310c559e6f31ebfef28a638 --&gt;</span>

<span class="sh_string">举例来说，以下就不是一个好想法：</span>

<span class="sh_string">&lt;!-- endsection --&gt;</span>

<span class="sh_string">&lt;!-- section:3b5ceef23f6efb9bf6390967ac13d044 --&gt;</span>

<span class="sh_string">var d = require('</span>domain<span class="sh_string">').create();</span>
<span class="sh_string">d.on('</span>error<span class="sh_string">', function(er) {</span>
<span class="sh_string">  // 这个错误不会导致进程崩溃，但是情况会更糟糕！</span>
<span class="sh_string">  // 虽然我们阻止了进程突然重启动，但是我们已经发生了资源泄露</span>
<span class="sh_string">  // 这种事情的发生会让我们发疯。</span>
<span class="sh_string">  // 不如调用 process.on('</span>uncaughtException<span class="sh_string">')!</span>
<span class="sh_string">  console.log('</span>error<span class="sh_symbol">,</span> but oh well<span class="sh_string">', er.message);</span>
<span class="sh_string">});</span>
<span class="sh_string">d.run(function() {</span>
<span class="sh_string">  require('</span>http<span class="sh_string">').createServer(function(req, res) {</span>
<span class="sh_string">    handleRequest(req, res);</span>
<span class="sh_string">  }).listen(PORT);</span>
<span class="sh_string">});</span></code></pre>
</div>

<div class="translate-section" data-hash="c00fe3bdad4d3b86dcb006c3a8c55c76"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>通过对域的上下文的使用，以及将我们的程序分隔成多个工作进程的反射，我们可以做出更加恰当的反应和更加安全的处理。

</p>
</div>

<div class="translate-section" data-hash="1749533625128d664ce57f327a3eb683"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 好一些的做法！</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>1002b470aa3001d212344187000af555 <span class="sh_symbol">--&gt;</span>

<span class="sh_keyword">var</span> cluster <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'cluster'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> PORT <span class="sh_symbol">=</span> <span class="sh_symbol">+</span>process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>PORT <span class="sh_symbol">||</span> <span class="sh_number">1337</span><span class="sh_symbol">;</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>2f82bd01f23b2a29fbda6b4d88878ba5 <span class="sh_symbol">--&gt;</span>

<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>isMaster<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 在工作环境中，你可能会使用到不止一个工作分支</span>
  <span class="sh_comment">// 而且可能不会把主干和分支放在同一个文件中</span>
  <span class="sh_comment">//</span>
  <span class="sh_comment">//你当然可以通过日志进行猜测，并且对你需要防止的DoS攻击等不良行为实施自定义的逻辑</span>
  <span class="sh_comment">//</span>
  <span class="sh_comment">// 看集群文件的选项</span>
  <span class="sh_comment">//</span>
  <span class="sh_comment">// 最重要的是主干非常小，增加了我们抵抗以外错误的可能性。</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>cb647d887934b4f503df68aec3e5bb82 <span class="sh_symbol">--&gt;</span>

  cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
  cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>73e4dad498a584605744c08e8889acd2 <span class="sh_symbol">--&gt;</span>

  cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'disconnect'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>worker<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'disconnect!'</span><span class="sh_symbol">);</span>
    cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>1eb9320833f0f4735c2a02437b831763 <span class="sh_symbol">--&gt;</span>

<span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 工作进程</span>
  <span class="sh_comment">//</span>
  <span class="sh_comment">// 这是我们出错的地方</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>4e5957024feac866ed9559ec321d9348 <span class="sh_symbol">--&gt;</span>

  <span class="sh_keyword">var</span> domain <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'domain'</span><span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>3eb2409b6e7d143f8eea5a1e547278b1 <span class="sh_symbol">--&gt;</span>

  <span class="sh_comment">//看集群文件对于使用工作进程处理请求的更多细节，它是如何工作的，它的警告等等。</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>dd3bdd23463afb9f443cd297ec716fb5 <span class="sh_symbol">--&gt;</span>

  <span class="sh_keyword">var</span> server <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">).</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">var</span> d <span class="sh_symbol">=</span> domain<span class="sh_symbol">.</span><span class="sh_function">create</span><span class="sh_symbol">();</span>
    d<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> er<span class="sh_symbol">.</span>stack<span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>e614fa9e1583991a0d9b352d554182ba <span class="sh_symbol">--&gt;</span>

    <span class="sh_comment">// 因为req和res在这个域存在之前就被创建，</span>
    <span class="sh_comment">// 所以我们需要显式添加它们。</span>
    <span class="sh_comment">// 详见下面关于显式和隐式绑定的解释。</span>
    d<span class="sh_symbol">.</span><span class="sh_function">add</span><span class="sh_symbol">(</span>req<span class="sh_symbol">);</span>
    d<span class="sh_symbol">.</span><span class="sh_function">add</span><span class="sh_symbol">(</span>res<span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>ec427556232abea87deeffa7ae5a5830 <span class="sh_symbol">--&gt;</span>

    <span class="sh_comment">// 现在在域里面运行处理器函数。</span>
    d<span class="sh_symbol">.</span><span class="sh_function">run</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
      <span class="sh_function">handleRequest</span><span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span>PORT<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>8792f2c8a87d64cd7a3893d4f03b9c89 <span class="sh_symbol">--&gt;</span>

    <span class="sh_comment">// 这个部分不是很重要。只是一个简单的路由例子。</span>
    <span class="sh_comment">// 你会想把你的超级给力的应用逻辑放在这里。</span>
    <span class="sh_keyword">function</span> <span class="sh_function">handleRequest</span><span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">switch</span><span class="sh_symbol">(</span>req<span class="sh_symbol">.</span>url<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
        <span class="sh_keyword">case</span> <span class="sh_string">'/error'</span><span class="sh_symbol">:</span>
          <span class="sh_comment">// 我们干了一些异步的东西，然后。。。</span>
          <span class="sh_function">setTimeout</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
            <span class="sh_comment">// 呃。。。</span>
            flerb<span class="sh_symbol">.</span><span class="sh_function">bark</span><span class="sh_symbol">();</span>
          <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
          <span class="sh_keyword">break</span><span class="sh_symbol">;</span>
        <span class="sh_keyword">default</span><span class="sh_symbol">:</span>
          res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'ok'</span><span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span>
    <span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="2ba1d22539f91150d8cbee9acfa5c346"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>对Error(错误)对象的内容添加<span><a href="#all_error_9856" id="all_error_9856">#</a></span></h2>
</div>

<!-- type=misc -->

<div class="translate-section" data-hash="9be72a5668ad058b5ad924d1e621a076"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>每一次一个Error对象被导向经过一个域，它会添加几个新的字段。

</p>
</div>

<div class="translate-section" data-hash="e323c97ee3c31022fc417710702133c1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>error.domain</code> 第一个处理这个错误的域。</li>
<li><code>error.domainEmitter</code> 用这个错误对象触发'error'事件的事件分发器。</li>
<li><code>error.domainBound</code> 回调函数，该回调函数被绑定到域，并且一个错误会作为第一参数传递给这个回调函数。</li>
<li><code>error.domainThrown</code> 一个布尔值表明这个错误是否被抛出，分发或者传递给一个绑定的回调函数。</li>
</ul>
</div>

<div class="translate-section" data-hash="1f1c06884feee02f47aa40d89c737d21"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>隐式绑定<span><a href="#all_70408" id="all_70408">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="98204cb7669529ab02fae399ab30e0ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果多个域正在被使用，那么所有的<strong>新</strong>EventEmitter对象（包括Stream对象，请求，应答等等）会被隐式绑定到它们被创建时的有效域。

</p>
</div>

<div class="translate-section" data-hash="5dac1fd1e174e84f50ea01c009fe2b5f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>而且，被传递到低层事件分发请求的回调函数（例如fs.open，或者其它接受回调函数的函数）会自动绑定到有效域。如果这些回调函数抛出错误，那么这个域会捕捉到这个错误。

</p>
</div>

<div class="translate-section" data-hash="ca0784d2572514b17bc521fb51af3bf5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>为了防止内存的过度使用，Domain对象自己不会作为有效域的子对象被隐式添加到有效域。因为如果这样做的话，会很容易影响到请求和应答对象的正常垃圾回收。

</p>
</div>

<div class="translate-section" data-hash="4558bbd521aafe97106762e353ef47ed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果你<em>想</em>在一个父Domain对象里嵌套子Domain对象，那么你需要显式地添加它们。

</p>
</div>

<div class="translate-section" data-hash="b3b67bdb5e1f2ab3bcf3c6464fd3d509"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>隐式绑定将被抛出的错误和<code>'error'</code>事件导向到Domain对象的<code>error</code>事件，但不会注册到Domain对象上的EventEmitter对象，所以<code>domain.dispose()</code>不会令EventEmitter对象停止运作。隐式绑定只关心被抛出的错误和 <code>'error'</code>事件。

</p>
</div>

<div class="translate-section" data-hash="aff225bd9e1f616da920940f466d3adc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>显式绑定<span><a href="#all_70409" id="all_70409">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="f03595da674aa2a3fff58efcbcfde955"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>有时，正在使用的域并不是某个事件分发器所应属的域。又或者，事件分发器在一个域内被创建，但是应该被绑定到另一个域。

</p>
</div>

<div class="translate-section" data-hash="68b518ea7f7da0e7973f96e8f1dc59c8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例如，对于一个HTTP服务器，可以有一个正在使用的域，但我们可能希望对每一个请求使用一个不同的域。

</p>
</div>

<div class="translate-section" data-hash="650459a148e19dbda0b9077972207243"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这可以通过显示绑定来达到。

</p>
</div>

<div class="translate-section" data-hash="506c2c0c7f5b70af3df68c45c46f45a7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例如：

</p>
</div>

<div class="translate-section" data-hash="87c6c9012a9094cf7e37746bad59828f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>serverDomain<span class="sh_symbol">.</span><span class="sh_function">run</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 服务器在serverDomain的作用域内被创建</span>
  http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// req和res同样在serverDomain的作用域内被创建</span>
    <span class="sh_comment">// 但是，我们想对于每一个请求使用一个不一样的域。</span>
    <span class="sh_comment">// 所以我们首先创建一个域，然后将req和res添加到这个域上。</span>
    <span class="sh_keyword">var</span> reqd <span class="sh_symbol">=</span> domain<span class="sh_symbol">.</span><span class="sh_function">create</span><span class="sh_symbol">();</span>
    reqd<span class="sh_symbol">.</span><span class="sh_function">add</span><span class="sh_symbol">(</span>req<span class="sh_symbol">);</span>
    reqd<span class="sh_symbol">.</span><span class="sh_function">add</span><span class="sh_symbol">(</span>res<span class="sh_symbol">);</span>
    reqd<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'Error'</span><span class="sh_symbol">,</span> er<span class="sh_symbol">,</span> req<span class="sh_symbol">.</span>url<span class="sh_symbol">);</span>
      <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
        res<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">500</span><span class="sh_symbol">);</span>
        res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'Error occurred, sorry.'</span><span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
        console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'Error sending 500'</span><span class="sh_symbol">,</span> er<span class="sh_symbol">,</span> req<span class="sh_symbol">.</span>url<span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">);</span>    
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
```</code></pre>
</div>

<div class="translate-section" data-hash="377ec28b7929bf46d98b3ee7de8da0f8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>domain.create()<span><a href="#all_domain_create_1408" id="all_domain_create_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="fe5a36137aa2fef064450887f67719e2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>return: {Domain}</li>
</ul>
</div>

<div class="translate-section" data-hash="11251416cbdba2c005e2fdc23940c97c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个新的Domain对象。

</p>
</div>

<div class="translate-section" data-hash="1ef2a8646e2b0c1453616384d2c2b02f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: Domain<span><a href="#all_domain_1408" id="all_domain_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b2db30eb1dc0a78c5269bf1f91f2ddc3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Domain类封装了将错误和没有被捕捉的异常导向到有效对象的功能。

</p>
</div>

<div class="translate-section" data-hash="6593a0d60283ffa945f933f0cba754bd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Domain是 <a href="http://nodeapi.ucdok.com/api/events.html#events_class_events_eventemitter">EventEmitter</a>类的一个子类。监听它的<code>error</code>事件来处理它捕捉到的错误。

</p>
</div>

<div class="translate-section" data-hash="dd31240e5a7ba9da2c5294690f5c9799"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>domain.run(fn)<span><a href="#all_domain_run_fn_1408" id="all_domain_run_fn_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="b5ab910e8244a617af74aff6ada292b0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>fn</code> {Function}</li>
</ul>
</div>

<div class="translate-section" data-hash="359cb576d464c1284f6927d1dc5c4f07"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在域的上下文里运行提供的函数，隐式地绑定所有该上下文里创建的事件分发器，计时器和低层请求。

</p>
</div>

<div class="translate-section" data-hash="be5fcc18fabc06e1e1657a1654b98379"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是使用一个域的最基本的方式。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="67d1177693bf8b9111a2e239af88ee60"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> d <span class="sh_symbol">=</span> domain<span class="sh_symbol">.</span><span class="sh_function">create</span><span class="sh_symbol">();</span>
d<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'Caught error!'</span><span class="sh_symbol">,</span> er<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
d<span class="sh_symbol">.</span><span class="sh_function">run</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  process<span class="sh_symbol">.</span><span class="sh_function">nextTick</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    <span class="sh_function">setTimeout</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span> <span class="sh_comment">// 模拟几个不同的异步的东西</span>
      fs<span class="sh_symbol">.</span><span class="sh_function">open</span><span class="sh_symbol">(</span><span class="sh_string">'non-existent file'</span><span class="sh_symbol">,</span> <span class="sh_string">'r'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>er<span class="sh_symbol">,</span> fd<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
        <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> er<span class="sh_symbol">;</span>
        <span class="sh_comment">// 继续。。。</span>
      <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">100</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="6c237a25cfa7701779036f0391f523cf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在这个例子里， <code>d.on('error')</code> 处理器会被触发，而不是导致程序崩溃。

</p>
</div>

<div class="translate-section" data-hash="5e0a823fb76f4401513ad0621aeb1a99"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>domain.members<span><a href="#all_domain_members_1408" id="all_domain_members_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="da988593f493b305c0e8d1e200e041c4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Array}</li>
</ul>
</div>

<div class="translate-section" data-hash="686ace803edf248d64029d99facc6b1a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个数组，里面的元素是被显式添加到域里的计时器和事件分发器。

</p>
</div>

<div class="translate-section" data-hash="9784a910a37bca98cae641f0083a4f02"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>domain.add(emitter)<span><a href="#all_domain_add_emitter_1408" id="all_domain_add_emitter_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="6bc3b39d7a33fef945ea0c098c460829"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>emitter</code> {EventEmitter | Timer} 被添加到域里的时间分发器或计时器</li>
</ul>
</div>

<div class="translate-section" data-hash="7cdb670833b897428c6c913dbc2784f3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>显式地将一个分发器添加到域。如果这个分发器调用的任意一个事件处理器抛出一个错误，或是这个分发器分发了一个<code>error</code>事，那么它会被导向到这个域的<code>error</code>事件，就像隐式绑定所做的一样。

</p>
</div>

<div class="translate-section" data-hash="2f79dc18affd0c5bf1452fa21ff190ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这对于从<code>setInterval</code>和<code>setTimeout</code>返回的计时器同样适用。如果这些计时器的回调函数抛出错误，它将会被这个域的<code>error</code>处理器捕捉到。

</p>
</div>

<div class="translate-section" data-hash="8284eecba7860093ee169ecc6e94d239"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果这个Timer或EventEmitter对象已经被绑定到另外一个域，那么它将会从那个域被移除，然后绑定到当前的域。

</p>
</div>

<div class="translate-section" data-hash="9484273a4a36baa279f52f6d714fe716"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>domain.remove(emitter)<span><a href="#all_domain_remove_emitter_1408" id="all_domain_remove_emitter_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="4fcd7597529011cf55cc89c89f8f8a83"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>emitter</code> {EventEmitter | Timer} 要从域里被移除的分发器或计时器</li>
</ul>
</div>

<div class="translate-section" data-hash="996999db3f818534856cd51565dee5f1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>与<code>domain.add(emitter)</code>函数恰恰相反，这个函数将域处理从指明的分发器里移除。

</p>
</div>

<div class="translate-section" data-hash="2e6b4d734d494f2d5b37cf1bb6ab6cdd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>domain.bind(callback)<span><a href="#all_domain_bind_callback_1408" id="all_domain_bind_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="9f1fe1b00f5dcc5436d12215a72ff025"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>callback</code> {Function} 回调函数</li>
<li>return: {Function} 被绑定的函数</li>
</ul>
</div>

<div class="translate-section" data-hash="e3c7108af2a21c27c006df64df0f1268"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回的函数会是一个对于所提供的回调函数的包装函数。当这个被返回的函数被调用时，所有被抛出的错误都会被导向到这个域的<code>error</code>事件。

</p>
</div>

<div class="translate-section" data-hash="0d7592e22a9740a33e30f517f476ebb9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>例子<span><a href="#all_70410" id="all_70410">#</a></span></h4>
</div>

<div class="translate-section" data-hash="82e5af0bbac777ea0f78400ba759a4fb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>d<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 有个地方发生了一个错误。</span>
  <span class="sh_comment">// 如果我们现在抛出这个错误，它会让整个程序崩溃</span>
  <span class="sh_comment">// 并给出行号和栈信息。</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="d760cee1417aa31ed1a640282afe5537"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>domain.intercept(callback)<span><a href="#all_domain_intercept_callback_1408" id="all_domain_intercept_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="15bc26c472072a403d639e5a9eacd48a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>callback</code> {Function} 回调函数</li>
<li>return: {Function} 被拦截的函数</li>
</ul>
</div>

<div class="translate-section" data-hash="150ee58532d7a6bdd44288a3579cccb7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个函数与<code>domain.bind(callback)</code>几乎一模一样。但是，除了捕捉被抛出的错误外，它还会拦截作为第一参数被传递到这个函数的<code>Error</code>对象。

</p>
</div>

<div class="translate-section" data-hash="3de54f51f66d21f0150ed66612e30db5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在这种方式下，常见的'if(er) return callback(er);'的方式可以被一个单独地方的单独的错误处理所取代。

</p>
</div>

<div class="translate-section" data-hash="0d7592e22a9740a33e30f517f476ebb9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>例子<span><a href="#all_70411" id="all_70411">#</a></span></h4>
</div>

<div class="translate-section" data-hash="82e5af0bbac777ea0f78400ba759a4fb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>d<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 有个地方发生了一个错误。</span>
  <span class="sh_comment">// 如果我们现在抛出这个错误，它会让整个程序崩溃</span>
  <span class="sh_comment">// 并给出行号和栈信息。</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="96e9f23d2963452708a111413212b7b0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>domain.enter()<span><a href="#all_domain_enter_1408" id="all_domain_enter_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="939be1353d5589f7603f8a4322b2cdcd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>enter</code>函数对于<code>run</code>，<code>bind</code>和<code>intercept</code>来说就像它们的管道系统：它们使用<code>enter</code>函数来设置有效域。<code>enter</code>函数对于域设定了<code>domain.active</code>和 <code>process.domain</code>
，还隐式地将域推入了由域模块管理的域栈（关于域栈的细节详见<code>domain.exit()</code>）。<code>enter</code>函数的调用，分隔了异步调用链以及绑定到一个域的I/O操作的结束或中断。

</p>
</div>

<div class="translate-section" data-hash="82a76791963a2eba5fb3e7850ad8379a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>调用<code>enter</code>仅仅改变活动的域，而不改变域本身。
<code>Enter</code> 和 <code>exit</code>在一个单独的域可以被调用任意多次。

</p>
</div>

<div class="translate-section" data-hash="2b6570c84523cc71c54b20aeb4133e52"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果域的<code>enter</code>已经设置，<code>enter</code>将不设置域就返回。

</p>
</div>

<div class="translate-section" data-hash="b5dad78a6027862ce2987d5bd6f1fdc3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>domain.exit()<span><a href="#all_domain_exit_1408" id="all_domain_exit_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="21a50c8a3268fd6ebb5479e8f71c799a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>exit</code>函数退出当前的域，将当前域从域的栈里移除。每当当程序的执行流程准要切换到一个不同的异步调用链的上下文时，要保证退出当前的域。<code>exit</code>函数的调用，分隔了异步调用链以及绑定到一个域的I/O操作的结束或中断。


</p>
</div>

<div class="translate-section" data-hash="82e4ab2dffeb19245d9ace72bb755fee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果有多个嵌套的域绑定到当前的执行上下文，
<code>退出</code>将退出在这个域里的所有的嵌套。

</p>
</div>

<div class="translate-section" data-hash="48c8839c66b3ed4b5ce0104a03aa4cec"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>调用<code>exit</code>只会改变有效域，而不会改变域自身。在一个单一域上，<code>Enter</code>和<code>exit</code>可以被调用任意次。

</p>
</div>

<div class="translate-section" data-hash="01f107e0a9db2ebe61f8f68bedca7b2a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果在这个域名下<code>exit </code>已经被设置，<code>exit </code>将不退出域返回。

</p>
</div>

<div class="translate-section" data-hash="e6e28b09e96c1b7e9fea0ea8b0ba669d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>domain.dispose()<span><a href="#all_domain_dispose_1408" id="all_domain_dispose_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="1685ae170cabba71590ec4d8e306d691"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> 已过时。请通过设置在域上的错误事件处理器，显式地东失败的IO操作中恢复。</code></pre>
</div>

<div class="translate-section" data-hash="40376032040e0f5516c09961eb69326f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一旦<code>dispose</code>被调用，通过<code>run</code>，<code>bind</code>或<code>intercept</code>绑定到这个域的回调函数将不再使用这个域，并且一个<code>dispose</code>事件会被分发。

</p>
</div>

<div class="translate-section" data-hash="6949f457689f76a715805ad76aa0f835"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

</div>
<div class="translate-section" data-hash="86e09a05fbbccb8fff7fcdfdb2d177ed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>Buffer<span><a href="#all_buffer_4225" id="all_buffer_4225">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<div class="translate-section" data-hash="ce594b668cebafbc972b509dd28eeab3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>纯 JavaScript 对 Unicode 友好但是无法很好地处理二进制数据。当我们面对类似 TCP 流或文件系统时，是需要处理八位流的。Node 有几种操作、创建以及消费八位流的策略。

</p>
</div>

<div class="translate-section" data-hash="da155089d08554fefb471542011a9aee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>原始数据保存在 <code>Buffer</code> 类的实例中。一个 <code>Buffer</code> 实例类似于一个整数数组，但对应者 V8 堆之外的一个原始内存分配区域。一个 <code>Buffer</code> 的大小不可变。

</p>
</div>

<div class="translate-section" data-hash="3f8dc18639c8ce8d03b7e61887709bc8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>Buffer</code> 类是一个全局的类，所以它很罕有地不需要<code>require</code>语句就可以调用。

</p>
</div>

<div class="translate-section" data-hash="4c72fbb4715df8acbd8991f56b08cd0a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在Buffers和JavaScript string转换时，需要明确的一个编码方法。下面是一些不同的string编码。

</p>
</div>

<div class="translate-section" data-hash="0e4ebfbdf8e9b0e532a5e72ff4c9ffb1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'ascii'</code> - 仅适用 7 bit ASCII 格式数据。这个编码方式非常快速，而且会剥离设置过高的bit。</li>
</ul>
</div>

<div class="translate-section" data-hash="50cf0c6a2b7cd4c01d7ada1fd5280b63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'utf8'</code> - 多字节编码 Unicode字符。很多网页或者其他文档的编码格式都是使用 UTF-8的。</li>
</ul>
</div>

<div class="translate-section" data-hash="cc8577f010dff17fd5779a77a6ebd607"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'utf16le'</code> - 2 或者 4 字节, Little Endian (LE)  编码Unicode字符。
代理对 (U+10000 to U+10FFFF) 
是支持的.（BE和LE表示大端和小端，Little-Endian就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端；Big-
Endian就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端；下同）</li>
</ul>
</div>

<div class="translate-section" data-hash="c054313841ec7fc6c6181aadb1345eae"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'ucs2'</code> -  <code>'utf16le'</code>的别名.</li>
</ul>
</div>

<div class="translate-section" data-hash="25dcf0dad0f5ba3e70126f4f337b6083"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'base64'</code> - Base64 字符串编码。</li>
</ul>
</div>

<div class="translate-section" data-hash="5e6016d7cae875f9f026f801614f3ebd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'binary'</code> - 一个将原始2进制数据编码为字符串的方法，仅使用每个字符的前8bits。 这个编码方式已经被弃用而且应该被避免，尽可能的使用<code>Buffer</code>对象。这个编码方式将会在未来的Node版本中移除。</li>
</ul>
</div>

<div class="translate-section" data-hash="8c847237232858f7767933247a3e4e9f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'hex'</code> - 把每个byte编码成2个十六进制字符</li>
</ul>
</div>

<div class="translate-section" data-hash="035108074901bbc3add526701a3de715"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: Buffer<span><a href="#all_buffer_4226" id="all_buffer_4226">#</a></span></h2>
</div>

<div class="translate-section" data-hash="361ebfec92e4a9be72740b06860bd694"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Buffer 类是一个全局变量类型，用来直接处理2进制数据的。
它能够使用多种方式构建。

</p>
</div>

<div class="translate-section" data-hash="1cddfd45f6a4969151d77d0ca5d39441"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>new Buffer(size)<span><a href="#all_new_buffer_size_1408" id="all_new_buffer_size_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="0fb1f6863b17f019d0d8dc0337d0327f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>size</code> Number</li>
</ul>
</div>

<div class="translate-section" data-hash="d0414260239da9716198c98e01ed0ef0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>分配一个新的 buffer 大小是 <code>size</code> 的8位字节.

</p>
</div>

<div class="translate-section" data-hash="8173aa892a699174c4730092356becbb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>new Buffer(array)<span><a href="#all_new_buffer_array_1408" id="all_new_buffer_array_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c3f06d965904031c1710e1be3cce3a71"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>array</code> Array</li>
</ul>
</div>

<div class="translate-section" data-hash="b46655a24e69fc12986fab63851d36d0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>分配一个新的 buffer 使用一个8位字节 <code>array</code> 数组.

</p>
</div>

<div class="translate-section" data-hash="5e9158a325cae64d7c6b128e69c73f48"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>new Buffer(str, [encoding])<span><a href="#all_new_buffer_str_encoding_1408" id="all_new_buffer_str_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a51b22df077064cfd1d411117a7cbfdb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>str</code> String类型 - 需要存入buffer的string字符串.</li>
<li><code>encoding</code> String类型 - 使用什么编码方式，参数可选.</li>
</ul>
</div>

<div class="translate-section" data-hash="30e93aaddf4abfac2ad4bcb19510e2d5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>分配一个新的 buffer ，其中包含着给定的 <code>str</code>字符串.
<code>encoding</code> 编码方式默认是：<code>'utf8'</code>.

</p>
</div>

<div class="translate-section" data-hash="35a600937b30342eab25a963ba6e69c8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>类方法: Buffer.isEncoding(encoding)<span><a href="#all_buffer_isencoding_encoding_1408" id="all_buffer_isencoding_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="918283dbec9cf95fc2971cf3e7e143ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>encoding</code> {String} 用来测试给定的编码字符串</li>
</ul>
</div>

<div class="translate-section" data-hash="5054112b9886dbc78e17f626784ddc5e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果给定的编码 <code>encoding</code> 是有效的，返回 true，否则返回 false。

</p>
</div>

<div class="translate-section" data-hash="10bea58893cfc414d197df6205f2b40b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>类方法: Buffer.isBuffer(obj)<span><a href="#all_buffer_isbuffer_obj_1408" id="all_buffer_isbuffer_obj_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="75fb1467b03eb975385225df14d8d7f3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>obj</code> Object</li>
<li>返回: Boolean</li>
</ul>
</div>

<div class="translate-section" data-hash="f81ff17fc9c5f58e53ad688d7109a617"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>测试这个 <code>obj</code> 是否是一个 <code>Buffer</code>.

</p>
</div>

<div class="translate-section" data-hash="f15e65deaf6cea9bc45ce8e983c30d50"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>类方法: Buffer.byteLength(string, [encoding])<span><a href="#all_buffer_bytelength_string_encoding_1408" id="all_buffer_bytelength_string_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="4761408a856f89e6c5c1a6b148ecc7e0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>string</code> String类型</li>
<li><code>encoding</code> String类型, 可选参数, 默认是: 'utf8'</li>
<li>Return: Number类型</li>
</ul>
</div>

<div class="translate-section" data-hash="d6f7b29324f10729e9aee31c54a2f90e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>将会返回这个字符串真实byte长度。 <code>encoding</code> 编码默认是： <code>'utf8'</code>.
这个和 <code>String.prototype.length</code> 是不一样的，因为那个方法返回这个字符串中有几个字符的数量。
（译者：当用户在写http响应头Cotent-Length的时候，千万记得一定要用 <code>Buffer.byteLength</code> 方法，不要使用 <code>String.prototype.length</code> ）

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="65319ccc16919675f7a095e87c3ebfc6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// ½ + ¼ = ¾: 9 characters, 12 bytes</span></code></pre>
</div>

<div class="translate-section" data-hash="80c24309692613bb67e1a90338fe8cee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>类方法: Buffer.concat(list, [totalLength])<span><a href="#all_buffer_concat_list_totallength_1408" id="all_buffer_concat_list_totallength_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3ed8ca6e9dbe28223dbf7d3271a8753e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>list</code> {Array}数组类型，Buffer数组，用于被连接。</li>
<li><code>totalLength</code> {Number}类型 上述Buffer数组的所有Buffer的总大小。（译者：注意这里的totalLength不是数组长度是数组里Buffer实例的大小总和）</li>
</ul>
</div>

<div class="translate-section" data-hash="03c7074095c5038cfb2463fdf49b9f82"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个保存着将传入buffer数组中所有buffer对象拼接在一起的buffer对象。（译者：有点拗口，其实就是将数组中所有的buffer实例通过复制拼接在一起）

</p>
</div>

<div class="translate-section" data-hash="f03d348c1cb11a9b41e55639dd558fb6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果传入的数组没有内容，或者 totalLength 参数是0，那将返回一个zero-length的buffer。

</p>
</div>

<div class="translate-section" data-hash="bf6e0221904c0f75977b541754de5d06"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果数组中只有一项，那么这第一项就会被返回。

</p>
</div>

<div class="translate-section" data-hash="ab26439f204ce02588ae8340a8ae47b7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果数组中的项多于一个，那么一个新的Buffer实例将被创建。

</p>
</div>

<div class="translate-section" data-hash="4716ef04d39bffe47b12fc86b9821c53"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果 totalLength 参数没有提供，虽然会从buffer数组中计算读取，但是会增加一个额外的循环来计算它，所以提供一个明确的 totalLength  参数将会更快。

</p>
</div>

<div class="translate-section" data-hash="79e8ea9a5f58da789dd05f6a13677e53"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.length<span><a href="#all_buf_length_1408" id="all_buf_length_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="05d67e48923bfad369281e0f3f72c1fe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>Number类型</li>
</ul>
</div>

<div class="translate-section" data-hash="907ecea4ed7d1f4bd19f0e13fbe96e98"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个buffer的bytes大小。注意这未必是这buffer里面内容的大小。<code>length</code> 的依据是buffer对象所分配的内存数值，它不会随着这个buffer对象内容的改变而改变。

</p>
</div>

<div class="translate-section" data-hash="ae3e587d039d0e89e0c516d6fd7a8d61"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 1234</span>
<span class="sh_comment">// 1234</span></code></pre>
</div>

<div class="translate-section" data-hash="751be4b0d26d94b055b6ab9c3a3f94f5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.write(string, [offset], [length], [encoding])<span><a href="#all_buf_write_string_offset_length_encoding_1408" id="all_buf_write_string_offset_length_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="10057a2f4f84e4399592903557b9746e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>string</code> String类型 - 将要被写入 buffer 的数据</li>
<li><code>offset</code> Number类型, 可选参数, 默认: 0</li>
<li><code>length</code> Number类型, 可选参数, 默认: <code>buffer.length - offset</code></li>
<li><code>encoding</code> String类型, 可选参数, 默认: 'utf8'</li>
</ul>
</div>

<div class="translate-section" data-hash="d63b351efc83a99e84965394f48ced83"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据参数 <code>offset</code> 偏移量和指定的<code>encoding</code>编码方式，将参数 <code>string</code> 数据写入buffer。
<code>offset</code>偏移量 默认是 <code>0</code>, <code>encoding</code>编码方式默认是 <code>'utf8'</code>。 
<code>length</code>长度是将要写入的字符串的bytes大小。
返回number类型，表示多少8位字节流被写入了。如果<code>buffer</code> 没有足够的空间来放入整个string，它将只会写入部分的字符串。
<code>length</code> 默认是 <code>buffer.length - offset</code>。
这个方法不会出现写入部分字符。


</p>
</div>

<div class="translate-section" data-hash="b7322aa4c7ddf42205d35926238b4aa6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>buf <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span><span class="sh_number">256</span><span class="sh_symbol">);</span>
len <span class="sh_symbol">=</span> buf<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'</span><span class="sh_specialchar">\u</span><span class="sh_string">00bd + </span><span class="sh_specialchar">\u</span><span class="sh_string">00bc = </span><span class="sh_specialchar">\u</span><span class="sh_string">00be'</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>len <span class="sh_symbol">+</span> <span class="sh_string">" bytes: "</span> <span class="sh_symbol">+</span> buf<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> len<span class="sh_symbol">));</span></code></pre>
</div>

<div class="translate-section" data-hash="678c06c2cbff5d09696d63d12e4315a3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.toString([encoding], [start], [end])<span><a href="#all_buf_tostring_encoding_start_end_1408" id="all_buf_tostring_encoding_start_end_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d27e9b220b0e1366315f011f58cc7ff6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>encoding</code> String类型, 可选参数, 默认: 'utf8'</li>
<li><code>start</code> Number类型, 可选参数, 默认: 0</li>
<li><code>end</code> Number类型, 可选参数, 默认: <code>buffer.length</code></li>
</ul>
</div>

<div class="translate-section" data-hash="8edcc82a0fc352feed1a79f0b55b87a7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据 <code>encoding</code>参数（默认是 <code>'utf8'</code>）返回一个解码的 string 类型。还会根据传入的参数 <code>start</code> (默认是<code>0</code>) 和 <code>end</code> (默认是 <code>buffer.length</code>)作为取值范围。

</p>
</div>

<div class="translate-section" data-hash="564253146b4c34c0f2778c7a728042bb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>查看上面<code>buffer.write()</code> 的例子.

</p>
</div>

<div class="translate-section" data-hash="d4bd3efd1fe30a762f24d46011fe6982"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.toJSON()<span><a href="#all_buf_tojson_1408" id="all_buf_tojson_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="213c37b1cb5dd951f54e1ad090deebcc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个 JSON表示的Buffer实例。<code>JSON.stringify</code>将会默认调用来字符串序列化这个Buffer实例。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="3948a3e3a293d36e6adf682dc4904902"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>copy<span class="sh_symbol">);</span>
<span class="sh_comment">// &lt;Buffer 74 65 73 74&gt;</span></code></pre>
</div>

<div class="translate-section" data-hash="e819eb4f82585200c7cbd0dbdb4c8dad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf[index]<span><a href="#all_buf_index_1408" id="all_buf_index_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c0c76345b55547f9526691fa8cecb4bc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<!--type=property-->
<!--name=[index]-->

</div>

<div class="translate-section" data-hash="2b1fd3e94ddb1f6e8e8720e0acb6ea8b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>获取或者设置在指定<code>index</code>索引位置的8位字节。这个值是指单个字节，所以这个值必须在合法的范围，16进制的<code>0x00</code> 到<code>0xFF</code>，或者<code>0</code> 到<code>255</code>。

</p>
</div>

<div class="translate-section" data-hash="b2560e68dc560e97eee57a133ee200cf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例子: 拷贝一个 ASCII 编码的 string 字符串到一个 buffer, 一次一个 byte 进行拷贝:

</p>
</div>

<div class="translate-section" data-hash="50fe1f1ecaffca8c307dffee0fe4a394"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// node.js</span></code></pre>
</div>

<div class="translate-section" data-hash="e5093bd288735044105bf5ef6f7323c7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])<span><a href="#all_buf_copy_targetbuffer_targetstart_sourcestart_sourceend_1408" id="all_buf_copy_targetbuffer_targetstart_sourcestart_sourceend_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="9fce2dcaaa7a373e6abf36566ddb40eb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>targetBuffer</code> Buffer 类型对象 - 将要进行拷贝的Buffer</li>
<li><code>targetStart</code> Number类型, 可选参数, 默认: 0</li>
<li><code>sourceStart</code> Number类型, 可选参数, 默认: 0</li>
<li><code>sourceEnd</code> Number类型, 可选参数, 默认: <code>buffer.length</code></li>
</ul>
</div>

<div class="translate-section" data-hash="824e4b7cca51ca070a2364db87ca1a3c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>进行buffer的拷贝，源和目标可以是重叠的。
<code>targetStart</code> 目标开始偏移 和<code>sourceStart</code>源开始偏移 默认都是 <code>0</code>.
<code>sourceEnd</code> 源结束位置偏移默认是源的长度 <code>buffer.length</code>.

</p>
</div>

<div class="translate-section" data-hash="d4c1552cc5ff4859c4475c1115ff8673"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果传递的值是<code>undefined</code>/<code>NaN</code> 或者是 out of bounds 超越边界的，就将设置为他们的默认值。（译者：这个默认值下面有的例子有说明）

</p>
</div>

<div class="translate-section" data-hash="8b729c34da62a294253ce19e87dde563"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例子: 创建2个Buffer，然后把将<code>buf1</code>的16位到19位 拷贝到 <code>buf2</code>中，并且从<code>buf2</code>的第8位开始拷贝。

</p>
</div>

<div class="translate-section" data-hash="f02b92d78a44fb2b4a355ea95c07ee11"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// !!!!!!!!qrst!!!!!!!!!!!!!</span></code></pre>
</div>

<div class="translate-section" data-hash="84052b81728d8fa26334b5c3ff68c879"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.slice([start], [end])<span><a href="#all_buf_slice_start_end_1408" id="all_buf_slice_start_end_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="5f5a7df97ba346d012f84de51e5a43f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>start</code> Number类型, 可选参数, 默认: 0</li>
<li><code>end</code> Number类型, 可选参数, 默认: <code>buffer.length</code></li>
</ul>
</div>

<div class="translate-section" data-hash="22360a840a32256c7e71494875bfd007"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个新的buffer，这个buffer将会和老的buffer引用相同的内存地址，只是根据 <code> start</code> (默认是 <code>0</code>) 和<code>end</code> (默认是<code>buffer.length</code>)  偏移和裁剪了索引。
负的索引是从buffer尾部开始计算的。

</p>
</div>

<div class="translate-section" data-hash="8d73fc6d1542699965941e8c0d5ac4a5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><strong>修改这个新的buffer实例slice切片，也会改变原来的buffer</strong>

</p>
</div>

<div class="translate-section" data-hash="0a9b4f58fc181166defd8048d5358760"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例子: 创建一个ASCII 字母的 Buffer，对它slice切片，然后修改源Buffer上的一个byte。

</p>
</div>

<div class="translate-section" data-hash="7bfc008e4c8522b868ef974b8d4329d0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// abc</span>
<span class="sh_comment">// !bc</span></code></pre>
</div>

<div class="translate-section" data-hash="08620b2f4f78b786e4f051ce1ec389eb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.readUInt8(offset, [noAssert])<span><a href="#all_buf_readuint8_offset_noassert_1408" id="all_buf_readuint8_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="274c3233c8756915aa320194af9cd46a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
<li>Return: Number类型</li>
</ul>
</div>

<div class="translate-section" data-hash="320093fe5ba93ed84ab3f92b26e17238"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>从这个buffer对象里，根据指定的偏移量，读取一个 unsigned 8 bit integer整形。 

</p>
</div>

<div class="translate-section" data-hash="e9074489222cc3ce8a7496e79cbfe046"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>offset</code>偏移量参数。
这意味着 <code>offset</code>可能会超出buffer的末尾。默认是 <code>false</code>。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="d6966950a00798f96a2b486bda77bb1b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 0x3</span>
<span class="sh_comment">// 0x4</span>
<span class="sh_comment">// 0x23</span>
<span class="sh_comment">// 0x42</span></code></pre>
</div>

<div class="translate-section" data-hash="e11bd8a7d335ed3e5f407d5f377c189e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.readUInt16LE(offset, [noAssert])<span><a href="#all_buf_readuint16le_offset_noassert_1408" id="all_buf_readuint16le_offset_noassert_1408">#</a></span></h3>
<h3>buf.readUInt16BE(offset, [noAssert])<span><a href="#all_buf_readuint16be_offset_noassert_1408" id="all_buf_readuint16be_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="274c3233c8756915aa320194af9cd46a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
<li>Return: Number类型</li>
</ul>
</div>

<div class="translate-section" data-hash="5fa827d5cdde488d7c69f64bf9391357"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>从这个buffer对象里，根据指定的偏移量，使用特殊的 endian字节序格式读取一个 unsigned 16 bit integer。

</p>
</div>

<div class="translate-section" data-hash="e9074489222cc3ce8a7496e79cbfe046"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>offset</code>偏移量参数。
这意味着 <code>offset</code>可能会超出buffer的末尾。默认是 <code>false</code>。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="0b48627cd3f0b690a50eac4e91d86e3b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 0x0304</span>
<span class="sh_comment">// 0x0403</span>
<span class="sh_comment">// 0x0423</span>
<span class="sh_comment">// 0x2304</span>
<span class="sh_comment">// 0x2342</span>
<span class="sh_comment">// 0x4223</span></code></pre>
</div>

<div class="translate-section" data-hash="8ef22513b3b4b5cba68d97ffbc99063b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.readUInt32LE(offset, [noAssert])<span><a href="#all_buf_readuint32le_offset_noassert_1408" id="all_buf_readuint32le_offset_noassert_1408">#</a></span></h3>
<h3>buf.readUInt32BE(offset, [noAssert])<span><a href="#all_buf_readuint32be_offset_noassert_1408" id="all_buf_readuint32be_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="274c3233c8756915aa320194af9cd46a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
<li>Return: Number类型</li>
</ul>
</div>

<div class="translate-section" data-hash="f1bb17e0fbf81e50bb7ccd42b4cb3a33"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>从这个buffer对象里，根据指定的偏移量，使用指定的 endian字节序格式读取一个 unsigned 32 bit integer。

</p>
</div>

<div class="translate-section" data-hash="e9074489222cc3ce8a7496e79cbfe046"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>offset</code>偏移量参数。
这意味着 <code>offset</code>可能会超出buffer的末尾。默认是 <code>false</code>。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="48cab17441ffee703745172ada1cfd79"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 0x03042342</span>
<span class="sh_comment">// 0x42230403</span></code></pre>
</div>

<div class="translate-section" data-hash="3239a8c479dca7f6a540b6e6c85244e2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.readInt8(offset, [noAssert])<span><a href="#all_buf_readint8_offset_noassert_1408" id="all_buf_readint8_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="274c3233c8756915aa320194af9cd46a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
<li>Return: Number类型</li>
</ul>
</div>

<div class="translate-section" data-hash="c881a92ecc1ac7fefa715d84e62a4e13"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>从这个buffer对象里，根据指定的偏移量，读取一个 signed 8 bit integer。

</p>
</div>

<div class="translate-section" data-hash="e9074489222cc3ce8a7496e79cbfe046"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>offset</code>偏移量参数。
这意味着 <code>offset</code>可能会超出buffer的末尾。默认是 <code>false</code>。

</p>
</div>

<div class="translate-section" data-hash="84c65b5b697d1231d7a006e83df2deb6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>和 <code>buffer.readUInt8</code>一样的返回，除非buffer中包含了有作为2的补码的有符号值。

</p>
</div>

<div class="translate-section" data-hash="31778b7bb4e6e56cfdc1453c323b8de0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.readInt16LE(offset, [noAssert])<span><a href="#all_buf_readint16le_offset_noassert_1408" id="all_buf_readint16le_offset_noassert_1408">#</a></span></h3>
<h3>buf.readInt16BE(offset, [noAssert])<span><a href="#all_buf_readint16be_offset_noassert_1408" id="all_buf_readint16be_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="274c3233c8756915aa320194af9cd46a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
<li>Return: Number类型</li>
</ul>
</div>

<div class="translate-section" data-hash="37e4810c90b9f20c65089685a8e7a7af"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>从这个buffer对象里，根据指定的偏移量，使用特殊的 endian字节序格式读取一个 signed 16 bit integer。

</p>
</div>

<div class="translate-section" data-hash="e9074489222cc3ce8a7496e79cbfe046"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>offset</code>偏移量参数。
这意味着 <code>offset</code>可能会超出buffer的末尾。默认是 <code>false</code>。

</p>
</div>

<div class="translate-section" data-hash="354ccf46a9f01c53d519ff543843d3d5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>和 buffer.readUInt16一样返回，除非buffer中包含了有作为2的补码的有符号值。

</p>
</div>

<div class="translate-section" data-hash="af39fd1087f174627198261bbffd4490"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.readInt32LE(offset, [noAssert])<span><a href="#all_buf_readint32le_offset_noassert_1408" id="all_buf_readint32le_offset_noassert_1408">#</a></span></h3>
<h3>buf.readInt32BE(offset, [noAssert])<span><a href="#all_buf_readint32be_offset_noassert_1408" id="all_buf_readint32be_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="274c3233c8756915aa320194af9cd46a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
<li>Return: Number类型</li>
</ul>
</div>

<div class="translate-section" data-hash="50d4c5a70c8846cd5e134f8decdce9bd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>从这个buffer对象里，根据指定的偏移量，使用指定的 endian字节序格式读取一个 signed 32 bit integer。

</p>
</div>

<div class="translate-section" data-hash="e9074489222cc3ce8a7496e79cbfe046"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>offset</code>偏移量参数。
这意味着 <code>offset</code>可能会超出buffer的末尾。默认是 <code>false</code>。

</p>
</div>

<div class="translate-section" data-hash="db2eaf72984c8a74c806fc5860fb5d9f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>和 buffer.readUInt32一样返回，除非buffer中包含了有作为2的补码的有符号值。

</p>
</div>

<div class="translate-section" data-hash="9d56234ed08ff14b573f8cf274acaad1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.readFloatLE(offset, [noAssert])<span><a href="#all_buf_readfloatle_offset_noassert_1408" id="all_buf_readfloatle_offset_noassert_1408">#</a></span></h3>
<h3>buf.readFloatBE(offset, [noAssert])<span><a href="#all_buf_readfloatbe_offset_noassert_1408" id="all_buf_readfloatbe_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="274c3233c8756915aa320194af9cd46a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
<li>Return: Number类型</li>
</ul>
</div>

<div class="translate-section" data-hash="cf3258bc74f1da185fc44b9bcb97ed34"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>从这个buffer对象里，根据指定的偏移量，使用指定的 endian字节序格式读取一个 32 bit float。

</p>
</div>

<div class="translate-section" data-hash="e9074489222cc3ce8a7496e79cbfe046"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>offset</code>偏移量参数。
这意味着 <code>offset</code>可能会超出buffer的末尾。默认是 <code>false</code>。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="91154ae22c22555925b8883ecc4cce18"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 0x01</span></code></pre>
</div>

<div class="translate-section" data-hash="c0f5bab724efa298ecb7f472aaaf48e9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.readDoubleLE(offset, [noAssert])<span><a href="#all_buf_readdoublele_offset_noassert_1408" id="all_buf_readdoublele_offset_noassert_1408">#</a></span></h3>
<h3>buf.readDoubleBE(offset, [noAssert])<span><a href="#all_buf_readdoublebe_offset_noassert_1408" id="all_buf_readdoublebe_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="274c3233c8756915aa320194af9cd46a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
<li>Return: Number类型</li>
</ul>
</div>

<div class="translate-section" data-hash="c4e6f6ab6d24152085e345f637607838"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>从这个buffer对象里，根据指定的偏移量，使用指定的 endian字节序格式读取一个 64 bit double。

</p>
</div>

<div class="translate-section" data-hash="e9074489222cc3ce8a7496e79cbfe046"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>offset</code>偏移量参数。
这意味着 <code>offset</code>可能会超出buffer的末尾。默认是 <code>false</code>。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="452ecb6bb58f6deb46400d91439b7153"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 0.3333333333333333</span></code></pre>
</div>

<div class="translate-section" data-hash="2bebccbe046a1e82ab8560329dcd3d4d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.writeUInt8(value, offset, [noAssert])<span><a href="#all_buf_writeuint8_value_offset_noassert_1408" id="all_buf_writeuint8_value_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a34221f104da614e54bcd998f046f4c2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>value</code> Number类型</li>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
</ul>
</div>

<div class="translate-section" data-hash="ec8f3d2f4eb21ae121a9646d54a50c83"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据指定的offset偏移量将<code>value</code>写入buffer。注意：<code>value</code> 必须是一个合法的unsigned 8 bit integer.

</p>
</div>

<div class="translate-section" data-hash="af4bec6f47a90784db3824653efb41a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>value</code>和<code>offset</code>参数。
这意味着 <code>value</code>可能过大，或者<code>offset</code>可能会超出buffer的末尾造成<code>value</code>被丢弃。
这个参数除了你非常有把握，否则不应该使用它。默认是 <code>false</code>。`.

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="e1f354a569c54b50705d31047a8c177a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// &lt;Buffer 03 04 23 42&gt;</span></code></pre>
</div>

<div class="translate-section" data-hash="a4a043dd036e0f0a16bd6a337a526bf4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.writeUInt16LE(value, offset, [noAssert])<span><a href="#all_buf_writeuint16le_value_offset_noassert_1408" id="all_buf_writeuint16le_value_offset_noassert_1408">#</a></span></h3>
<h3>buf.writeUInt16BE(value, offset, [noAssert])<span><a href="#all_buf_writeuint16be_value_offset_noassert_1408" id="all_buf_writeuint16be_value_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a34221f104da614e54bcd998f046f4c2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>value</code> Number类型</li>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
</ul>
</div>

<div class="translate-section" data-hash="0af0ecbe6148998172111f010e1f94ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据指定的offset偏移量和指定的 endian字节序格式将<code>value</code>写入buffer。注意：<code>value</code> 必须是一个合法的unsigned 16 bit integer.

</p>
</div>

<div class="translate-section" data-hash="af4bec6f47a90784db3824653efb41a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>value</code>和<code>offset</code>参数。
这意味着 <code>value</code>可能过大，或者<code>offset</code>可能会超出buffer的末尾造成<code>value</code>被丢弃。
这个参数除了你非常有把握，否则不应该使用它。默认是 <code>false</code>。`.

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="4555bbf21b5e87662b8c4d73a61e6a55"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// &lt;Buffer de ad be ef&gt;</span>
<span class="sh_comment">// &lt;Buffer ad de ef be&gt;</span></code></pre>
</div>

<div class="translate-section" data-hash="75e22ee691f89647ebc6d606829afe62"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.writeUInt32LE(value, offset, [noAssert])<span><a href="#all_buf_writeuint32le_value_offset_noassert_1408" id="all_buf_writeuint32le_value_offset_noassert_1408">#</a></span></h3>
<h3>buf.writeUInt32BE(value, offset, [noAssert])<span><a href="#all_buf_writeuint32be_value_offset_noassert_1408" id="all_buf_writeuint32be_value_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a34221f104da614e54bcd998f046f4c2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>value</code> Number类型</li>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
</ul>
</div>

<div class="translate-section" data-hash="27c495fbdb7aca7b50019d5838fc7a41"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据指定的offset偏移量和指定的 endian字节序格式将<code>value</code>写入buffer。注意：<code>value</code> 必须是一个合法的unsigned 32 bit integer。

</p>
</div>

<div class="translate-section" data-hash="af4bec6f47a90784db3824653efb41a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>value</code>和<code>offset</code>参数。
这意味着 <code>value</code>可能过大，或者<code>offset</code>可能会超出buffer的末尾造成<code>value</code>被丢弃。
这个参数除了你非常有把握，否则不应该使用它。默认是 <code>false</code>。`.

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="3403dd28409b2defad03c7c6146aaaf5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// &lt;Buffer fe ed fa ce&gt;</span>
<span class="sh_comment">// &lt;Buffer ce fa ed fe&gt;</span></code></pre>
</div>

<div class="translate-section" data-hash="ad285ca51b400649325785351fbaa8c7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.writeInt8(value, offset, [noAssert])<span><a href="#all_buf_writeint8_value_offset_noassert_1408" id="all_buf_writeint8_value_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a34221f104da614e54bcd998f046f4c2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>value</code> Number类型</li>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
</ul>
</div>

<div class="translate-section" data-hash="5570c73b1003b90880fa85bf2b482c99"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据指定的offset偏移量将<code>value</code>写入buffer。注意：<code>value</code> 必须是一个合法的 signed 8 bit integer。

</p>
</div>

<div class="translate-section" data-hash="af4bec6f47a90784db3824653efb41a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>value</code>和<code>offset</code>参数。
这意味着 <code>value</code>可能过大，或者<code>offset</code>可能会超出buffer的末尾造成<code>value</code>被丢弃。
这个参数除了你非常有把握，否则不应该使用它。默认是 <code>false</code>。`.

</p>
</div>

<div class="translate-section" data-hash="fafece7cba759f679b0c602f35588a2a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>和 <code>buffer.writeUInt8</code> 一样工作，除非是把有2的补码的 signed integer 有符号整形写入<code>buffer</code>。

</p>
</div>

<div class="translate-section" data-hash="bc89b2a11b788771a3f02e9e415f43ca"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.writeInt16LE(value, offset, [noAssert])<span><a href="#all_buf_writeint16le_value_offset_noassert_1408" id="all_buf_writeint16le_value_offset_noassert_1408">#</a></span></h3>
<h3>buf.writeInt16BE(value, offset, [noAssert])<span><a href="#all_buf_writeint16be_value_offset_noassert_1408" id="all_buf_writeint16be_value_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a34221f104da614e54bcd998f046f4c2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>value</code> Number类型</li>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
</ul>
</div>

<div class="translate-section" data-hash="bad612aad896ba2751a74f55464e04d1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据指定的offset偏移量和指定的 endian字节序格式将<code>value</code>写入buffer。注意：<code>value</code> 必须是一个合法的 signed 16 bit integer。

</p>
</div>

<div class="translate-section" data-hash="af4bec6f47a90784db3824653efb41a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>value</code>和<code>offset</code>参数。
这意味着 <code>value</code>可能过大，或者<code>offset</code>可能会超出buffer的末尾造成<code>value</code>被丢弃。
这个参数除了你非常有把握，否则不应该使用它。默认是 <code>false</code>。`.

</p>
</div>

<div class="translate-section" data-hash="cdbf3dafc230f853444942d72b1e9326"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>和 <code>buffer.writeUInt16*</code> 一样工作，除非是把有2的补码的 signed integer 有符号整形写入<code>buffer</code>。

</p>
</div>

<div class="translate-section" data-hash="188fe6e918fb2867f8039e5cd95020cd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.writeInt32LE(value, offset, [noAssert])<span><a href="#all_buf_writeint32le_value_offset_noassert_1408" id="all_buf_writeint32le_value_offset_noassert_1408">#</a></span></h3>
<h3>buf.writeInt32BE(value, offset, [noAssert])<span><a href="#all_buf_writeint32be_value_offset_noassert_1408" id="all_buf_writeint32be_value_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a34221f104da614e54bcd998f046f4c2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>value</code> Number类型</li>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
</ul>
</div>

<div class="translate-section" data-hash="7861d79cf7ac47a7a7cdfe3e1b1ad8de"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据指定的offset偏移量和指定的 endian字节序格式将<code>value</code>写入buffer。注意：<code>value</code> 必须是一个合法的 signed 32 bit integer。

</p>
</div>

<div class="translate-section" data-hash="af4bec6f47a90784db3824653efb41a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>value</code>和<code>offset</code>参数。
这意味着 <code>value</code>可能过大，或者<code>offset</code>可能会超出buffer的末尾造成<code>value</code>被丢弃。
这个参数除了你非常有把握，否则不应该使用它。默认是 <code>false</code>。`.

</p>
</div>

<div class="translate-section" data-hash="5c2fd1fcea374c2996c6c2612dba084d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>和 <code>buffer.writeUInt32*</code> 一样工作，除非是把有2的补码的 signed integer 有符号整形写入<code>buffer</code>。

</p>
</div>

<div class="translate-section" data-hash="e194413c72baf9148d9b9a02b053d028"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.writeFloatLE(value, offset, [noAssert])<span><a href="#all_buf_writefloatle_value_offset_noassert_1408" id="all_buf_writefloatle_value_offset_noassert_1408">#</a></span></h3>
<h3>buf.writeFloatBE(value, offset, [noAssert])<span><a href="#all_buf_writefloatbe_value_offset_noassert_1408" id="all_buf_writefloatbe_value_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a34221f104da614e54bcd998f046f4c2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>value</code> Number类型</li>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
</ul>
</div>

<div class="translate-section" data-hash="40659bf8e5d2b699136f3330eb72a622"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据指定的offset偏移量和指定的 endian字节序格式将<code>value</code>写入buffer。注意：当<code>value</code> 不是一个 32 bit float 类型的值时，结果将是不确定的。

</p>
</div>

<div class="translate-section" data-hash="af4bec6f47a90784db3824653efb41a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>value</code>和<code>offset</code>参数。
这意味着 <code>value</code>可能过大，或者<code>offset</code>可能会超出buffer的末尾造成<code>value</code>被丢弃。
这个参数除了你非常有把握，否则不应该使用它。默认是 <code>false</code>。`.

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="74cc8473ca9f23d8c063a8e0e8979bd5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// &lt;Buffer 4f 4a fe bb&gt;</span>
<span class="sh_comment">// &lt;Buffer bb fe 4a 4f&gt;</span></code></pre>
</div>

<div class="translate-section" data-hash="a3fea6998933826560a743d6d7a2bd67"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.writeDoubleLE(value, offset, [noAssert])<span><a href="#all_buf_writedoublele_value_offset_noassert_1408" id="all_buf_writedoublele_value_offset_noassert_1408">#</a></span></h3>
<h3>buf.writeDoubleBE(value, offset, [noAssert])<span><a href="#all_buf_writedoublebe_value_offset_noassert_1408" id="all_buf_writedoublebe_value_offset_noassert_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a34221f104da614e54bcd998f046f4c2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>value</code> Number类型</li>
<li><code>offset</code> Number类型</li>
<li><code>noAssert</code> Boolean类型, 可选参数, 默认: false</li>
</ul>
</div>

<div class="translate-section" data-hash="e9b4f797ccdcb440b6c8ff3382e298db"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据指定的offset偏移量和指定的 endian字节序格式将<code>value</code>写入buffer。注意：<code>value</code> 必须是一个有效的 64 bit double 类型的值。

</p>
</div>

<div class="translate-section" data-hash="af4bec6f47a90784db3824653efb41a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置参数 <code>noAssert</code>为true表示忽略验证<code>value</code>和<code>offset</code>参数。
这意味着 <code>value</code>可能过大，或者<code>offset</code>可能会超出buffer的末尾造成<code>value</code>被丢弃。
这个参数除了你非常有把握，否则不应该使用它。默认是 <code>false</code>。`.

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="b3c0e7c1c6569510d03a388ce47946dd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;</span>
<span class="sh_comment">// &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;</span></code></pre>
</div>

<div class="translate-section" data-hash="e4437ab0fb945ba2102cd9229c90ae9c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>buf.fill(value, [offset], [end])<span><a href="#all_buf_fill_value_offset_end_1408" id="all_buf_fill_value_offset_end_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="b2d0ae014a20f4c5562677e07cb0d50d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>value</code></li>
<li><code>offset</code> Number类型, 可选参数</li>
<li><code>end</code> Number类型, 可选参数</li>
</ul>
</div>

<div class="translate-section" data-hash="e539373574448a3f83562165d39e58eb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用指定的value来填充这个buffer。如果 <code>offset</code> (默认是 <code>0</code>) 并且 <code>end</code> (默认是 <code>buffer.length</code>) 没有明确给出，就会填充整个buffer。
（译者：buf.fill调用的是C语言的memset函数非常高效）

</p>
</div>

<div class="translate-section" data-hash="bec644f85919bcfa4ce1896577778705"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> b <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span><span class="sh_number">50</span><span class="sh_symbol">);</span>
b<span class="sh_symbol">.</span><span class="sh_function">fill</span><span class="sh_symbol">(</span><span class="sh_string">"h"</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="ffef7ea545fa182cfa10057c7a9ae09d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>buffer.INSPECT_MAX_BYTES<span><a href="#all_buffer_inspect_max_bytes_1408" id="all_buffer_inspect_max_bytes_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="70b752b580a790e1c7844f616682a040"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>Number类型, 默认: 50</li>
</ul>
</div>

<div class="translate-section" data-hash="307fa3294c0e343ed726c81b1e42e1a0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置当调用<code>buffer.inspect()</code>方法后，多少bytes将会返回。这个值可以被用户模块重写。
（译者：这个值主要用在当我们打印console.log(buf)时，设置返回多少长度内容）

</p>
</div>

<div class="translate-section" data-hash="9c1064c30ce7836b7bd8a3a38aa129fb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意这个属性是<code>require('buffer')</code>模块返回的。这个属性不是在全局变量Buffer中，也不再buffer的实例里。 

</p>
</div>

<div class="translate-section" data-hash="b6ee9073aaaddd07afa08da7ec8f9dfa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: SlowBuffer<span><a href="#all_slowbuffer_1408" id="all_slowbuffer_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="62b1d73e85a319d6977d7c1c44a6ea0c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个不被池管理的 <code>Buffer</code>。

</p>
</div>

<div class="translate-section" data-hash="e3a5380009a1ae5e3a62773edb981462"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>为了避免创建大量独立分配的 Buffer 带来的垃圾回收开销，默认情况下小于 4KB 的空间都是切割自一个较大的独立对象。这种策略既提高了性能也改善了内存使用，因为 V8 不需要跟踪和清理很多 <code>Persistent</code> 对象。

</p>
</div>

<div class="translate-section" data-hash="38c55b2ad13d7579b4de28e517f3ca6e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当开发者需要将池中一小块数据保留不确定的一段时间，较为妥当的办法是用 SlowBuffer 创建一个不被池管理的 Buffer 实例并将相应数据拷贝出来。

</p>
</div>

<div class="translate-section" data-hash="f1f41e165b1cd2af604058eadd11332b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> data <span class="sh_symbol">=</span> socket<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">();</span>
  <span class="sh_comment">// 为需要保留的数据分配内存</span>
  <span class="sh_keyword">var</span> sb <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">SlowBuffer</span><span class="sh_symbol">(</span><span class="sh_number">10</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// 将数据拷贝到新的空间中</span>
  data<span class="sh_symbol">.</span><span class="sh_function">copy</span><span class="sh_symbol">(</span>sb<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">10</span><span class="sh_symbol">);</span>
  store<span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>sb<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="3da792f7b50bd7492fa4a7304e2fff0b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请谨慎使用，仅作为开发者频繁观察到他们的应用中过度的内存保留时的<em>最后</em>手段。

</p>
</div>
<div class="translate-section" data-hash="dc47faa6e86cfa6d2d8dd5fa2ac30761"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>流<span><a href="#all_70412" id="all_70412">#</a></span></h1>
</div>

<div class="translate-section" data-hash="14ae3b8a1560651cf34fa2e5562e7f27"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> 不稳定</code></pre>
</div>

<div class="translate-section" data-hash="0de466e8760c7ac84443446072354140"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>流是一个抽象接口，被 Node 中的很多对象所实现。比如<a href="http://nodeapi.ucdok.com/api/http.html#http_http_incomingmessage">对一个 HTTP 服务器的请求</a>是一个流，<a href="http://nodeapi.ucdok.com/api/process.html#process_process_stdout">stdout</a> 也是一个流。流是可读、可写或兼具两者的。所有流都是 <a href="http://nodeapi.ucdok.com/api/events.html#events_class_events_eventemitter">EventEmitter</a> 的实例。

</p>
</div>

<div class="translate-section" data-hash="fd73f300ec9fb8f213afe808741791b5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>您可以通过 <code>require('stream')</code> 加载 Stream 基类，其中包括了 <a href="#stream_class_stream_readable">Readable</a> 流、<a href="#stream_class_stream_writable">Writable</a> 流、<a href="#stream_class_stream_duplex">Duplex</a> 流和 <a href="#stream_class_stream_transform">Transform</a> 流的基类。

</p>
</div>

<div class="translate-section" data-hash="77907ff07a21e4154cb2a5d43d049775"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>本文档分为三个章节。第一章节解释了您在您的程序中使用流时需要了解的那部分 API，如果您不打算自己实现一个流式 API，您可以只阅读这一章节。

</p>
</div>

<div class="translate-section" data-hash="15a413a7eae6fa7b1b57c2240a0622c1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>第二章节解释了当您自己实现一个流时需要用到的那部分 API，这些 API 是为了方便您这么做而设计的。

</p>
</div>

<div class="translate-section" data-hash="161d148aede3d26afa80b1d3af36c601"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>第三章节深入讲解了流的工作方式，包括一些内部机制和函数，除非您明确知道您在做什么，否则尽量不要改动它们。

</p>
</div>

<div class="translate-section" data-hash="05436f364fc5ebf29e2907ab729feb32"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>面向流消费者的 API<span><a href="#all_api_2816" id="all_api_2816">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="c6e7df22d240fe919a1d476e9251313a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>流可以是可读（<a href="#stream_class_stream_readable">Readable</a>）或可写（<a href="#stream_class_stream_writable">Writable</a>），或者兼具两者（<a href="#stream_class_stream_duplex">Duplex</a>，双工）的。

</p>
</div>

<div class="translate-section" data-hash="a534c54cffd2e67f65778d976ca233bd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所有流都是 EventEmitter，但它们也具有其它自定义方法和属性，取决于它们是 Readable、Writable 或 Duplex。

</p>
</div>

<div class="translate-section" data-hash="360bf33ce7064cb9eb56028fa7e77a58"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果一个流既可读（Readable）也可写（Writable），则它实现了下文所述的所有方法和事件。因此，这些 API 同时也涵盖了 <a href="#stream_class_stream_duplex">Duplex</a> 或 <a href="#stream_class_stream_transform">Transform</a> 流，即便它们的实现可能有点不同。

</p>
</div>

<div class="translate-section" data-hash="002fa2295f93a8346b06383d0765df3f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>为了消费流而在您的程序中自己实现 Stream 接口是没有必要的。如果您<strong>确实</strong>正在您自己的程序中实现流式接口，请同时参考下文<a href="#stream_api_for_stream_implementors">面向流实现者的 API</a>。

</p>
</div>

<div class="translate-section" data-hash="6f5094da15b8db32e4a50fae0b8b51ff"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>几乎所有 Node 程序，无论多简单，都在某种途径用到了流。这里有一个使用流的 Node 程序的例子：

</p>
</div>

<div class="translate-section" data-hash="e526bf2cfb37512525b6be5004a4d3ac"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>5dd53fb86ef5aa2fb0a6e831e46cc135 <span class="sh_symbol">--&gt;</span>

<span class="sh_keyword">var</span> server <span class="sh_symbol">=</span> http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span> <span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// req 为 http.IncomingMessage，是一个可读流（Readable Stream）</span>
  <span class="sh_comment">// res 为 http.ServerResponse，是一个可写流（Writable Stream）</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>fd5e086becb475ded97300c6e8b1f889 <span class="sh_symbol">--&gt;</span>

  <span class="sh_keyword">var</span> body <span class="sh_symbol">=</span> <span class="sh_string">''</span><span class="sh_symbol">;</span>
  <span class="sh_comment">// 我们打算以 UTF-8 字符串的形式获取数据</span>
  <span class="sh_comment">// 如果您不设置编码，您将得到一个 Buffer 对象</span>
  req<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>bb5a4bf69e5c71de2331fe85918ed96b <span class="sh_symbol">--&gt;</span>

  <span class="sh_comment">// 一旦监听器被添加，可读流会触发 'data' 事件</span>
  req<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    body <span class="sh_symbol">+=</span> chunk<span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>5768f3afd395c860ba272f79026a6799 <span class="sh_symbol">--&gt;</span>

  <span class="sh_comment">// 'end' 事件表明您已经得到了完整的 body</span>
  req<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">var</span> data <span class="sh_symbol">=</span> JSON<span class="sh_symbol">.</span><span class="sh_function">parse</span><span class="sh_symbol">(</span>body<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_comment">// uh oh!  bad json!</span>
      res<span class="sh_symbol">.</span>statusCode <span class="sh_symbol">=</span> <span class="sh_number">400</span><span class="sh_symbol">;</span>
      <span class="sh_keyword">return</span> res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'错误: '</span> <span class="sh_symbol">+</span> er<span class="sh_symbol">.</span>message<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>812496c72ef4682c63a7ba8837f9610a <span class="sh_symbol">--&gt;</span>

    <span class="sh_comment">// 向用户回写一些有趣的信息</span>
    res<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_keyword">typeof</span> data<span class="sh_symbol">);</span>
    res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">)</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>3bbc30d951532659ecc70a505ea1e985 <span class="sh_symbol">--&gt;</span>

server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>f0dea661693acf21ed203ec804a4f05a <span class="sh_symbol">--&gt;</span>

<span class="sh_comment">// $ curl localhost:1337 -d '{}'</span>
<span class="sh_comment">// object</span>
<span class="sh_comment">// $ curl localhost:1337 -d '"foo"'</span>
<span class="sh_comment">// string</span>
<span class="sh_comment">// $ curl localhost:1337 -d 'not json'</span>
<span class="sh_comment">// 错误: Unexpected token o</span></code></pre>
</div>

<div class="translate-section" data-hash="4911f6284f42b2bc2b22b2eaf282f5b6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>类: stream.Readable<span><a href="#all_stream_readable_2816" id="all_stream_readable_2816">#</a></span></h3>
</div>

<!--type=class-->

<div class="translate-section" data-hash="e5a24757715c53d420d572ad3af71bca"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Readable（可读）流接口是对您正在读取的数据的<em>来源</em>的抽象。换言之，数据<em>出自</em>一个 Readable 流。

</p>
</div>

<div class="translate-section" data-hash="e2bdb086fbc6a485e92d04457adf759a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在您表明您就绪接收之前，Readable 流并不会开始发生数据。

</p>
</div>

<div class="translate-section" data-hash="82d52cbb6918372495482e83712210c6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Readable 流有两种“模式”：<strong>流动模式</strong>和<strong>暂停模式</strong>。当处于流动模式时，数据由底层系统读出，并尽可能快地提供给您的程序；当处于暂停模式时，您必须明确地调用 <code>stream.read()</code> 来取出若干数据块。流默认处于暂停模式。

</p>
</div>

<div class="translate-section" data-hash="3fd7976d42abaa448cf214d4a3008247"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><strong>注意</strong>：如果没有绑定 data 事件处理器，并且没有 <a href="#stream_readable_pipe_destination_options"><code>pipe()</code></a> 目标，同时流被切换到流动模式，那么数据会流失。

</p>
</div>

<div class="translate-section" data-hash="3ddf3fb999eb7117acc38772934f3923"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>您可以通过下面几种做法切换到流动模式：

</p>
</div>

<div class="translate-section" data-hash="57aafbd9d9403fdc59702abb42f3d6a6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>添加一个 <a href="#stream_event_data"><code>'data'</code> 事件</a>处理器来监听数据。</li>
<li>调用 <a href="#stream_readable_resume"><code>resume()</code></a> 方法来明确开启数据流。</li>
<li>调用 <a href="#stream_readable_pipe_destination_options"><code>pipe()</code></a> 方法将数据发送到一个 <a href="#stream_class_stream_writable">Writable</a>。</li>
</ul>
</div>

<div class="translate-section" data-hash="90bc8c5f399e46d001de56c33eb53577"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>您可以通过下面其中一种做法切换回暂停模式：

</p>
</div>

<div class="translate-section" data-hash="718e997516045ca6f55efa9087985290"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>如果没有导流目标，调用 <a href="#stream_readable_pause"><code>pause()</code></a> 方法。</li>
<li>如果有导流目标，移除所有 [<code>'data'</code> 事件][] 处理器、调用 <a href="#stream_readable_unpipe_destination"><code>unpipe()</code></a> 方法移除所有导流目标。</li>
</ul>
</div>

<div class="translate-section" data-hash="688874585beeeb452de8349d46701bf8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请注意，为了向后兼容考虑，移除 <code>'data'</code> 事件监听器并<strong>不会</strong>自动暂停流。同样的，当有导流目标时，调用 <code>pause()</code> 并不能保证流在那些目标排空并请求更多数据时<em>维持</em>暂停状态。

</p>
</div>

<div class="translate-section" data-hash="073bf06a9c741177ea1aeb566e417dbb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一些可读流的例子：

</p>
</div>

<div class="translate-section" data-hash="fdc3e84991909b5d90ef9027dfd1098b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>


<ul>
<li><a href="http://nodeapi.ucdok.com/api/http.html#http_http_incomingmessage">客户端上的 HTTP 响应</a></li>
<li><a href="http://nodeapi.ucdok.com/api/http.html#http_http_incomingmessage">服务器上的 HTTP 请求</a></li>
<li><a href="http://nodeapi.ucdok.com/api/fs.html#fs_class_fs_readstream">fs 读取流</a></li>
<li><a href="http://nodeapi.ucdok.com/api/zlib.html">zlib 流</a></li>
<li><a href="http://nodeapi.ucdok.com/api/crypto.html">crypto 流</a></li>
<li><a href="http://nodeapi.ucdok.com/api/net.html#net_class_net_socket">TCP 嵌套字</a></li>
<li><a href="http://nodeapi.ucdok.com/api/child_process.html#child_process_child_stdout">子进程的 stdout 和 stderr</a></li>
<li><a href="http://nodeapi.ucdok.com/api/process.html#process_process_stdin">process.stdin</a></li>
</ul>
</div>

<div class="translate-section" data-hash="f80488c16739e7f801012e4ec2036f75"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>事件: 'readable'<span><a href="#all_readable_1408" id="all_readable_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="44e7b111f47dce7721c8a4ae25162296"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当一个数据块可以从流中被读出时，它会触发一个 <code>'readable'</code> 事件。

</p>
</div>

<div class="translate-section" data-hash="4d373ef3b0aad0a200ebf4bf50da5235"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在某些情况下，假如未准备好，监听一个 <code>'readable'</code> 事件会使得一些数据从底层系统被读出到内部缓冲区中。

</p>
</div>

<div class="translate-section" data-hash="0a6f7424348f16604a8783dc7bbbe8e0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 现在有数据可以读了</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="fd486381dd19ef4abca0f882f51d81de"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当内部缓冲区被排空后，一旦更多数据时，一个 <code>readable</code> 事件会被再次触发。

</p>
</div>

<div class="translate-section" data-hash="a1b871fabadd094436c636865bb53f07"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>事件: 'data'<span><a href="#all_data_2816" id="all_data_2816">#</a></span></h4>
</div>

<div class="translate-section" data-hash="3a4426ce06313868e8f9c78312df3384"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>chunk</code> {Buffer | String} 数据块。</li>
</ul>
</div>

<div class="translate-section" data-hash="84920ca52548a6585a9d5954fdbf1d72"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>绑定一个 <code>data</code> 事件监听器到一个未被明确暂停的流会将流切换到流动模式，数据会被尽可能地传递。

</p>
</div>

<div class="translate-section" data-hash="d1feee165918fd752e0172e830b4b206"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果您想从流尽快取出所有数据，这是最理想的方式。

</p>
</div>

<div class="translate-section" data-hash="28ba252fd2b972e5249030166178d692"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'得到了 %d 字节的数据'</span><span class="sh_symbol">,</span> chunk<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="a46181fcedf3891d9ae75746ab4d7957"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>事件: 'end'<span><a href="#all_end_2816" id="all_end_2816">#</a></span></h4>
</div>

<div class="translate-section" data-hash="05d9ceb1d24a81c3b94145d3b013b79e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该事件会在没有更多数据能够提供时被触发。

</p>
</div>

<div class="translate-section" data-hash="0ba92ad296d92124a33e4319937f24c5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请注意，<code>end</code> 事件在数据被完全消费之前<strong>不会被触发</strong>。这可通过切换到流动模式，或者在到达末端前不断调用 <code>read()</code> 来实现。

</p>
</div>

<div class="translate-section" data-hash="e3421cc20bf365c8bc6f024616ec67b4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'得到了 %d 字节的数据'</span><span class="sh_symbol">,</span> chunk<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'读取完毕。'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="dd925cc782cfcac8ae45620818ff1f37"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>事件: 'close'<span><a href="#all_close_12672" id="all_close_12672">#</a></span></h4>
</div>

<div class="translate-section" data-hash="df24cc8ce4df396235e849ae1dac4502"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当底层数据源（比如，源头的文件描述符）被关闭时触发。并不是所有流都会触发这个事件。

</p>
</div>

<div class="translate-section" data-hash="87ff694efe419c1d6b968d6ca296b1d7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>事件: 'error'<span><a href="#all_error_9857" id="all_error_9857">#</a></span></h4>
</div>

<div class="translate-section" data-hash="5470033cddef6120a7f2024d08492438"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当数据接收时发生错误时触发。

</p>
</div>

<div class="translate-section" data-hash="de4e181bbe94ef2f75b595f44776c1ce"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>readable.read([size])<span><a href="#all_readable_read_size_2816" id="all_readable_read_size_2816">#</a></span></h4>
</div>

<div class="translate-section" data-hash="1230b9704868201abfe45fb33036c375"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>size</code> {Number} 可选参数，指定要读取多少数据。</li>
<li>返回 {String | Buffer | null}</li>
</ul>
</div>

<div class="translate-section" data-hash="0add557f2ca6f940c7cf5bd8a8738073"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>read()</code> 方法从内部缓冲区中拉取并返回若干数据。当没有更多数据可用时，它会返回 <code>null</code>。

</p>
</div>

<div class="translate-section" data-hash="8d5b1dee1f0f4537979939f1db808c3f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>若您传入了一个 <code>size</code> 参数，那么它会返回相当字节的数据；当 <code>size</code> 字节不可用时，它则返回 <code>null</code>。

</p>
</div>

<div class="translate-section" data-hash="6881d73ef45bdb44f9597ac4af40c563"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>若您没有指定 <code>size</code> 参数，那么它会返回内部缓冲区中的所有数据。

</p>
</div>

<div class="translate-section" data-hash="5c030cda17c111bc80505e79a4dffc8f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法仅应在暂停模式时被调用。在流动模式中，该方法会被自动调用直到内部缓冲区排空。

</p>
</div>

<div class="translate-section" data-hash="f3253f86180092cc197eb395ae1fb111"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> chunk<span class="sh_symbol">;</span>
  <span class="sh_keyword">while</span> <span class="sh_symbol">(</span><span class="sh_keyword">null</span> <span class="sh_symbol">!==</span> <span class="sh_symbol">(</span>chunk <span class="sh_symbol">=</span> readable<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">()))</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'得到了 %d 字节的数据'</span><span class="sh_symbol">,</span> chunk<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="d08f42a7a076d90aa3d6d32eabefdc40"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当该方法返回了一个数据块，它同时也会触发 <a href="#stream_event_data"><code>'data'</code> 事件</a>。

</p>
</div>

<div class="translate-section" data-hash="85c17d17b049579409fb4930021ab96a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>readable.setEncoding(encoding)<span><a href="#all_readable_setencoding_encoding_1408" id="all_readable_setencoding_encoding_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="e7a19d3249cee389aae5116897e67091"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>encoding</code> {String} 要使用的编码。</li>
<li>返回: <code>this</code></li>
</ul>
</div>

<div class="translate-section" data-hash="525e8ae7f7ad71cde1a9b7cd22afd2cf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>调用此函数会使得流返回指定编码的字符串而不是 Buffer 对象。比如，当您 <code>readable.setEncoding('utf8')</code>，那么输出数据会被作为 UTF-8 数据解析，并以字符串返回。如果您 <code>readable.setEncoding('hex')</code>，那么数据会被编码成十六进制字符串格式。

</p>
</div>

<div class="translate-section" data-hash="e3768294835cbe6dd73a51ae1cce0505"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法能正确处理多字节字符。假如您不这么做，仅仅直接取出 Buffer 并对它们调用 <code>buf.toString(encoding)</code>，很可能会导致字节错位。因此如果您打算以字符串读取数据，请总是使用这个方法。

</p>
</div>

<div class="translate-section" data-hash="549793a09f607bb2d188a6117cdc09a7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
readable<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span><span class="sh_keyword">typeof</span> chunk<span class="sh_symbol">,</span> <span class="sh_string">'string'</span><span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'得到了 %d 个字符的字符串数据'</span><span class="sh_symbol">,</span> chunk<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="a0504bf796598c8e76341f2f5c851bba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>readable.resume()<span><a href="#all_readable_resume_1408" id="all_readable_resume_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="27ee0d0c4259bbec3159f1dc77e9df39"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>返回: <code>this</code></li>
</ul>
</div>

<div class="translate-section" data-hash="e4cc9395080e65c5780f48e8f1b3fa22"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法让可读流继续触发 <code>data</code> 事件。

</p>
</div>

<div class="translate-section" data-hash="c910bc90f81cc25f3fc290ba08976ed4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法会将流切换到流动模式。如果您<em>不想</em>从流中消费数据，但您<em>想</em>得到它的 <code>end</code> 事件，您可以调用 <a href="#stream_readable_resume"><code>readable.resume()</code></a> 来启动数据流。

</p>
</div>

<div class="translate-section" data-hash="aff6daa498fbdd06c6b3d7490ca1f2e5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
readable<span class="sh_symbol">.</span><span class="sh_function">resume</span><span class="sh_symbol">();</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'到达末端，但并未读取任何东西'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="c531743f0905bee58b8359d5dd35ec34"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>readable.pause()<span><a href="#all_readable_pause_1408" id="all_readable_pause_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="27ee0d0c4259bbec3159f1dc77e9df39"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>返回: <code>this</code></li>
</ul>
</div>

<div class="translate-section" data-hash="d2486635105b8a0bcf14d8de36d0a75e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法会使一个处于流动模式的流停止触发 <code>data</code> 事件，切换到非流动模式，并让后续可用数据留在内部缓冲区中。

</p>
</div>

<div class="translate-section" data-hash="a18cf4bcf84e955be58bce772a32410f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
readable<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'取得 %d 字节数据'</span><span class="sh_symbol">,</span> chunk<span class="sh_symbol">.</span>length<span class="sh_symbol">);</span>
  readable<span class="sh_symbol">.</span><span class="sh_function">pause</span><span class="sh_symbol">();</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'接下来 1 秒内不会有数据'</span><span class="sh_symbol">);</span>
  <span class="sh_function">setTimeout</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'现在数据会再次开始流动'</span><span class="sh_symbol">);</span>
    readable<span class="sh_symbol">.</span><span class="sh_function">resume</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="44636c68fe2e078d9fdfd19a5badfbbe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>readable.pipe(destination, [options])<span><a href="#all_readable_pipe_destination_options_1408" id="all_readable_pipe_destination_options_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="779663b5a98e7fd02b732e242ac7f92a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>destination</code> {<a href="#stream_class_stream_writable">Writable</a> Stream} 写入数据的目标</li>
<li><code>options</code> {Object} 导流选项<ul>
<li><code>end</code> {Boolean} 在读取者结束时结束写入者。缺省为 <code>true</code></li>
</ul>
</li>
</ul>
</div>

<div class="translate-section" data-hash="13040edafb7d232ade0672d1aeb3be8d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法从可读流中拉取所有数据，并写入到所提供的目标。该方法能自动控制流量以避免目标被快速读取的可读流所淹没。

</p>
</div>

<div class="translate-section" data-hash="3c03266f9bc6b279387058505385f97a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>可以导流到多个目标。

</p>
</div>

<div class="translate-section" data-hash="7d8a169e2c1f9bdbeca936802caa9ab7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">var</span> writable <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createWriteStream</span><span class="sh_symbol">(</span><span class="sh_string">'file.txt'</span><span class="sh_symbol">);</span>
<span class="sh_comment">// 所有来自 readable 的数据会被写入到 'file.txt'</span>
readable<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>writable<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="f6681cc47737c3db16d83e4c3fffd971"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该函数返回目标流，因此您可以建立导流链：

</p>
</div>

<div class="translate-section" data-hash="3f39058c578cbd9fd913eb3b9be7cf90"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> r <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span><span class="sh_string">'file.txt'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> z <span class="sh_symbol">=</span> zlib<span class="sh_symbol">.</span><span class="sh_function">createGzip</span><span class="sh_symbol">();</span>
<span class="sh_keyword">var</span> w <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createWriteStream</span><span class="sh_symbol">(</span><span class="sh_string">'file.txt.gz'</span><span class="sh_symbol">);</span>
r<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>z<span class="sh_symbol">).</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>w<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="cc5b50618ed38dfd2139d66fe13088db"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例如，模拟 Unix 的 <code>cat</code> 命令：

</p>
</div>

<div class="translate-section" data-hash="c854294bbe4dd38af189b6c3f414b86c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="ec95d9acd3f4450d9deb6458d8c74f52"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>缺省情况下当来源流触发 <code>end</code> 时目标的 <a href="#stream_writable_end_chunk_encoding_callback"><code>end()</code></a> 会被调用，所以此时 <code>destination</code> 不再可写。传入 <code>{ end: false }</code> 作为 <code>options</code> 可以让目标流保持开启状态。

</p>
</div>

<div class="translate-section" data-hash="b3078ca119c41ece903d51fdac6f1984"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这将让 <code>writer</code> 保持开启，因此最后可以写入 "Goodbye"。

</p>
</div>

<div class="translate-section" data-hash="c939aae23a2697e6f1776e00a6f4186d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>reader<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>writer<span class="sh_symbol">,</span> <span class="sh_cbracket">{</span> end<span class="sh_symbol">:</span> <span class="sh_keyword">false</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
reader<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  writer<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'Goodbye</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="310f61c46be3a9dd887e129bbfec27b3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请注意 <code>process.stderr</code> 和 <code>process.stdout</code> 在进程结束前都不会被关闭，无论是否指定选项。

</p>
</div>

<div class="translate-section" data-hash="e8ab8b5c90cdfc7325b653b7c64d22b6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>readable.unpipe([destination])<span><a href="#all_readable_unpipe_destination_1408" id="all_readable_unpipe_destination_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="caf006fafada469081d2f6dc6a0b7d68"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>destination</code> {<a href="#stream_class_stream_writable">Writable</a> Stream} 可选，指定解除导流的流</li>
</ul>
</div>

<div class="translate-section" data-hash="445453ed548c841cf6537deb80a45d4b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法会移除之前调用 <code>pipe()</code> 所设定的钩子。

</p>
</div>

<div class="translate-section" data-hash="5c5453f57e82fb17e76fb9673f1a97b2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果不指定目标，所有导流都会被移除。

</p>
</div>

<div class="translate-section" data-hash="85758b0accf0f1b1b047c001bd0b1663"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果指定了目标，但并没有与之建立导流，则什么事都不会发生。

</p>
</div>

<div class="translate-section" data-hash="b6ee48908e7b3f442eb8b339e935f3d7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> readable <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">var</span> writable <span class="sh_symbol">=</span> fs<span class="sh_symbol">.</span><span class="sh_function">createWriteStream</span><span class="sh_symbol">(</span><span class="sh_string">'file.txt'</span><span class="sh_symbol">);</span>
<span class="sh_comment">// 来自 readable 的所有数据都会被写入 'file.txt',</span>
<span class="sh_comment">// 但仅发生在第 1 秒</span>
readable<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>writable<span class="sh_symbol">);</span>
<span class="sh_function">setTimeout</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'停止写入到 file.txt'</span><span class="sh_symbol">);</span>
  readable<span class="sh_symbol">.</span><span class="sh_function">unpipe</span><span class="sh_symbol">(</span>writable<span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'自行关闭文件流'</span><span class="sh_symbol">);</span>
  writable<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="7947a70e2be3453687b14a541d3753ad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>readable.unshift(chunk)<span><a href="#all_readable_unshift_chunk_1408" id="all_readable_unshift_chunk_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="5393c3359563baff776b9e9df08cde56"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>chunk</code> {Buffer | String} 要插回读取队列开头的数据块</li>
</ul>
</div>

<div class="translate-section" data-hash="640ec8915587ab0b9e2dfa12be9cb858"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法在许多场景中都很有用，比如一个流正在被一个解析器消费，解析器可能需要将某些刚拉取出的数据“逆消费”回来源，以便流能将它传递给其它消费者。

</p>
</div>

<div class="translate-section" data-hash="d9fe39bcd287eaf3d15ff5839bfb288a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果您发现您需要在您的程序中频繁调用 <code>stream.unshift(chunk)</code>，请考虑实现一个 <a href="#stream_class_stream_transform">Transform</a> 流。（详见下文面向流实现者的 API。）

</p>
</div>

<div class="translate-section" data-hash="27fb166d498ccfdbce8c320be0c3d19a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 取出以 \n\n 分割的头部并将多余部分 unshift() 回去</span>
<span class="sh_comment">// callback 以 (error, header, stream) 形式调用</span>
<span class="sh_keyword">var</span> StringDecoder <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'string_decoder'</span><span class="sh_symbol">).</span>StringDecoder<span class="sh_symbol">;</span>
<span class="sh_keyword">function</span> <span class="sh_function">parseHeader</span><span class="sh_symbol">(</span>stream<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  stream<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> callback<span class="sh_symbol">);</span>
  stream<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> onReadable<span class="sh_symbol">);</span>
  <span class="sh_keyword">var</span> decoder <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">StringDecoder</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
  <span class="sh_keyword">var</span> header <span class="sh_symbol">=</span> <span class="sh_string">''</span><span class="sh_symbol">;</span>
  <span class="sh_keyword">function</span> <span class="sh_function">onReadable</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">var</span> chunk<span class="sh_symbol">;</span>
    <span class="sh_keyword">while</span> <span class="sh_symbol">(</span><span class="sh_keyword">null</span> <span class="sh_symbol">!==</span> <span class="sh_symbol">(</span>chunk <span class="sh_symbol">=</span> stream<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">()))</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">var</span> str <span class="sh_symbol">=</span> decoder<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">);</span>
      <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>str<span class="sh_symbol">.</span><span class="sh_function">match</span><span class="sh_symbol">(</span><span class="sh_regexp">/\n\n/</span><span class="sh_symbol">))</span> <span class="sh_cbracket">{</span>
        <span class="sh_comment">// 找到头部边界</span>
        <span class="sh_keyword">var</span> split <span class="sh_symbol">=</span> str<span class="sh_symbol">.</span><span class="sh_function">split</span><span class="sh_symbol">(</span><span class="sh_regexp">/\n\n/</span><span class="sh_symbol">);</span>
        header <span class="sh_symbol">+=</span> split<span class="sh_symbol">.</span><span class="sh_function">shift</span><span class="sh_symbol">();</span>
        <span class="sh_keyword">var</span> remaining <span class="sh_symbol">=</span> split<span class="sh_symbol">.</span><span class="sh_function">join</span><span class="sh_symbol">(</span><span class="sh_string">'</span><span class="sh_specialchar">\n\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
        <span class="sh_keyword">var</span> buf <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span>remaining<span class="sh_symbol">,</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
        <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>buf<span class="sh_symbol">.</span>length<span class="sh_symbol">)</span>
          stream<span class="sh_symbol">.</span><span class="sh_function">unshift</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
        stream<span class="sh_symbol">.</span><span class="sh_function">removeListener</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> callback<span class="sh_symbol">);</span>
        stream<span class="sh_symbol">.</span><span class="sh_function">removeListener</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> onReadable<span class="sh_symbol">);</span>
        <span class="sh_comment">// 现在可以从流中读取消息的主体了</span>
        <span class="sh_function">callback</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">,</span> header<span class="sh_symbol">,</span> stream<span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
        <span class="sh_comment">// 仍在读取头部</span>
        header <span class="sh_symbol">+=</span> str<span class="sh_symbol">;</span>
      <span class="sh_cbracket">}</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="dc963d2b4dc27324fdf4fbd78b34834d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>readable.wrap(stream)<span><a href="#all_readable_wrap_stream_1408" id="all_readable_wrap_stream_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="b082172985bf02b4e33e1cfb9a05f9d4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>stream</code> {Stream} 一个“旧式”可读流</li>
</ul>
</div>

<div class="translate-section" data-hash="9b02c0236b4c8b73d49d8d1368b32b17"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Node v0.10 版本之前的流并未实现现今所有流 API。（更多信息详见下文“兼容性”章节。）

</p>
</div>

<div class="translate-section" data-hash="6a6115a6c07c94f85faab94e652644fc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果您正在使用早前版本的 Node 库，它触发 <code>'data'</code> 事件并且有一个仅作查询用途的 <a href="#stream_readable_pause"><code>pause()</code></a> 方法，那么您可以使用 <code>wrap()</code> 方法来创建一个使用旧式流作为数据源的 <a href="#stream_class_stream_readable">Readable</a> 流。

</p>
</div>

<div class="translate-section" data-hash="aa473b2ac1e2908d8d3ef2608f9ff53a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>您可能很少需要用到这个函数，但它会作为与旧 Node 程序和库交互的简便方法存在。

</p>
</div>

<div class="translate-section" data-hash="506c2c0c7f5b70af3df68c45c46f45a7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例如：

</p>
</div>

<div class="translate-section" data-hash="e5ad1a8242dbcddd3b80aa07d2c87ff4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>myReader<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
myReader<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">();</span> <span class="sh_comment">// etc.</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="d7c6979b1b0e4881a39893da009f4ada"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>类: stream.Writable<span><a href="#all_stream_writable_2816" id="all_stream_writable_2816">#</a></span></h3>
</div>

<!--type=class-->

<div class="translate-section" data-hash="5b8782c867b0b60f06c0964aa67a4b4c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Writable（可写）流接口是对您正在写入数据<em>至一个目标</em>的抽象。

</p>
</div>

<div class="translate-section" data-hash="8606a9301ddcc47cb27d0de238abbe62"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一些可写流的例子：

</p>
</div>

<div class="translate-section" data-hash="4d8c05195bd1083ca6d6be35fd8911ef"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>


<ul>
<li><a href="http://nodeapi.ucdok.com/api/http.html#http_class_http_clientrequest">http requests, on the client</a></li>
<li><a href="http://nodeapi.ucdok.com/api/http.html#http_class_http_serverresponse">http responses, on the server</a></li>
<li><a href="http://nodeapi.ucdok.com/api/fs.html#fs_class_fs_writestream">fs write streams</a></li>
<li><a href="http://nodeapi.ucdok.com/api/zlib.html">zlib streams</a></li>
<li><a href="http://nodeapi.ucdok.com/api/crypto.html">crypto streams</a></li>
<li><a href="http://nodeapi.ucdok.com/api/net.html#net_class_net_socket">tcp sockets</a></li>
<li><a href="http://nodeapi.ucdok.com/api/child_process.html#child_process_child_stdin">child process stdin</a></li>
<li><a href="http://nodeapi.ucdok.com/api/process.html#process_process_stdout">process.stdout</a>, <a href="http://nodeapi.ucdok.com/api/process.html#process_process_stderr">process.stderr</a></li>
</ul>
</div>

<div class="translate-section" data-hash="64cd5d6afd995cc6b28b0736784ff818"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>writable.write(chunk, [encoding], [callback])<span><a href="#all_writable_write_chunk_encoding_callback_2816" id="all_writable_write_chunk_encoding_callback_2816">#</a></span></h4>
</div>

<div class="translate-section" data-hash="c2fbc547812de517b4225b44bb4b3db8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>


<ul>
<li><code>chunk</code> {String | Buffer} 要写入的数据</li>
<li><code>encoding</code> {String} 编码，假如 <code>chunk</code> 是一个字符串</li>
<li><code>callback</code> {Function} 数据块写入后的回调</li>
<li>返回: {Boolean} 如果数据已被全部处理则 <code>true</code>。</li>
</ul>
</div>

<div class="translate-section" data-hash="7b15b54161a88830d8bede3ef86a99e4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法向底层系统写入数据，并在数据被处理完毕后调用所给的回调。

</p>
</div>

<div class="translate-section" data-hash="8f4debaf4f1ff5dd28f0ec870cea6938"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回值表明您是否应该立即继续写入。如果数据需要滞留在内部，则它会返回 <code>false</code>；否则，返回 <code>true</code>。

</p>
</div>

<div class="translate-section" data-hash="59ef41214268fb809f34ec2a1e99ffe3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回值所表示的状态仅供参考，您【可以】在即便返回 <code>false</code> 的时候继续写入。但是，写入的数据会被滞留在内存中，所以最好不要过分地这么做。最好的做法是等待 <code>drain</code> 事件发生后再继续写入更多数据。

</p>
</div>

<div class="translate-section" data-hash="2c0577389716e6aed0c45b98b99a1123"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>事件: 'drain'<span><a href="#all_drain_2816" id="all_drain_2816">#</a></span></h4>
</div>

<div class="translate-section" data-hash="2070dd00f08c2b194f5ad464696da416"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果一个 <a href="#stream_writable_write_chunk_encoding_callback"><code>writable.write(chunk)</code></a> 调用返回 <code>false</code>，那么 <code>drain</code> 事件则表明可以继续向流写入更多数据。

</p>
</div>

<div class="translate-section" data-hash="54afd2a77dac3f636e5fc80d5e4f8274"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 向所给可写流写入 1000000 次数据。</span>
<span class="sh_comment">// 注意后端压力。</span>
<span class="sh_keyword">function</span> <span class="sh_function">writeOneMillionTimes</span><span class="sh_symbol">(</span>writer<span class="sh_symbol">,</span> data<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">1000000</span><span class="sh_symbol">;</span>
  <span class="sh_function">write</span><span class="sh_symbol">();</span>
  <span class="sh_keyword">function</span> <span class="sh_function">write</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">var</span> ok <span class="sh_symbol">=</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
    <span class="sh_keyword">do</span> <span class="sh_cbracket">{</span>
      i <span class="sh_symbol">-=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
      <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">===</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
        <span class="sh_comment">// 最后一次！</span>
        writer<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>data<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> callback<span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
        <span class="sh_comment">// 检查我们应该继续还是等待</span>
        <span class="sh_comment">// 不要传递回调，因为我们还没完成。</span>
        ok <span class="sh_symbol">=</span> writer<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>data<span class="sh_symbol">,</span> encoding<span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span>
    <span class="sh_cbracket">}</span> <span class="sh_keyword">while</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">&gt;</span> <span class="sh_number">0</span> <span class="sh_symbol">&amp;&amp;</span> ok<span class="sh_symbol">);</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">&gt;</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_comment">// 不得不提前停止！</span>
      <span class="sh_comment">// 一旦它排空，继续写入数据</span>
      writer<span class="sh_symbol">.</span><span class="sh_function">once</span><span class="sh_symbol">(</span><span class="sh_string">'drain'</span><span class="sh_symbol">,</span> write<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="2ea880db4b98f53a9a8589ff40a9107d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>writable.cork()<span><a href="#all_writable_cork_1408" id="all_writable_cork_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="11ceeb8caa8716ea016f0b91481f0ef8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>强行滞留所有写入。

</p>
</div>

<div class="translate-section" data-hash="e42ea596a035f298ab0d166c95781ba3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>滞留的数据会在 <code>.uncork()</code> 或 <code>.end()</code> 调用时被写入。

</p>
</div>

<div class="translate-section" data-hash="463e5393a34c3dbb8a5c7c34a180d0f8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>writable.uncork()<span><a href="#all_writable_uncork_1408" id="all_writable_uncork_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="8ea3d600211242a4f0fb7db3fc3092d5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>写入所有 <code>.cork()</code> 调用之后滞留的数据。

</p>
</div>

<div class="translate-section" data-hash="0119a6b2ecd592d81efb1d6543843654"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>writable.end([chunk], [encoding], [callback])<span><a href="#all_writable_end_chunk_encoding_callback_1408" id="all_writable_end_chunk_encoding_callback_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="46db805d476f41de81e4379106ac5a56"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>chunk</code> {String | Buffer} 可选，要写入的数据</li>
<li><code>encoding</code> {String} 编码，假如 chunk 是一个字符串</li>
<li><code>callback</code> {Function} 可选，流结束后的回调</li>
</ul>
</div>

<div class="translate-section" data-hash="68d8ced9b296b1e9fcddf472d605b654"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当没有更多数据会被写入到流时调用此方法。如果给出，回调会被用作 <code>finish</code> 事件的监听器。

</p>
</div>

<div class="translate-section" data-hash="70a00499ee8493c39ff9e03b3f55056d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在调用 <a href="#stream_writable_end_chunk_encoding_callback"><code>end()</code></a> 后调用 <a href="#stream_writable_write_chunk_encoding_callback"><code>write()</code></a> 会产生错误。

</p>
</div>

<div class="translate-section" data-hash="a1a72c7289db8376a28ec4c5fc955365"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 写入 'hello, ' 然后以 'world!' 结束</span>
http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span> <span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  res<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'hello, '</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'world!'</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// 现在不允许继续写入了</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="56a8d2c23450697a3c45eac8f3dba753"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>事件: 'finish'<span><a href="#all_finish_1408" id="all_finish_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="7b9120c667e632b641db54214fab394c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当 <a href="#stream_writable_end_chunk_encoding_callback"><code>end()</code></a> 方法被调用，并且所有数据已被写入到底层系统，此事件会被触发。

</p>
</div>

<div class="translate-section" data-hash="5033aac49a3181dbd69d29ccaa2925b6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> writer <span class="sh_symbol">=</span> <span class="sh_function">getWritableStreamSomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> <span class="sh_number">100</span><span class="sh_symbol">;</span> i <span class="sh_symbol">++)</span> <span class="sh_cbracket">{</span>
  writer<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'hello, #'</span> <span class="sh_symbol">+</span> i <span class="sh_symbol">+</span> <span class="sh_string">'!</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>
writer<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'this is the end</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
write<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'finish'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'已完成所有写入。'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="84ec6584b0ee724aca9208ba830c5d7b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>事件: 'pipe'<span><a href="#all_pipe_1408" id="all_pipe_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="7be77ec14f77fc00b24c2c6090193c22"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>src</code> {<a href="#stream_class_stream_readable">Readable</a> Stream} 导流到本可写流的来源流</li>
</ul>
</div>

<div class="translate-section" data-hash="94b5f705b218c0f6665211c19fcef122"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该事件发生于可读流的 <code>pipe()</code> 方法被调用并添加本可写流作为它的目标时。

</p>
</div>

<div class="translate-section" data-hash="402e2c2ff9bf7b7653980ea93fe35bf7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> writer <span class="sh_symbol">=</span> <span class="sh_function">getWritableStreamSomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">var</span> reader <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
writer<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'pipe'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>src<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'某些东西正被导流到 writer'</span><span class="sh_symbol">);</span>
  assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span>src<span class="sh_symbol">,</span> reader<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
reader<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>writer<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="c634105a0cde0b0b2a121f7c4882445b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>事件: 'unpipe'<span><a href="#all_unpipe_1408" id="all_unpipe_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="5160ff3ceb34eefbf8896e6fac5a9379"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>src</code> {<a href="#stream_class_stream_readable">Readable</a> Stream} <a href="#stream_readable_unpipe_destination">unpiped</a> 本可写流的来源流</li>
</ul>
</div>

<div class="translate-section" data-hash="196b287378d11d8ad0db1a59ee4d8c15"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该事件发生于可读流的 <code>unpipe()</code> 方法被调用并将本可写流从它的目标移除时。

</p>
</div>

<div class="translate-section" data-hash="431cc5918013581e6b17a0745e6e1bcc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> writer <span class="sh_symbol">=</span> <span class="sh_function">getWritableStreamSomehow</span><span class="sh_symbol">();</span>
<span class="sh_keyword">var</span> reader <span class="sh_symbol">=</span> <span class="sh_function">getReadableStreamSomehow</span><span class="sh_symbol">();</span>
writer<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'unpipe'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>src<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span><span class="sh_string">'某写东西停止导流到 writer 了'</span><span class="sh_symbol">);</span>
  assert<span class="sh_symbol">.</span><span class="sh_function">equal</span><span class="sh_symbol">(</span>src<span class="sh_symbol">,</span> reader<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
reader<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>writer<span class="sh_symbol">);</span>
reader<span class="sh_symbol">.</span><span class="sh_function">unpipe</span><span class="sh_symbol">(</span>writer<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="7299be5dc32d91d58789d97f1a51fe49"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>类: stream.Duplex<span><a href="#all_stream_duplex_2816" id="all_stream_duplex_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="48319af2181f5a300ca840038c79d306"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>双工（Duplex）流同时实现了 <a href="#stream_class_stream_readable">Readable</a> 和 <a href="#stream_class_stream_writable">Writable</a> 的接口。详见下文用例。

</p>
</div>

<div class="translate-section" data-hash="13557497864831b56ea3e2175d31e0d5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一些双工流的例子：

</p>
</div>

<div class="translate-section" data-hash="b61835baedc345adbd942b077f834afa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><a href="http://nodeapi.ucdok.com/api/net.html#net_class_net_socket">TCP 嵌套字</a></li>
<li><a href="http://nodeapi.ucdok.com/api/zlib.html">zlib 流</a></li>
<li><a href="http://nodeapi.ucdok.com/api/crypto.html">crypto 流</a></li>
</ul>
</div>

<div class="translate-section" data-hash="6ba4a012e7ea7f2cf6967cde06c2b0cb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>类: stream.Transform<span><a href="#all_stream_transform_2816" id="all_stream_transform_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="fc0786697be9866ac0447e1869b496c1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>转换（Transform）流是一种输出由输入计算所得的<a href="#stream_class_stream_duplex">双工</a>流。它们同时实现了 <a href="#stream_class_stream_readable">Readable</a> 和 <a href="#stream_class_stream_writable">Writable</a> 的接口。详见下文用例。

</p>
</div>

<div class="translate-section" data-hash="797792aa3a0a4019d735c44f20442b82"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一些转换流的例子：

</p>
</div>

<div class="translate-section" data-hash="d12a1debb31bd69431be1fe420b578c4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><a href="http://nodeapi.ucdok.com/api/zlib.html">zlib 流</a></li>
<li><a href="http://nodeapi.ucdok.com/api/crypto.html">crypto 流</a></li>
</ul>
</div>

<div class="translate-section" data-hash="e048659ace3b8caf02aa1eaf69a8f60b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>面向流实现者的 API<span><a href="#all_api_2817" id="all_api_2817">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="d40503abba798c2532d0d654de16ae32"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>无论实现任何形式的流，模式都是一样的：

</p>
</div>

<div class="translate-section" data-hash="befce3d76bbdc01e0d5bb69b2833e72c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ol>
<li>在您的子类中扩充适合的父类。（<a href="http://nodeapi.ucdok.com/api/util.html#util_util_inherits_constructor_superconstructor"><code>util.inherits</code></a> 方法对此很有帮助。）</li>
<li>在您的构造函数中调用父类的构造函数，以确保内部的机制被正确初始化。</li>
<li>实现一个或多个特定的方法，参见下面的细节。</li>
</ol>
</div>

<div class="translate-section" data-hash="38be13af0c465187a85926e84bc68f27"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所扩充的类和要实现的方法取决于您要编写的流类的形式：

</p>
</div>

<div class="translate-section" data-hash="dcf758e5f1145fee51f56f63f3ad0c77"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<table>
  <thead>
    <tr>
      <th>
        <p>使用情景</p>
      </th>
      <th>
        <p>类</p>
      </th>
      <th>
        <p>要实现的方法</p>
      </th>
    </tr>
  </thead>
  <tbody><tr>
    <td>
      <p>只读</p>
    </td>
    <td>
      <p><a href="#stream_class_stream_readable_1">Readable</a></p>
    </td>
    <td>
      <p><code><a href="#stream_readable_read_size_1">_read</a></code></p>
    </td>
  </tr>
  <tr>
    <td>
      <p>只写</p>
    </td>
    <td>
      <p><a href="#stream_class_stream_writable_1">Writable</a></p>
    </td>
    <td>
      <p><code><a href="#stream_writable_write_chunk_encoding_callback_1">_write</a></code></p>
    </td>
  </tr>
  <tr>
    <td>
      <p>读写</p>
    </td>
    <td>
      <p><a href="#stream_class_stream_duplex_1">Duplex</a></p>
    </td>
    <td>
      <p><code><a href="#stream_readable_read_size_1">_read</a></code>, <code><a href="#stream_writable_write_chunk_encoding_callback_1">_write</a></code></p>
    </td>
  </tr>
  <tr>
    <td>
      <p>操作被写入数据，然后读出结果</p>
    </td>
    <td>
      <p><a href="#stream_class_stream_transform_1">Transform</a></p>
    </td>
    <td>
      <p><code>_transform</code>, <code>_flush</code></p>
    </td>
  </tr>
</tbody></table>

</div>

<div class="translate-section" data-hash="cd6f94e0bb47559ea4a1214fa81d27cf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在您的实现代码中，十分重要的一点是绝对不要调用上文<a href="#stream_api_for_stream_consumers">面向流消费者的 API</a> 中所描述的方法，否则可能在消费您的流接口的程序中产生潜在的副作用。

</p>
</div>

<div class="translate-section" data-hash="4911f6284f42b2bc2b22b2eaf282f5b6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>类: stream.Readable<span><a href="#all_stream_readable_2817" id="all_stream_readable_2817">#</a></span></h3>
</div>

<!--type=class-->

<div class="translate-section" data-hash="9609f29f14da66346be0896648e45995"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>stream.Readable</code> 是一个可被扩充的、实现了底层方法 <a href="#stream_readable_read_size_1"><code>_read(size)</code></a> 的抽象类。

</p>
</div>

<div class="translate-section" data-hash="d676eee551b5d911741a88094ccdd0de"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请阅读前文<a href="#stream_api_for_stream_consumers">面向流消费者的 API</a> 章节了解如何在您的程序中消费流。文将解释如何在您的程序中自己实现 Readable 流。

</p>
</div>

<div class="translate-section" data-hash="26d1b38a9ca3f30ce08b03377476503e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>例子: 一个计数流<span><a href="#all_70413" id="all_70413">#</a></span></h4>
</div>

<!--type=example-->

<div class="translate-section" data-hash="3eca1a7f5b4fcd5d037bd09f7fe279d7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是一个 Readable 流的基本例子。它将从 1 至 1,000,000 递增地触发数字，然后结束。

</p>
</div>

<div class="translate-section" data-hash="5c4403373dde0d9e88fc418a839a44d2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> Readable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Readable<span class="sh_symbol">;</span>
<span class="sh_keyword">var</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>
util<span class="sh_symbol">.</span><span class="sh_function">inherits</span><span class="sh_symbol">(</span>Counter<span class="sh_symbol">,</span> Readable<span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>82b9ddf426e8c00c9a49e4152bdc17fa <span class="sh_symbol">--&gt;</span>

<span class="sh_keyword">function</span> <span class="sh_function">Counter</span><span class="sh_symbol">(</span>opt<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Readable<span class="sh_symbol">.</span><span class="sh_function">call</span><span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">,</span> opt<span class="sh_symbol">);</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_max <span class="sh_symbol">=</span> <span class="sh_number">1000000</span><span class="sh_symbol">;</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_index <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>e0793f568ad1ff897e49e65b3ddff560 <span class="sh_symbol">--&gt;</span>

Counter<span class="sh_symbol">.</span><span class="sh_keyword">prototype</span><span class="sh_symbol">.</span>_read <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_index<span class="sh_symbol">++;</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">&gt;</span> <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_max<span class="sh_symbol">)</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">);</span>
  <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">var</span> str <span class="sh_symbol">=</span> <span class="sh_string">''</span> <span class="sh_symbol">+</span> i<span class="sh_symbol">;</span>
    <span class="sh_keyword">var</span> buf <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span>str<span class="sh_symbol">,</span> <span class="sh_string">'ascii'</span><span class="sh_symbol">);</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span></code></pre>
</div>

<div class="translate-section" data-hash="6b463491f116ac13a501079ac6902c49"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>例子: SimpleProtocol v1 (Sub-optimal)<span><a href="#all_simpleprotocol_v1_sub_optimal_1408" id="all_simpleprotocol_v1_sub_optimal_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="070a92535ef1969e4c60b068822f0af0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个有点类似上文提到的 <code>parseHeader</code> 函数，但它被实现成一个自定义流。同样地，请注意这个实现并未将传入数据转换成字符串。

</p>
</div>

<div class="translate-section" data-hash="897a851d637759e6002eba699211bcd9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>实际上，更好的办法是将它实现成一个 <a href="#stream_class_stream_transform">Transform</a> 流。更好的实现详见下文。

</p>
</div>

<div class="translate-section" data-hash="adbd787518a3459bddb18c660076e58a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 简易数据协议的解析器。</span>
<span class="sh_comment">// “header”是一个 JSON 对象，后面紧跟 2 个 \n 字符，以及</span>
<span class="sh_comment">// 消息主体。</span>
<span class="sh_comment">//</span>
<span class="sh_comment">// 注意: 使用 Transform 流能更简单地实现这个功能！</span>
<span class="sh_comment">// 直接使用 Readable 并不是最佳方式，详见 Transform</span>
<span class="sh_comment">// 章节下的备选例子。</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>92b91fe4ba0943c599f1f6f05063281e <span class="sh_symbol">--&gt;</span>

<span class="sh_keyword">var</span> Readable <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Readable<span class="sh_symbol">;</span>
<span class="sh_keyword">var</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>e1dc23787e59139adcb6395217f4e3e5 <span class="sh_symbol">--&gt;</span>

util<span class="sh_symbol">.</span><span class="sh_function">inherits</span><span class="sh_symbol">(</span>SimpleProtocol<span class="sh_symbol">,</span> Readable<span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>4d29aabd4a753ef32e5c07b5a795e855 <span class="sh_symbol">--&gt;</span>

<span class="sh_keyword">function</span> <span class="sh_function">SimpleProtocol</span><span class="sh_symbol">(</span>source<span class="sh_symbol">,</span> options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!(</span><span class="sh_keyword">this</span> <span class="sh_keyword">instanceof</span> SimpleProtocol<span class="sh_symbol">))</span>
    <span class="sh_keyword">return</span> <span class="sh_keyword">new</span> <span class="sh_function">SimpleProtocol</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>71fff3ee938970a8129dae873d7bafb9 <span class="sh_symbol">--&gt;</span>

  Readable<span class="sh_symbol">.</span><span class="sh_function">call</span><span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">,</span> options<span class="sh_symbol">);</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_inBody <span class="sh_symbol">=</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_sawFirstCr <span class="sh_symbol">=</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>799ee1f184ce83a81a18b06859ce3631 <span class="sh_symbol">--&gt;</span>

  <span class="sh_comment">// source 是一个可读流，比如嵌套字或文件</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_source <span class="sh_symbol">=</span> source<span class="sh_symbol">;</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>82425d2c242c810d12229bc70dce5926 <span class="sh_symbol">--&gt;</span>

  <span class="sh_keyword">var</span> self <span class="sh_symbol">=</span> <span class="sh_keyword">this</span><span class="sh_symbol">;</span>
  source<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    self<span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>2a58126aa0311fb2147d855905f037f8 <span class="sh_symbol">--&gt;</span>

  <span class="sh_comment">// 当 source 可读时做点什么</span>
  <span class="sh_comment">// read(0) 不会消费任何字节</span>
  source<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'readable'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    self<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>97e4325ee1de1bff19f7360c6127de91 <span class="sh_symbol">--&gt;</span>

  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_rawHeader <span class="sh_symbol">=</span> <span class="sh_symbol">[];</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>header <span class="sh_symbol">=</span> <span class="sh_keyword">null</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>d944bcef0e5bd7b58955e7c2e7640ca3 <span class="sh_symbol">--&gt;</span>

SimpleProtocol<span class="sh_symbol">.</span><span class="sh_keyword">prototype</span><span class="sh_symbol">.</span>_read <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>n<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!</span><span class="sh_keyword">this</span><span class="sh_symbol">.</span>_inBody<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">var</span> chunk <span class="sh_symbol">=</span> <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_source<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">();</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>7dd79fb9f97bbd18362b6ed55be8bb79 <span class="sh_symbol">--&gt;</span>

    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>split <span class="sh_symbol">===</span> <span class="sh_symbol">-</span><span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_comment">// 继续等待 \n\n</span>
      <span class="sh_comment">// 暂存数据块，并再次尝试</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_rawHeader<span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">);</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span><span class="sh_string">''</span><span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_inBody <span class="sh_symbol">=</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
      <span class="sh_keyword">var</span> h <span class="sh_symbol">=</span> chunk<span class="sh_symbol">.</span><span class="sh_function">slice</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">,</span> split<span class="sh_symbol">);</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_rawHeader<span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>h<span class="sh_symbol">);</span>
      <span class="sh_keyword">var</span> header <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">concat</span><span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">.</span>_rawHeader<span class="sh_symbol">).</span><span class="sh_function">toString</span><span class="sh_symbol">();</span>
      <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
        <span class="sh_keyword">this</span><span class="sh_symbol">.</span>header <span class="sh_symbol">=</span> JSON<span class="sh_symbol">.</span><span class="sh_function">parse</span><span class="sh_symbol">(</span>header<span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
        <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'invalid simple protocol data'</span><span class="sh_symbol">));</span>
        <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
      <span class="sh_cbracket">}</span>
      <span class="sh_comment">// 现在，我们得到了一些多余的数据，所以需要 unshift</span>
      <span class="sh_comment">// 将多余的数据放回读取队列以便我们的消费者能够读取</span>
      <span class="sh_keyword">var</span> b <span class="sh_symbol">=</span> chunk<span class="sh_symbol">.</span><span class="sh_function">slice</span><span class="sh_symbol">(</span>split<span class="sh_symbol">);</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">unshift</span><span class="sh_symbol">(</span>b<span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>9cc80d286b7ec752e3ae5fb819e63392 <span class="sh_symbol">--&gt;</span>

      <span class="sh_comment">// 并让它们知道我们完成了头部解析。</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'header'</span><span class="sh_symbol">,</span> <span class="sh_keyword">this</span><span class="sh_symbol">.</span>header<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// 从现在开始，仅需向我们的消费者提供数据。</span>
    <span class="sh_comment">// 注意不要 push(null)，因为它表明 EOF。</span>
    <span class="sh_keyword">var</span> chunk <span class="sh_symbol">=</span> <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_source<span class="sh_symbol">.</span><span class="sh_function">read</span><span class="sh_symbol">();</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>ab30c3ee01c1cd6af24cd93ee043216f <span class="sh_symbol">--&gt;</span>

<span class="sh_comment">// 用法:</span>
<span class="sh_comment">// var parser = new SimpleProtocol(source);</span>
<span class="sh_comment">// 现在 parser 是一个会触发 'header' 事件并提供已解析</span>
<span class="sh_comment">// 的头部的可读流。</span></code></pre>
</div>

<div class="translate-section" data-hash="2510916cfbabeb897b0b5cccb47cfef6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>new stream.Readable([options])<span><a href="#all_new_stream_readable_options_1408" id="all_new_stream_readable_options_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="bda1f467d2737cd4efc8b04fcbae9d11"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>options</code> {Object}<ul>
<li><code>highWaterMark</code> {Number} 停止从底层资源读取前内部缓冲区最多能存放的字节数。缺省为 16kb，对于 objectMode 流则是 16</li>
<li><code>encoding</code> {String} 若给出，则 Buffer 会被解码成所给编码的字符串。缺省为 <code>null</code></li>
<li><code>objectMode</code> {Boolean} 该流是否应该表现为对象的流。意思是说 <code>stream.read(n)</code> 返回一个单独的对象，而不是大小为 n 的 Buffer</li>
</ul>
</li>
</ul>
</div>

<div class="translate-section" data-hash="980e2f3d0b366c6405a9df465734e44e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请确保在扩充 Readable 类的类中调用 Readable 构造函数以便缓冲设定能被正确初始化。

</p>
</div>

<div class="translate-section" data-hash="545b7d9bf601e982b4d4c63dcebd332a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>readable._read(size)<span><a href="#all_readable_read_size_2817" id="all_readable_read_size_2817">#</a></span></h4>
</div>

<div class="translate-section" data-hash="60c4ecc06c69f929e699f62a28dad8f9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>size</code> {Number} 异步读取的字节数</li>
</ul>
</div>

<div class="translate-section" data-hash="f2fc78c71fce992382b58b9cb772901b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意：<strong>实现这个函数，但【不要】直接调用它。</strong>

</p>
</div>

<div class="translate-section" data-hash="ba7fbbdd02ccae32c1ed39674609db6c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个函数【不应该】被直接调用。它应该被子类所实现，并仅被 Readable 类内部方法所调用。

</p>
</div>

<div class="translate-section" data-hash="f341552208bc7c84d8d30dafb772e535"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所有 Readable 流的实现都必须提供一个 <code>_read</code> 方法来从底层资源抓取数据。

</p>
</div>

<div class="translate-section" data-hash="bf1eeb41d1a375edc06d8120a12b08f2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法以下划线开头是因为它对于定义它的类是内部的，并且不应该被用户程序直接调用。但是，你<strong>应当</strong>在您的扩充类中覆盖这个方法。

</p>
</div>

<div class="translate-section" data-hash="d44e5a381eed893239f461edc78af0fa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当数据可用时，调用 <code>readable.push(chunk)</code> 将它加入到读取队列。如果 <code>push</code> 返回 <code>false</code>，那么您应该停止读取。当 <code>_read</code> 被再次调用，您应该继续推出更多数据。

</p>
</div>

<div class="translate-section" data-hash="c9b27ee847444a87592418433b43078b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>参数 <code>size</code> 仅作查询。“read”调用返回数据的实现可以通过这个参数来知道应当抓取多少数据；其余与之无关的实现，比如 TCP 或 TLS，则可忽略这个参数，并在可用时返回数据。例如，没有必要“等到” <code>size</code> 个字节可用时才调用 <a href="#stream_readable_push_chunk_encoding"><code>stream.push(chunk)</code></a>。

</p>
</div>

<div class="translate-section" data-hash="66e50ab91e6be522a7010dbd0ce81259"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>readable.push(chunk, [encoding])<span><a href="#all_readable_push_chunk_encoding_1408" id="all_readable_push_chunk_encoding_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="3898175726d75539c353da53b29985e5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>chunk</code> {Buffer | null | String} 推入读取队列的数据块</li>
<li><code>encoding</code> {String} 字符串块的编码。必须是有效的 Buffer 编码，比如 <code>utf8</code> 或 <code>ascii</code></li>
<li>返回 {Boolean} 是否应该继续推入</li>
</ul>
</div>

<div class="translate-section" data-hash="a39f276bca8d9d20ca8b8ebd404aeaf6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意：<strong>这个函数应该被 Readable 实现者调用，【而不是】Readable 流的消费者。</strong>

</p>
</div>

<div class="translate-section" data-hash="2e54f6bd9e027535de9c87b3502c9acb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>函数 <code>_read()</code> 不会被再次调用，直到至少调用了一次 <code>push(chunk)</code>。

</p>
</div>

<div class="translate-section" data-hash="0f064594166bfa6746341afd6592469d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>Readable</code> 类的工作方式是，将数据读入一个队列，当 <code>'readable'</code> 事件发生、调用 <code>read()</code> 方法时，数据会被从队列中取出。

</p>
</div>

<div class="translate-section" data-hash="7b0eb8e54728d5e7cbee8d4074ce51c4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>push()</code> 方法会明确地向读取队列中插入一些数据。如果调用它时传入了 <code>null</code> 参数，那么它会触发数据结束信号（EOF）。

</p>
</div>

<div class="translate-section" data-hash="07391de3f63f4169ea5af1538fb3da1f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个 API 被设计成尽可能地灵活。比如说，您可以包装一个低级别的具备某种暂停/恢复机制和数据回调的数据源。这种情况下，您可以通过这种方式包装低级别来源对象：

</p>
</div>

<div class="translate-section" data-hash="517516f35d9b771620714db57511e1ce"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// source 是一个带 readStop() 和 readStart() 方法的类，</span>
<span class="sh_comment">// 以及一个当有数据时会被调用的 `ondata` 成员、一个</span>
<span class="sh_comment">// 当数据结束时会被调用的 `onend` 成员。</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>95e3ecd4260c781a6024a021bc68e57e <span class="sh_symbol">--&gt;</span>

util<span class="sh_symbol">.</span><span class="sh_function">inherits</span><span class="sh_symbol">(</span>SourceWrapper<span class="sh_symbol">,</span> Readable<span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>6007ea5475e96279c2e93631f4336467 <span class="sh_symbol">--&gt;</span>

<span class="sh_keyword">function</span> <span class="sh_function">SourceWrapper</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  Readable<span class="sh_symbol">.</span><span class="sh_function">call</span><span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">,</span> options<span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>da7e608bbd3803cd4c5f822ebe9be93c <span class="sh_symbol">--&gt;</span>

  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_source <span class="sh_symbol">=</span> <span class="sh_function">getLowlevelSourceObject</span><span class="sh_symbol">();</span>
  <span class="sh_keyword">var</span> self <span class="sh_symbol">=</span> <span class="sh_keyword">this</span><span class="sh_symbol">;</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>2cf3dadadeb5f48299a1121bf6a40a8b <span class="sh_symbol">--&gt;</span>

  <span class="sh_comment">// 每当有数据时，我们将它推入到内部缓冲区中</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_source<span class="sh_symbol">.</span>ondata <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// 如果 push() 返回 false，我们就需要暂停读取 source</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>self<span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">))</span>
      self<span class="sh_symbol">.</span>_source<span class="sh_symbol">.</span><span class="sh_function">readStop</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>4d599b75f53a964c3f5d0db3a9ad12b0 <span class="sh_symbol">--&gt;</span>

  <span class="sh_comment">// 当来源结束时，我们 push 一个 `null` 块以表示 EOF</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_source<span class="sh_symbol">.</span>onend <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    self<span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>dab6a1aaf2a7fa07f84f58bfbd3f8a61 <span class="sh_symbol">--&gt;</span>

<span class="sh_comment">// _read 会在流想要拉取更多数据时被调用</span>
<span class="sh_comment">// 本例中忽略 size 参数</span>
SourceWrapper<span class="sh_symbol">.</span><span class="sh_keyword">prototype</span><span class="sh_symbol">.</span>_read <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>size<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_source<span class="sh_symbol">.</span><span class="sh_function">readStart</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span></code></pre>
</div>

<div class="translate-section" data-hash="d7c6979b1b0e4881a39893da009f4ada"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>类: stream.Writable<span><a href="#all_stream_writable_2817" id="all_stream_writable_2817">#</a></span></h3>
</div>

<!--type=class-->

<div class="translate-section" data-hash="330ed9196f1a1d2e2da60129f13d138f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>stream.Writable</code> 是一个可被扩充的、实现了底层方法 <a href="#stream_writable_write_chunk_encoding_callback_1"><code>_write(chunk, encoding, callback)</code></a> 的抽象类。

</p>
</div>

<div class="translate-section" data-hash="9728a4b361fcf00d6f7e928b75b6de7d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请阅读前文<a href="#stream_api_for_stream_consumers">面向流消费者的 API</a> 章节了解如何在您的程序中消费可读流。下文将解释如何在您的程序中自己实现 Writable 流。

</p>
</div>

<div class="translate-section" data-hash="cb08a022f8f1c9922d9cf14c18391cc5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>new stream.Writable([options])<span><a href="#all_new_stream_writable_options_1408" id="all_new_stream_writable_options_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="60cf194e80c4b9ac4765b0b51c4692de"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>options</code> {Object}<ul>
<li><code>highWaterMark</code> {Number} <a href="#stream_writable_write_chunk_encoding_callback"><code>write()</code></a> 开始返回 <code>false</code> 的缓冲级别。缺省为 16kb，对于 <code>objectMode</code> 流则是 16</li>
<li><code>decodeStrings</code> {Boolean} 是否在传递给 <a href="#stream_writable_write_chunk_encoding_callback_1"><code>_write()</code></a> 前将字符串解码成 Buffer。缺省为 <code>true</code></li>
</ul>
</li>
</ul>
</div>

<div class="translate-section" data-hash="621a8fef9acd91a29dd89c5a3a9c3b99"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请确保在扩充 Writable 类的类中调用构造函数以便缓冲设定能被正确初始化。

</p>
</div>

<div class="translate-section" data-hash="39432c209cfb90373cda44a95e556006"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>writable._write(chunk, encoding, callback)<span><a href="#all_writable_write_chunk_encoding_callback_2817" id="all_writable_write_chunk_encoding_callback_2817">#</a></span></h4>
</div>

<div class="translate-section" data-hash="3ba018033ff1c9ce96f58544d8c7c3de"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>chunk</code> {Buffer | String} 要被写入的数据块。总会是一个 Buffer，除非 <code>decodeStrings</code> 选项被设定为 <code>false</code>。</li>
<li><code>encoding</code> {String} 如果数据块是字符串，则这里指定它的编码类型。如果数据块是 Buffer 则忽略此设定。请注意数据块<strong>总会是</strong>一个 Buffer，除非 <code>decodeStrings</code> 选项被明确设定为 <code>false</code>。</li>
<li><code>callback</code> {Function} 当您处理完所给数据块时调用此函数（可选地可附上一个错误参数）。</li>
</ul>
</div>

<div class="translate-section" data-hash="0ba9a89d8134e67ff91cfc60f66066b2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所有 Writable 流的实现必须提供一个 <a href="#stream_writable_write_chunk_encoding_callback_1"><code>_write()</code></a> 方法来将数据发送到底层资源。

</p>
</div>

<div class="translate-section" data-hash="eb5399c7d28a0ce23831a3133eab8956"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意：<strong>该函数【禁止】被直接调用。</strong>它应该被子类所实现，并仅被 Writable 内部方法所调用。

</p>
</div>

<div class="translate-section" data-hash="3a096743e04491c8531bdc330c0fb240"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用标准的 <code>callback(error)</code> 形式来调用回调以表明写入成功完成或遇到错误。

</p>
</div>

<div class="translate-section" data-hash="3cb19726b2b2af64354812f7bbb2b14e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果构造函数选项中设定了 <code>decodeStrings</code> 标志，则 <code>chunk</code> 可能会是字符串而不是 Buffer，并且 <code>encoding</code> 表明了字符串的格式。这种设计是为了支持对某些字符串数据编码提供优化处理的实现。如果您没有明确地将 <code>decodeStrings</code> 选项设定为 <code>false</code>，那么您可以安全地忽略 <code>encoding</code> 参数，并假定 <code>chunk</code> 总是一个 Buffer。

</p>
</div>

<div class="translate-section" data-hash="bf1eeb41d1a375edc06d8120a12b08f2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法以下划线开头是因为它对于定义它的类是内部的，并且不应该被用户程序直接调用。但是，你<strong>应当</strong>在您的扩充类中覆盖这个方法。

</p>
</div>

<div class="translate-section" data-hash="b5554e142e8367fa6e46ef955f315e4c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>writable._writev(chunks, callback)<span><a href="#all_writable_writev_chunks_callback_1408" id="all_writable_writev_chunks_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="ea6d21ca3e8eb5e9ed67d27773e703b1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>chunks</code> {Array} 要写入的块。每个块都遵循这种格式：<code>{ chunk: ..., encoding: ... }</code>。</li>
<li><code>callback</code> {Function} 当您处理完所给数据块时调用此函数（可选地可附上一个错误参数）。</li>
</ul>
</div>

<div class="translate-section" data-hash="8009b4298847679a6cfacd95085b37a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意：<strong>该函数【禁止】被直接调用。</strong>它应该被子类所实现，并仅被 Writable 内部方法所调用。

</p>
</div>

<div class="translate-section" data-hash="e37d1d1b06f6f039e0b01c1cb1d2dca1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该函数的实现完全是可选的，在大多数情况下都是不必要的。如果实现，它会被以所有滞留在写入队列中的数据块调用。

</p>
</div>

<div class="translate-section" data-hash="7299be5dc32d91d58789d97f1a51fe49"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>类: stream.Duplex<span><a href="#all_stream_duplex_2817" id="all_stream_duplex_2817">#</a></span></h3>
</div>

<!--type=class-->

<div class="translate-section" data-hash="51f170e427e9b46119d420f8ee804fc4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>“双工”（duplex）流同时兼具可读和可写特性，比如一个 TCP 嵌套字连接。

</p>
</div>

<div class="translate-section" data-hash="77ba1327eee24492657b797a0e047dea"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>值得注意的是，<code>stream.Duplex</code> 是一个可以像 Readable 或 Writable 一样被扩充、实现了底层方法 <code>_read(sise)</code> 和 <a href="#stream_writable_write_chunk_encoding_callback_1"><code>_write(chunk, encoding, callback)</code></a> 的抽象类。

</p>
</div>

<div class="translate-section" data-hash="ac57771dab6a6ae605ef5cccc8731b14"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>由于 JavaScript 并不具备多原型继承能力，这个类实际上继承自 Readable，并寄生自 Writable，从而让用户在双工类的扩充中能同时实现低级别的 <code>_read(n)</code> 方法和 <a href="#stream_writable_write_chunk_encoding_callback_1"><code>_write(chunk, encoding, callback)</code></a> 方法。

</p>
</div>

<div class="translate-section" data-hash="c7d7197e497006c505172d70908d869f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>new stream.Duplex(options)<span><a href="#all_new_stream_duplex_options_1408" id="all_new_stream_duplex_options_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="2a5a879409af664bf7e5d380f2e1cbe5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>options</code> {Object} Passed to both Writable and Readable
constructors. Also has the following fields:<ul>
<li><code>allowHalfOpen</code> {Boolean} Default=true.  If set to <code>false</code>, then
the stream will automatically end the readable side when the
writable side ends and vice versa.</li>
</ul>
</li>
</ul>
</div>

<div class="translate-section" data-hash="f6672eb14c4683974c98d57c30df395e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请确保在扩充 Duplex 类的类中调用构造函数以便缓冲设定能被正确初始化。

</p>
</div>

<div class="translate-section" data-hash="6ba4a012e7ea7f2cf6967cde06c2b0cb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>类: stream.Transform<span><a href="#all_stream_transform_2817" id="all_stream_transform_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="cc8e8472f34dc4067b0f7b0dda9b43f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>“转换”（transform）流实际上是一个输出与输入存在因果关系的双工流，比如 <a href="http://nodeapi.ucdok.com/api/zlib.html">zlib</a> 流或 <a href="http://nodeapi.ucdok.com/api/crypto.html">crypto</a> 流。

</p>
</div>

<div class="translate-section" data-hash="1655428d53942f30c6d758de623d6eb5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>输入和输出并无要求相同大小、相同块数或同时到达。举个例子，一个 Hash 流只会在输入结束时产生一个数据块的输出；一个 zlib 流会产生比输入小得多或大得多的输出。

</p>
</div>

<div class="translate-section" data-hash="7bc0fca064e4b12cb5015506a41662ea"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>转换类必须实现 <code>_transform()</code> 方法，而不是 <a href="#stream_readable_read_size_1"><code>_read()</code></a> 和 <a href="#stream_writable_write_chunk_encoding_callback_1"><code>_write()</code></a> 方法。可选的，也可以实现 <code>_flush()</code> 方法。（详见下文。）

</p>
</div>

<div class="translate-section" data-hash="3859e31649eef50c97fe36755831b351"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>new stream.Transform([options])<span><a href="#all_new_stream_transform_options_1408" id="all_new_stream_transform_options_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="dc7c4fbf3985007adda6b06eb3758f1c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>options</code> {Object} 传递给 Writable 和 Readable 构造函数。</li>
</ul>
</div>

<div class="translate-section" data-hash="45bf525fd66820aa45acd3e8d038dda5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请确保在扩充 Transform 类的类中调用了构造函数，以使得缓冲设定能被正确初始化。

</p>
</div>

<div class="translate-section" data-hash="c3691f27aace52c203a6b4f3f07e7a44"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>transform._transform(chunk, encoding, callback)<span><a href="#all_transform_transform_chunk_encoding_callback_1408" id="all_transform_transform_chunk_encoding_callback_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="5c80c78007c596ba459ef5ac39eb3c6e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>chunk</code> {Buffer | String} 要被转换的数据块。总是 Buffer，除非 <code>decodeStrings</code> 选项被设定为 <code>false</code>。</li>
<li><code>encoding</code> {String} 如果数据块是一个字符串，那么这就是它的编码类型。（数据块是 Buffer 则会忽略此参数。）</li>
<li><code>callback</code> {Function} 当您处理完所提供的数据块时调用此函数（可选地附上一个错误参数）。</li>
</ul>
</div>

<div class="translate-section" data-hash="92ca97688f5bcbea86a5ccce8bfd7e78"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意：<strong>该函数【禁止】被直接调用。</strong>它应该被子类所实现，并仅被 Transform 内部方法所调用。

</p>
</div>

<div class="translate-section" data-hash="df39ebabc83a11a6912c452f4069c436"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所有转换流的实现都必须提供一个 <code>_transform</code> 方法来接受输入并产生输出。

</p>
</div>

<div class="translate-section" data-hash="da7b033c724d116c11a09e55cf417846"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>_transform</code> 应当承担特定 Transform 类中所有处理被写入的字节、并将它们丢给接口的可写端的职责，进行异步 I/O，处理其它事情等等。

</p>
</div>

<div class="translate-section" data-hash="4b37678e65dc8258517e1c4b2df75242"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>调用 <code>transform.push(outputChunk)</code> 0 或多次来从输入块生成输出，取决于您想从这个数据块输出多少数据。

</p>
</div>

<div class="translate-section" data-hash="87f064cb7234008ab00513c7ae95a4ab"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>仅当当前数据块被完全消费时调用回调函数。注意，任何特定的输入块都有可能或可能不会产生输出。

</p>
</div>

<div class="translate-section" data-hash="bf1eeb41d1a375edc06d8120a12b08f2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法以下划线开头是因为它对于定义它的类是内部的，并且不应该被用户程序直接调用。但是，你<strong>应当</strong>在您的扩充类中覆盖这个方法。

</p>
</div>

<div class="translate-section" data-hash="c5036b213c68e9767712436372ec61d5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>transform._flush(callback)<span><a href="#all_transform_flush_callback_1408" id="all_transform_flush_callback_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="73eaa0ec2fa5750328c215a93bdd9e22"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>callback</code> {Function} 当您写入完毕剩下的数据后调用此函数（可选地可附上一个错误对象）。</li>
</ul>
</div>

<div class="translate-section" data-hash="5728f1e8eabb2f548aea04060b496065"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意：<strong>该函数【禁止】被直接调用。</strong>它【可以】被子类所实现，并且如果实现，仅被 Transform 内部方法所调用。

</p>
</div>

<div class="translate-section" data-hash="e83498d170be26ca18076738fa956842"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在一些情景中，您的转换操作可能需要在流的末尾多发生一点点数据。例如，一个 <code>Zlib</code> 压缩流会储存一些内部状态以便更好地压缩输出，但在最后它需要尽可能好地处理剩下的东西以使数据完整。

</p>
</div>

<div class="translate-section" data-hash="341d165e6f9a1407484f7c9b65befd4c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在这种情况中，您可以实现一个 <code>_flush</code> 方法，它会在最后被调用，在所有写入数据被消费、但在触发 <code>end</code> 表示可读端到达末尾之前。和 <code>_transform</code> 一样，只需在写入操作完成时适当地调用 <code>transform.push(chunk)</code> 零或多次。

</p>
</div>

<div class="translate-section" data-hash="bf1eeb41d1a375edc06d8120a12b08f2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法以下划线开头是因为它对于定义它的类是内部的，并且不应该被用户程序直接调用。但是，你<strong>应当</strong>在您的扩充类中覆盖这个方法。

</p>
</div>

<div class="translate-section" data-hash="5171cc3ef5c082212c1e595186987e88"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>例子: <code>SimpleProtocol</code> 解析器 v2<span><a href="#all_simpleprotocol_v2_1408" id="all_simpleprotocol_v2_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="9a15440e71435fee4e3f1e964af389d7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>上文的简易协议解析器例子能够很简单地使用高级别 <a href="#stream_class_stream_transform">Transform</a> 流类实现，类似于前文 <code>parseHeader</code> 和 <code>SimpleProtocal v1</code> 示例。

</p>
</div>

<div class="translate-section" data-hash="c305500842752904f695b39d083b58ac"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在这个示例中，输入会被导流到解析器中，而不是作为参数提供。这种做法更符合 Node 流的惯例。

</p>
</div>

<div class="translate-section" data-hash="24f775594ee602ac7b90943a19a70bae"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> Transform <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Transform<span class="sh_symbol">;</span>
util<span class="sh_symbol">.</span><span class="sh_function">inherits</span><span class="sh_symbol">(</span>SimpleProtocol<span class="sh_symbol">,</span> Transform<span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>22418c0818055544bb6f8097f23bfeff <span class="sh_symbol">--&gt;</span>

<span class="sh_keyword">function</span> <span class="sh_function">SimpleProtocol</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!(</span><span class="sh_keyword">this</span> <span class="sh_keyword">instanceof</span> SimpleProtocol<span class="sh_symbol">))</span>
    <span class="sh_keyword">return</span> <span class="sh_keyword">new</span> <span class="sh_function">SimpleProtocol</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>d3b6e2613e286e415707007520ea9c3b <span class="sh_symbol">--&gt;</span>

  Transform<span class="sh_symbol">.</span><span class="sh_function">call</span><span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">,</span> options<span class="sh_symbol">);</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_inBody <span class="sh_symbol">=</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_sawFirstCr <span class="sh_symbol">=</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_rawHeader <span class="sh_symbol">=</span> <span class="sh_symbol">[];</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>header <span class="sh_symbol">=</span> <span class="sh_keyword">null</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>e0759f379211c5242519301000ad97b4 <span class="sh_symbol">--&gt;</span>

SimpleProtocol<span class="sh_symbol">.</span><span class="sh_keyword">prototype</span><span class="sh_symbol">.</span>_transform <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> done<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!</span><span class="sh_keyword">this</span><span class="sh_symbol">.</span>_inBody<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// 检查数据块是否有 \n\n</span>
    <span class="sh_keyword">var</span> split <span class="sh_symbol">=</span> <span class="sh_symbol">-</span><span class="sh_number">1</span><span class="sh_symbol">;</span>
    <span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> chunk<span class="sh_symbol">.</span>length<span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>chunk<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">===</span> <span class="sh_number">10</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span> <span class="sh_comment">// '\n'</span>
        <span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">.</span>_sawFirstCr<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
          split <span class="sh_symbol">=</span> i<span class="sh_symbol">;</span>
          <span class="sh_keyword">break</span><span class="sh_symbol">;</span>
        <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
          <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_sawFirstCr <span class="sh_symbol">=</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
        <span class="sh_cbracket">}</span>
      <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
        <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_sawFirstCr <span class="sh_symbol">=</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
      <span class="sh_cbracket">}</span>
    <span class="sh_cbracket">}</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>e97904f9981d2c5c074f860e23f24a1a <span class="sh_symbol">--&gt;</span>

    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>split <span class="sh_symbol">===</span> <span class="sh_symbol">-</span><span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_comment">// 仍旧等待 \n\n</span>
      <span class="sh_comment">// 暂存数据块并重试。</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_rawHeader<span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_inBody <span class="sh_symbol">=</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
      <span class="sh_keyword">var</span> h <span class="sh_symbol">=</span> chunk<span class="sh_symbol">.</span><span class="sh_function">slice</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">,</span> split<span class="sh_symbol">);</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_rawHeader<span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>h<span class="sh_symbol">);</span>
      <span class="sh_keyword">var</span> header <span class="sh_symbol">=</span> Buffer<span class="sh_symbol">.</span><span class="sh_function">concat</span><span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">.</span>_rawHeader<span class="sh_symbol">).</span><span class="sh_function">toString</span><span class="sh_symbol">();</span>
      <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
        <span class="sh_keyword">this</span><span class="sh_symbol">.</span>header <span class="sh_symbol">=</span> JSON<span class="sh_symbol">.</span><span class="sh_function">parse</span><span class="sh_symbol">(</span>header<span class="sh_symbol">);</span>
      <span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
        <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">'invalid simple protocol data'</span><span class="sh_symbol">));</span>
        <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
      <span class="sh_cbracket">}</span>
      <span class="sh_comment">// 并让它们知道我们完成了头部解析。</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'header'</span><span class="sh_symbol">,</span> <span class="sh_keyword">this</span><span class="sh_symbol">.</span>header<span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>31bb3371c6edccf470ad2539a443e5a3 <span class="sh_symbol">--&gt;</span>

      <span class="sh_comment">// 现在，由于我们获得了一些额外的数据，先触发这个。</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">.</span><span class="sh_function">slice</span><span class="sh_symbol">(</span>split<span class="sh_symbol">));</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// 之后，仅需向我们的消费者原样提供数据。</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_function">done</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>49fb3d6151e897882f69ee67a4f301b4 <span class="sh_symbol">--&gt;</span>

<span class="sh_comment">// 用法:</span>
<span class="sh_comment">// var parser = new SimpleProtocol();</span>
<span class="sh_comment">// source.pipe(parser)</span>
<span class="sh_comment">// 现在 parser 是一个会触发 'header' 并带上解析后的</span>
<span class="sh_comment">// 头部数据的可读流。</span></code></pre>
</div>

<div class="translate-section" data-hash="cf4944a9f5af0d6434d9f71474dff38d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>类: stream.PassThrough<span><a href="#all_stream_passthrough_1408" id="all_stream_passthrough_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="49181845df309dfc116f76f4bacc9930"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是 <a href="#stream_class_stream_transform">Transform</a> 流的一个简单实现，将输入的字节简单地传递给输出。它的主要用途是演示和测试，但偶尔要构建某种特殊流的时候也能派上用场。

</p>
</div>

<div class="translate-section" data-hash="0b49c76683ff54acc4820adc8b6e8843"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>流：内部细节<span><a href="#all_70414" id="all_70414">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="b54f19fa0544e28fa726f749a5f43ab8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>缓冲<span><a href="#all_70415" id="all_70415">#</a></span></h3>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="6b7e5b352fed2126c99b16589614e5d9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>无论 Writable 或 Readable 流都会在内部分别叫做 <code>_writableState.buffer</code> 和 <code>_readableState.buffer</code> 的对象中缓冲数据。

</p>
</div>

<div class="translate-section" data-hash="20952475760618e4d53b7ed639032a04"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>被缓冲的数据量取决于传递给构造函数的 <code>highWaterMark</code>（最高水位线）选项。

</p>
</div>

<div class="translate-section" data-hash="30884b59f88f8e72895d3a8f1f1d6fc2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Readable 流的滞留发生于当实现调用 <a href="#stream_readable_push_chunk_encoding"><code>stream.push(chunk)</code></a> 的时候。如果流的消费者没有调用 <code>stream.read()</code>，那么数据将会一直待在内部队列，直到它被消费。

</p>
</div>

<div class="translate-section" data-hash="49ece3cbc244d39b13e6339c4ac39e77"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Writable 流的滞留发生于当用户重复调用 <a href="#stream_writable_write_chunk_encoding_callback"><code>stream.write(chunk)</code></a> 即便此时 <code>write()</code> 返回 <code>false</code> 时。

</p>
</div>

<div class="translate-section" data-hash="05864b1d99f8ca83f3f2113db873fa72"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>流，尤其是 <code>pipe()</code> 方法的初衷，是将数据的滞留量限制到一个可接受的水平，以使得不同速度的来源和目标不会淹没可用内存。

</p>
</div>

<div class="translate-section" data-hash="e8080e6d354bf8691f6ef8bf1b7a9f68"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3><code>stream.read(0)</code><span><a href="#all_stream_read_0_1408" id="all_stream_read_0_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c693e3067ab7bc3e1bc62abd086b1e02"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在某写情景中，您可能需要触发底层可读流机制的刷新，但不真正消费任何数据。在这中情况下，您可以调用 <code>stream.read(0)</code>，它总会返回 <code>null</code>。

</p>
</div>

<div class="translate-section" data-hash="cd612066bc23847a1c4505b4f0e60fd6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果内部读取缓冲低于 <code>highWaterMark</code> 水位线，并且流当前不在读取状态，那么调用 <code>read(0)</code> 会触发一个低级 <code>_read</code> 调用。

</p>
</div>

<div class="translate-section" data-hash="be0d68c47e508508d31ef1c02801d398"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>虽然几乎没有必要这么做，但您可以在 Node 内部的某些地方看到它确实这么做了，尤其是在 Readable 流类的内部。

</p>
</div>

<div class="translate-section" data-hash="5f873a067273463071d633c7f1d63690"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3><code>stream.push('')</code><span><a href="#all_stream_push_1408" id="all_stream_push_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="6fa817f68990aa6c5f3f3b0804673ddc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>推入一个零字节字符串或 Buffer（当不在 <a href="#stream_object_mode">对象模式</a> 时）有一个有趣的副作用。因为<em>它是</em>一个对 <a href="#stream_readable_push_chunk_encoding"><code>stream.push()</code></a> 的调用，它会结束 <code>reading</code> 进程。然而，它<em>没有</em>添加任何数据到可读缓冲中，所以没有东西可以被用户消费。

</p>
</div>

<div class="translate-section" data-hash="e974580b633deeb49f024bc266c5c649"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在极少数情况下，您当时没有数据提供，但您的流的消费者（或您的代码的其它部分）会通过调用 <code>stream.read(0)</code> 得知何时再次检查。在这中情况下，您<em>可以</em>调用 <code>stream.push('')</code>。

</p>
</div>

<div class="translate-section" data-hash="389bac472a5aa85efb45b51c23ce5901"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>到目前为止，这个功能唯一一个使用情景是在 <a href="http://nodeapi.ucdok.com/api/tls.html#tls_class_cryptostream">tls.CryptoStream</a> 类中，但它将在 Node v0.12 中被废弃。如果您发现您不得不使用 <code>stream.push('')</code>，请考虑另一种方式，因为几乎可以明确表明这是某种可怕的错误。

</p>
</div>

<div class="translate-section" data-hash="5314a50d1843f7a633c096aa0b7c4bd4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>与 Node 早期版本的兼容性<span><a href="#all_node_1408" id="all_node_1408">#</a></span></h3>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="17874f7342766735d2f52013528af87e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在 v0.10 之前版本的 Node 中，Readable 流的接口较为简单，同时功能和实用性也较弱。

</p>
</div>

<div class="translate-section" data-hash="b7e036e273aee528b25c4157381a1e8d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'data'</code> 事件会开始立即开始发生，而不会等待您调用 <code>read()</code> 方法。如果您需要进行某些 I/O 来决定如何处理数据，那么您只能将数据块储存到某种缓冲区中以防它们流失。</li>
<li><a href="#stream_readable_pause"><code>pause()</code></a> 方法仅起提议作用，而不保证生效。这意味着，即便当流处于暂停状态时，您仍然需要准备接收 <code>'data'</code> 事件。</li>
</ul>
</div>

<div class="translate-section" data-hash="f8c2423d99a2e6807165af2425ceafbe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在 Node v0.10 中，下文所述的 Readable 类被加入进来。为了向后兼容考虑，Readable 流会在添加了 <code>'data'</code> 事件监听器、或 <a href="#stream_readable_resume"><code>resume()</code></a> 方法被调用时切换至“流动模式”。其作用是，即便您不使用新的 <code>read()</code> 方法和 <code>'readable'</code> 事件，您也不必担心丢失 <code>'data'</code> 数据块。

</p>
</div>

<div class="translate-section" data-hash="f899b83f47ca6057943e4f3765b758f6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>大多数程序会维持正常功能，然而，这也会在下列条件下引入一种边界情况：

</p>
</div>

<div class="translate-section" data-hash="48f1929e9a57704422b3ea63e5698309"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>没有添加 <a href="#stream_event_data"><code>'data'</code> 事件</a>处理器。</li>
<li><a href="#stream_readable_resume"><code>resume()</code></a> 方法从未被调用。</li>
<li>流未被导流到任何可写目标。</li>
</ul>
</div>

<div class="translate-section" data-hash="472c460d12ec8540b032f7eb5a51533e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>举个例子，请留意下面代码：

</p>
</div>

<div class="translate-section" data-hash="709c1ab66c7f83663c8811d5bc12d7f0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 警告！不能用！</span>
net<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>08da922ddfb188b15f60f9d8d2751a66 <span class="sh_symbol">--&gt;</span>

  <span class="sh_comment">// 我们添加了一个 'end' 事件，但从未消费数据</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    <span class="sh_comment">// 它永远不会到达这里</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'我收到了您的来信（但我没看它）</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>15718ac0ffde3852abd2837cb5ffce33 <span class="sh_symbol">--&gt;</span>

<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="ac7d78ac6d0c2079dcebb5f2b21146a7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在 Node v0.10 之前的版本中，传入消息数据会被简单地丢弃。然而在 Node v0.10 及之后，socket 会一直保持暂停。

</p>
</div>

<div class="translate-section" data-hash="8f30917f3b6204ded39433e5bf33d530"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>对于这种情形的妥协方式是调用 <code>resume()</code> 方法来开启数据流：

</p>
</div>

<div class="translate-section" data-hash="8585d5f17ce4d3997ab9f4af8af2a0d1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 妥协</span>
net<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>818557d4b3cecb62fa0a224bac43a894 <span class="sh_symbol">--&gt;</span>

  socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'我收到了您的来信（但我没看它）</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>d3a1f09536e7ab650311327cd3264147 <span class="sh_symbol">--&gt;</span>

  <span class="sh_comment">// 开启数据流，并丢弃它们。</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">resume</span><span class="sh_symbol">();</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>15718ac0ffde3852abd2837cb5ffce33 <span class="sh_symbol">--&gt;</span>

<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="e522e54ddc9769e09891853239578da6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>额外的，对于切换到流动模式的新 Readable 流，v0.10 之前风格的流可以通过 <code>wrap()</code> 方法被包装成 Readable 类。

</p>
</div>

<div class="translate-section" data-hash="d6543f7f4822c1f7478e6d8c4246d8b0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>对象模式<span><a href="#all_70416" id="all_70416">#</a></span></h3>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="7d93986179dacea329e0e7433978c209"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>通常情况下，流只操作字符串和 Buffer。

</p>
</div>

<div class="translate-section" data-hash="9d564df11943ec40e8015cd6060ef09e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>处于<strong>对象模式</strong>的流除了 Buffer 和字符串外还能读出普通的 JavaScript 值。

</p>
</div>

<div class="translate-section" data-hash="d9d5a2a6bc30f43590be5dd62325e059"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个处于对象模式的 Readable 流调用 <code>stream.read(size)</code> 时总会返回单个项目，无论传入什么 size 参数。

</p>
</div>

<div class="translate-section" data-hash="177b1d697c7a4a2aeba6207af74932db"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个处于对象模式的 Writable 流总是会忽略传给 <code>stream.write(data, encoding)</code> 的 <code>encoding</code> 参数。

</p>
</div>

<div class="translate-section" data-hash="ee46425eddfb2cc8fdaf55e8ff6f95db"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>特殊值 <code>null</code> 在对象模式流中依旧保持它的特殊性。也就说，对于对象模式的可读流，<code>stream.read()</code> 返回 <code>null</code> 意味着没有更多数据，同时 <a href="#stream_readable_push_chunk_encoding"><code>stream.push(null)</code></a> 会告知流数据到达末端（<code>EOF</code>）。

</p>
</div>

<div class="translate-section" data-hash="7236f33bc0ce90f331945bb74460bfdd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Node 核心不存在对象模式的流，这种设计只被某些用户态流式库所使用。

</p>
</div>

<div class="translate-section" data-hash="62b197c34f2cd79861f01fe7c3a63f11"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>您应该在您的流子类构造函数的选项对象中设置 <code>objectMode</code>。在流的过程中设置 <code>objectMode</code> 是不安全的。

</p>
</div>

<div class="translate-section" data-hash="d43dcd8f4b7ceb3c5515b395fb580d07"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>状态对象<span><a href="#all_70417" id="all_70417">#</a></span></h3>
</div>

<div class="translate-section" data-hash="8f389c2333cbb00280c5c994c06bf70b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><a href="#stream_class_stream_readable">Readable</a> 流有一个成员对象叫作 <code>_readableState</code>。
<a href="#stream_class_stream_writable">Writable</a> 流有一个成员对象叫作 <code>_writableState</code>。
<a href="#stream_class_stream_duplex">Duplex</a> 流二者兼备。

</p>
</div>

<div class="translate-section" data-hash="3ee878448ce3528993b637ae407b0d69"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><strong>这些对象通常不应该被子类所更改。</strong>然而，如果您有一个 Duplex 或 Transform 流，它的可读端应该是 <code>objectMode</code>，但可写端却又不是 <code>objectMode</code>，那么您可以在构造函数里明确地设定合适的状态对象的标记来达到此目的。

</p>
</div>

<div class="translate-section" data-hash="b0a8e45b6363f58d6248d2ab4ad55aad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> util <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'util'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> StringDecoder <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'string_decoder'</span><span class="sh_symbol">).</span>StringDecoder<span class="sh_symbol">;</span>
<span class="sh_keyword">var</span> Transform <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'stream'</span><span class="sh_symbol">).</span>Transform<span class="sh_symbol">;</span>
util<span class="sh_symbol">.</span><span class="sh_function">inherits</span><span class="sh_symbol">(</span>JSONParseStream<span class="sh_symbol">,</span> Transform<span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>7123a6445c6afaf75360315f05cd5634 <span class="sh_symbol">--&gt;</span>

<span class="sh_comment">// 获取以 \n 分隔的 JSON 字符串数据，并丢出解析后的对象</span>
<span class="sh_keyword">function</span> <span class="sh_function">JSONParseStream</span><span class="sh_symbol">(</span>options<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!(</span><span class="sh_keyword">this</span> <span class="sh_keyword">instanceof</span> JSONParseStream<span class="sh_symbol">))</span>
    <span class="sh_keyword">return</span> <span class="sh_keyword">new</span> <span class="sh_function">JSONParseStream</span><span class="sh_symbol">(</span>options<span class="sh_symbol">);</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>1ee7fdeecca2f4145faa196231702628 <span class="sh_symbol">--&gt;</span>

  Transform<span class="sh_symbol">.</span><span class="sh_function">call</span><span class="sh_symbol">(</span><span class="sh_keyword">this</span><span class="sh_symbol">,</span> options<span class="sh_symbol">);</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_writableState<span class="sh_symbol">.</span>objectMode <span class="sh_symbol">=</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_readableState<span class="sh_symbol">.</span>objectMode <span class="sh_symbol">=</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_buffer <span class="sh_symbol">=</span> <span class="sh_string">''</span><span class="sh_symbol">;</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_decoder <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">StringDecoder</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>e80bef7f89055305490b77af751dbaea <span class="sh_symbol">--&gt;</span>

JSONParseStream<span class="sh_symbol">.</span><span class="sh_keyword">prototype</span><span class="sh_symbol">.</span>_transform <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">,</span> encoding<span class="sh_symbol">,</span> cb<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_buffer <span class="sh_symbol">+=</span> <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_decoder<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">);</span>
  <span class="sh_comment">// 以新行分割</span>
  <span class="sh_keyword">var</span> lines <span class="sh_symbol">=</span> <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_buffer<span class="sh_symbol">.</span><span class="sh_function">split</span><span class="sh_symbol">(</span><span class="sh_regexp">/\r?\n/</span><span class="sh_symbol">);</span>
  <span class="sh_comment">// 保留最后一行被缓冲</span>
  <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_buffer <span class="sh_symbol">=</span> lines<span class="sh_symbol">.</span><span class="sh_function">pop</span><span class="sh_symbol">();</span>
  <span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> l <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> l <span class="sh_symbol">&lt;</span> lines<span class="sh_symbol">.</span>length<span class="sh_symbol">;</span> l<span class="sh_symbol">++)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">var</span> line <span class="sh_symbol">=</span> lines<span class="sh_symbol">[</span>l<span class="sh_symbol">];</span>
    <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">var</span> obj <span class="sh_symbol">=</span> JSON<span class="sh_symbol">.</span><span class="sh_function">parse</span><span class="sh_symbol">(</span>line<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> er<span class="sh_symbol">);</span>
      <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
    <span class="sh_cbracket">}</span>
    <span class="sh_comment">// 推出解析后的对象到可读消费者</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_function">cb</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_symbol">&lt;!--</span> endsection <span class="sh_symbol">--&gt;</span>

<span class="sh_symbol">&lt;!--</span> section<span class="sh_symbol">:</span>5327c37bec579bd884e1991cfe0d5226 <span class="sh_symbol">--&gt;</span>

JSONParseStream<span class="sh_symbol">.</span><span class="sh_keyword">prototype</span><span class="sh_symbol">.</span>_flush <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>cb<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 仅仅处理剩下的东西</span>
  <span class="sh_keyword">var</span> rem <span class="sh_symbol">=</span> <span class="sh_keyword">this</span><span class="sh_symbol">.</span>_buffer<span class="sh_symbol">.</span><span class="sh_function">trim</span><span class="sh_symbol">();</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>rem<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">var</span> obj <span class="sh_symbol">=</span> JSON<span class="sh_symbol">.</span><span class="sh_function">parse</span><span class="sh_symbol">(</span>rem<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>er<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> er<span class="sh_symbol">);</span>
      <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
    <span class="sh_cbracket">}</span>
    <span class="sh_comment">// 推出解析后的对象到可读消费者</span>
    <span class="sh_keyword">this</span><span class="sh_symbol">.</span><span class="sh_function">push</span><span class="sh_symbol">(</span>obj<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_function">cb</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span></code></pre>
</div>

<div class="translate-section" data-hash="00223a8233286c31d52dd0c65871586a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>状态对象包含了其它调试您的程序的流的状态时有用的信息。读取它们是可以的，但越过构造函数的选项来更改它们是<strong>不安全的</strong>。

</p>
</div>

<div class="translate-section" data-hash="96d11bfca45369a7fcdbb209db713007"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

</div>
<div class="translate-section" data-hash="775a74eb860b3310e171801622f960e8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>加密（Crypto）<span><a href="#all_crypto_1408" id="all_crypto_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="e53b8b3019b2008d53a716f2c31fb12c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> 不稳定；正在讨论未来版本的API变动。会尽量减少重大变动的发生。详见下文。</code></pre>
</div>

<div class="translate-section" data-hash="b2617ab04b8de88a16947215f986445b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 <code>require('crypto')</code> 来调用该模块。

</p>
</div>

<div class="translate-section" data-hash="795a972e1f81691825079652f276000b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>crypto模块提供在HTTPS或HTTP连接中封装安全凭证的方法.

</p>
</div>

<div class="translate-section" data-hash="f3e6a55a49628baffc3127a24a0d57c9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>它提供OpenSSL中的一系列哈希方法，包括hmac、cipher、decipher、签名和验证等方法的封装。

</p>
</div>

<div class="translate-section" data-hash="0e83303b91d1bbfc207d07efed663386"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.getCiphers()<span><a href="#all_crypto_getciphers_1408" id="all_crypto_getciphers_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="a89fc2852cd2e83a42041ac7cb8afd5a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个数组，包含支持的加密算法的名字。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="ff8d4cfa42a197bfe3b1f73661eee7eb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> ciphers <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">getCiphers</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>ciphers<span class="sh_symbol">);</span> <span class="sh_comment">// ['AES-128-CBC', 'AES-128-CBC-HMAC-SHA1', ...]</span></code></pre>
</div>

<div class="translate-section" data-hash="9aa8dd51e2424f12a603f18ef90c4d8c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.getHashes()<span><a href="#all_crypto_gethashes_1408" id="all_crypto_gethashes_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ebaf3064e8e7fff1f3f0c4b84b8c19fe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个包含所支持的哈希算法的数组。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="5712ac4a9e7ff9809b823b2c8797a19d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> hashes <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">getHashes</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>hashes<span class="sh_symbol">);</span> <span class="sh_comment">// ['sha', 'sha1', 'sha1WithRSAEncryption', ...]</span></code></pre>
</div>

<div class="translate-section" data-hash="4c351c73e5e4a74ed67c5591972ed0f5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.createCredentials(details)<span><a href="#all_crypto_createcredentials_details_1408" id="all_crypto_createcredentials_details_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="15afd6793ffd679466fd3d54f8d5c867"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建一个加密凭证对象，接受一个可选的参数对象：

</p>
</div>

<div class="translate-section" data-hash="1c2f0d670be0a5899138343f1422ab04"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>pfx</code> : 一个字符串或者buffer对象，代表经PFX或者PKCS12编码产生的私钥、证书以及CA证书</li>
<li><code>key</code> : 一个字符串，代表经PEM编码产生的私钥</li>
<li><code>passphrase</code> : 私钥或者pfx的密码</li>
<li><code>cert</code> : 一个字符串，代表经PEM编码产生的证书</li>
<li><code>ca</code> : 一个字符串或者字符串数组，表示可信任的经PEM编码产生的CA证书列表</li>
<li><code>crl</code> : 一个字符串或者字符串数组，表示经PEM编码产生的CRL（证书吊销列表 Certificate Revocation List）</li>
<li><code>ciphers</code>: 一个字符串，表示需要使用或者排除的加密算法
可以在
<a href="http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT">http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT</a>
查看更多关于加密算法格式的资料。</li>
</ul>
</div>

<div class="translate-section" data-hash="ca6125ef195b2cf4fadf2afea483b33e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果没有指定<code>ca</code>，node.js会使用<a href="http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt">http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt</a>提供的公共可信任的CA列表。

</p>
</div>

<div class="translate-section" data-hash="7ff3b4843f99da28e10387128c1ecaef"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.createHash(algorithm)<span><a href="#all_crypto_createhash_algorithm_1408" id="all_crypto_createhash_algorithm_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="4b0546b5631e50c7aaffada05a69ab7a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建并返回一个哈希对象，一个使用所给算法的用于生成摘要的加密哈希。

</p>
</div>

<div class="translate-section" data-hash="9331eb1ed60a2e9503205dbf7aa63ccd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>algorithm</code> 取决与平台上所安装的 OpenSSL 版本所支持的算法。比如 <code>'sha1'</code>、<code>'md5'</code>、<code>'sha256'</code>、<code>'sha512'</code> 等等。在最近的发行版本中，<code>openssl list-message-digest-algorithms</code> 会显示可用的摘要算法。

</p>
</div>

<div class="translate-section" data-hash="60ebc5900d51c78f0bcfbd60252afa0e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例子：这段程序会计算出一个文件的 sha1 摘要值。

</p>
</div>

<div class="translate-section" data-hash="b96ef0c48b19a9247395e347567b2fa5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>s<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> d <span class="sh_symbol">=</span> shasum<span class="sh_symbol">.</span><span class="sh_function">digest</span><span class="sh_symbol">(</span><span class="sh_string">'hex'</span><span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>d <span class="sh_symbol">+</span> <span class="sh_string">'  '</span> <span class="sh_symbol">+</span> filename<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="85abfbdaada5e14670608ed6480a9102"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: Hash<span><a href="#all_hash_1408" id="all_hash_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="357840b743ca47220b9422da4c5df846"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建数据哈希摘要的类。

</p>
</div>

<div class="translate-section" data-hash="28b2dcbbc5599d6bf1ff3154f9fb3e59"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>它是一个既可读又可写的<a href="http://nodeapi.ucdok.com/api/stream.html">流</a>。所写入的数据会被用作计算哈希。当流的可写端终止后，使用 <code>read()</code> 方法来获取计算得的哈希摘要。同时也支持旧有的 <code>update</code> 和 <code>digest</code> 方法。

</p>
</div>

<div class="translate-section" data-hash="d115ca269c8615d37ce93bda91e5a29a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>通过 <code>crypto.createHash</code> 返回。

</p>
</div>

<div class="translate-section" data-hash="dc323ebf6468dda3ea01f19119694b88"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>hash.update(data, [input_encoding])<span><a href="#all_hash_update_data_input_encoding_1408" id="all_hash_update_data_input_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="9a73cdd718b00dd8401d4ed9d92c9bf4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>通过提供的数据更新哈希对象，可以通过<code>input_encoding</code>指定编码为<code>'utf8'</code>、<code>'ascii'</code>或者
<code>'binary'</code>。如果没有指定编码，将作为二进制数据（buffer）处理。

</p>
</div>

<div class="translate-section" data-hash="85dbfd72e811b71440bab55ef3f00319"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>因为它是流式数据，所以可以使用不同的数据调用很多次。

</p>
</div>

<div class="translate-section" data-hash="761ea6e786e24433d620da3cc1aa31fe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>hash.digest([encoding])<span><a href="#all_hash_digest_encoding_1408" id="all_hash_digest_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="0dea43e4131634883d6ad50dfbd80d04"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>计算传入的所有数据的摘要值。<code>encoding</code>可以是<code>'hex'</code>、<code>'binary'</code>或者<code>'base64'</code>，如果没有指定，会返回一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="04cb1b7ba6d909940690eee3bd4d7702"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意：<code>hash</code> 对象在 <code>digest()</code> 方法被调用后将不可用。

</p>
</div>

<div class="translate-section" data-hash="1743278e9bc126db8418ab01aacb0e32"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.createHmac(algorithm, key)<span><a href="#all_crypto_createhmac_algorithm_key_1408" id="all_crypto_createhmac_algorithm_key_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="21688c52fb4def768dbd1d4696ff566a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建并返回一个hmac对象，也就是通过给定的加密算法和密钥生成的加密图谱（cryptographic）。

</p>
</div>

<div class="translate-section" data-hash="21ab2651aabe9098c12e5980c2656da9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>它是一个既可读又可写的流（<a href="http://nodeapi.ucdok.com/api/stream.html">stream</a>）。写入的数据会被用于计算hmac。写入终止后，可以使用<code>read()</code>方法获取计算后的摘要值。之前版本的<code>update</code>和<code>digest</code>方法仍然支持。

</p>
</div>

<div class="translate-section" data-hash="cd630e4d9932118b0922734fa537afe7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>algorithm</code>在OpenSSL支持的算法列表中被抛弃了——见上方createHash部分。<code>key</code>是hmac算法用到的密钥。

</p>
</div>

<div class="translate-section" data-hash="cb2b4f516b66d2abba7e534f015afbc6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Class: Hmac<span><a href="#all_class_hmac_1408" id="all_class_hmac_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="9e4db680c1c412e6a47b76e1b8396e51"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用于创建hmac加密图谱（cryptographic）的类。

</p>
</div>

<div class="translate-section" data-hash="1dd14ff007ac975bb53cd21ca134b9a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>由<code>crypto.createHmac</code>返回。

</p>
</div>

<div class="translate-section" data-hash="b7b6637a1f47138c9acdfdfbf3e985cd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>hmac.update(data)<span><a href="#all_hmac_update_data_1408" id="all_hmac_update_data_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="05a8851f0aaead29cf5113733cf07e3b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>通过提供的数据更新hmac对象。因为它是流式数据，所以可以使用新数据调用很多次。

</p>
</div>

<div class="translate-section" data-hash="aa3f0a3a7e67515ccd8b21b2cdfef21a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>hmac.digest([encoding])<span><a href="#all_hmac_digest_encoding_1408" id="all_hmac_digest_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="446ebdb595866ea43e0de486c4182812"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>计算传入的所有数据的hmac摘要值。<code>encoding</code>可以是<code>'hex'</code>、<code>'binary'</code>或者<code>'base64'</code>，如果没有指定，会返回一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="9100441d876c4c0a209ee7326b28e424"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意： <code>hmac</code>对象在调用<code>digest()</code>之后就不再可用了。

</p>
</div>

<div class="translate-section" data-hash="b31b04d5c880f6dcd7a62b4498f4ec44"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.createCipher(algorithm, password)<span><a href="#all_crypto_createcipher_algorithm_password_1408" id="all_crypto_createcipher_algorithm_password_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ccc82df63a307f0d774d4dedd90aeea1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用给定的算法和密码，创建并返回一个cipher加密算法的对象。（译者：cipher 就是加密算法的意思， ssl 的 cipher 主要是对称加密算法和不对称加密算法的组合。）

</p>
</div>

<div class="translate-section" data-hash="dfd395d0e123dc329f03c0008f579919"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>algorithm</code>算法是依赖OpenSSL库的, 例如: <code>'aes192'</code>算法等。在最近发布的版本， 执行命令 <code>openssl list-cipher-algorithms</code> 就会显示出所有可用的加密算法，<code>password</code>是用来派生key和IV的，它必须是一个 <code>'binary'</code> 2进制格式的字符串或者是一个<a href="http://nodeapi.ucdok.com/api/buffer.html">buffer</a>。（译者：key表示密钥，IV表示向量在加密过程和解密过程都要使用）

</p>
</div>

<div class="translate-section" data-hash="28b2dcbbc5599d6bf1ff3154f9fb3e59"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>它是一个既可读又可写的<a href="http://nodeapi.ucdok.com/api/stream.html">流</a>。所写入的数据会被用作计算哈希。当流的可写端终止后，使用 <code>read()</code> 方法来获取计算得的哈希摘要。同时也支持旧有的 <code>update</code> 和 <code>digest</code> 方法。

</p>
</div>

<div class="translate-section" data-hash="f67a61ca46752f72e464a5cbfb111f21"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.createCipheriv(algorithm, key, iv)<span><a href="#all_crypto_createcipheriv_algorithm_key_iv_1408" id="all_crypto_createcipheriv_algorithm_key_iv_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="56ee5152a3f3b99a034cb039c7813b43"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用给定的算法、密码和向量，创建并返回一个cipher加密算法的对象。

</p>
</div>

<div class="translate-section" data-hash="2bc5e1b118d89b5225c531fe210c676e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>algorithm</code>算法和<code>createCipher()</code> 方法的参数相同.  <code>key</code>密钥是一个被算法使用的原始密钥，<code>iv</code>是一个<a href="http://en.wikipedia.org/wiki/Initialization_vector">初始化向量</a>。

</p>
</div>

<div class="translate-section" data-hash="dac910eb9ba8fe6cbb47fe96af82a248"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>key</code>密钥和<code>iv</code>向量必须是<code>'binary'</code>2进制格式的字符串或<a href="http://nodeapi.ucdok.com/api/buffer.html">buffers</a>.

</p>
</div>

<div class="translate-section" data-hash="8c8bc29c2d777f08810bf47d479395ee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Class: Cipher<span><a href="#all_class_cipher_1408" id="all_class_cipher_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="c928f6fe8035ccf3c653ce4fbb127422"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个类是用来加密数据的。

</p>
</div>

<div class="translate-section" data-hash="2238270e065cb6499b5fa1243ef91497"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个类由 <code>crypto.createCipher</code> 和 <code>crypto.createCipheriv</code> 返回。

</p>
</div>

<div class="translate-section" data-hash="eda854407f6ccece26731dcc0900e910"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Cipher加密对象是 <a href="http://nodeapi.ucdok.com/api/stream.html">streams</a>，他是具有 readable 可读和 writable 可写的。写入的纯文本数据是用来在可读流一侧加密数据的。
以前版本的<code>update</code> 和<code>final</code>方法也还是支持的。

</p>
</div>

<div class="translate-section" data-hash="e0979b035c19eca4bb42ea0433082429"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>cipher.update(data, [input_encoding], [output_encoding])<span><a href="#all_cipher_update_data_input_encoding_output_encoding_1408" id="all_cipher_update_data_input_encoding_output_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="25430feedbe7c348741052721565cff2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用<code>data</code>参数更新cipher加密对象, 它的编码<code>input_encoding</code>必须是下列给定编码的 <code>'utf8'</code>, <code>'ascii'</code> or <code>'binary'</code> 中一种。如果没有编码参数，那么打他参数必须是一个buffer。

</p>
</div>

<div class="translate-section" data-hash="4a2f589a49e824a4168f0eb91eb8204e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>参数 <code>output_encoding</code>输出编码指定了加密数据的输出格式，可以是<code>'binary'</code>, <code>'base64'</code> 或者<code>'hex'</code>，如果没有提供这个参数，buffer将会返回。

</p>
</div>

<div class="translate-section" data-hash="3d7e8eb745df97081683fdc6081d7798"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回加密内容，并且Returns the enciphered contents, 用新数据作为流的话，它可以被调用多次。

</p>
</div>

<div class="translate-section" data-hash="0248eb7f7f486173d69c678e2d6c7953"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>cipher.final([output_encoding])<span><a href="#all_cipher_final_output_encoding_1408" id="all_cipher_final_output_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="0fb4ad6b7026ac5125a5c12c51b180b6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回剩余的加密内容，<code>output_encoding</code>为<code>'binary'</code>, <code>'base64'</code> 或 <code>'hex'</code>中的任意一个。 如果没有提供编码格式，则返回一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="760742a0efef1845ea525cc7baf72e69"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注: 调用<code>final()</code>函数后<code>cipher</code> 对象不能被使用。

</p>
</div>

<div class="translate-section" data-hash="de1df0008ad279eba6bad933cfdca7db"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>cipher.setAutoPadding(auto_padding=true)<span><a href="#all_cipher_setautopadding_auto_padding_true_1408" id="all_cipher_setautopadding_auto_padding_true_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="36a8f0abf61e56eaf9d31d5d1a3936f7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>对于将输入数据自动填充到块大小的功能，你可以将其禁用。如果<code>auto_padding</code>是false， 那么整个输入数据的长度必须是加密器的块大小的整倍数，否则<code>final</code>会失败。这对非标准的填充很有用，例如使用<code>0x0</code>而不是PKCS的填充。这个函数必须在<code>cipher.final</code>之前调用。

</p>
</div>

<div class="translate-section" data-hash="a48b7b168cff7477c4a5e72a91034ffb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.createDecipher(algorithm, password)<span><a href="#all_crypto_createdecipher_algorithm_password_1408" id="all_crypto_createdecipher_algorithm_password_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="cac01c01866503a9fbca9d5fdcc69d23"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据给定的算法和密钥，创建并返回一个解密器对象。这是上述<a href="#crypto_crypto_createcipher_algorithm_password">createCipher()</a>的一个镜像。

</p>
</div>

<div class="translate-section" data-hash="6b95b405e78b1688f100abd75f6e83f7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.createDecipheriv(algorithm, key, iv)<span><a href="#all_crypto_createdecipheriv_algorithm_key_iv_1408" id="all_crypto_createdecipheriv_algorithm_key_iv_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="5f097dd1e3e48a4b48d83fa02f6641ec"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Creates and returns a decipher object, with the given algorithm, key
and iv.  This is the mirror of the <a href="#crypto_crypto_createcipheriv_algorithm_key_iv">createCipheriv()</a> above.
根据给定的算法，密钥和初始化向量，创建并返回一个解密器对象。这是上述<a href="#crypto_crypto_createcipheriv_algorithm_key_iv">createCipheriv()</a>的一个镜像。


</p>
</div>

<div class="translate-section" data-hash="96743970747c509bbb3786e96f07be3e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Class: Decipher<span><a href="#all_class_decipher_1408" id="all_class_decipher_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="037e006fe05755fc391c7b3d5dedf394"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>解密数据的类。

</p>
</div>

<div class="translate-section" data-hash="d4d3134d0ab02c7d94ac512be8f256fa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>由<code>crypto.createDecipher</code>和<code>crypto.createDecipheriv</code>返回。

</p>
</div>

<div class="translate-section" data-hash="f8ac0ac0f44d2e73afa2210490b3eddd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>解密器对象是可读写的<a href="http://nodeapi.ucdok.com/api/stream.html">流</a>对象。用被写入的加密数据生成可读的平文数据。解码器对象也支持The legacy <code>update</code>和
<code>final</code>函数。

</p>
</div>

<div class="translate-section" data-hash="b9553bf6ec00e29b3464163a06015e6a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>decipher.update(data, [input_encoding], [output_encoding])<span><a href="#all_decipher_update_data_input_encoding_output_encoding_1408" id="all_decipher_update_data_input_encoding_output_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="94d9e4b52ae6f9aaae66f7fb5b1c842b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用<code>data</code>来更新解密器，其中<code>data</code>以<code>'binary'</code>,
<code>'base64'</code> 或 <code>'hex'</code>进行编码。如果没有指明编码方式，则默认<code>data</code>是一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="476fc56f5e15d3ac458c841fd2641b37"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>output_decoding</code>指明了用以下哪种编码方式返回解密后的平文：<code>'binary'</code>, <code>'ascii'</code> 或 <code>'utf8'</code>。如果没有指明编码方式，则返回一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="49f859fbfac86ec0600fc29d35063151"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>decipher.final([output_encoding])<span><a href="#all_decipher_final_output_encoding_1408" id="all_decipher_final_output_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c869662f3b159fad3481ad2466e1915e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回剩余的加密内容，<code>output_encoding</code>为<code>'binary'</code>, <code>'ascii'</code> 或 <code>'utf8'</code>中的任意一个。如果没有指明编码方式，则返回一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="5e32cfd17658327cb61c6c10e8bf1a96"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注: 调用<code>final()</code>函数后不能使用<code>decipher</code> 对象。

</p>
</div>

<div class="translate-section" data-hash="a82641cfaf452ba4043e63a96d22340f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>decipher.setAutoPadding(auto_padding=true)<span><a href="#all_decipher_setautopadding_auto_padding_true_1408" id="all_decipher_setautopadding_auto_padding_true_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="54770bafc5c5b0cb4d3cb5d0d4c22e48"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果数据以非标准的块填充方式被加密，那么你可以禁用自动填充来防止<code>decipher.final</code>对数据进行检查和移除。这只有在输入数据的长度是加密器块大小的整倍数时才有效。这个函数必须在将数据流传递给<code>decipher.update</code>之前调用。

</p>
</div>

<div class="translate-section" data-hash="2ab8765eb4ee901b2d72a3ef326ba94c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.createSign(algorithm)<span><a href="#all_crypto_createsign_algorithm_1408" id="all_crypto_createsign_algorithm_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="29029e9d7ddc68047f19e5ebc27cf5fe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据给定的算法，创建并返回一个signing对象。在最近的OpenSSL发布版本中，<code>openssl list-public-key-algorithms</code>会列出可用的签名算法，例如<code>'RSA-SHA256'</code>。

</p>
</div>

<div class="translate-section" data-hash="d4163c63cd2e8859b71d34d2a59a66cf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Class: Sign<span><a href="#all_class_sign_1408" id="all_class_sign_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="d597dca33327b356e48e49022c9ed56e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>生成数字签名的类

</p>
</div>

<div class="translate-section" data-hash="a1bab1663bf980c288515ec577b50e43"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>由<code>crypto.createSign</code>返回。

</p>
</div>

<div class="translate-section" data-hash="57893bf1d92854c1f6b9c890aaee29e2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Sign对象是可写的<a href="http://nodeapi.ucdok.com/api/stream.html">流</a>对象。被写入的数据用来生成数字签名。当所有的数据都被写入后，<code>sign</code> 函数会返回数字签名。Sign对象也支持The legacy
<code>update</code>函数。

</p>
</div>

<div class="translate-section" data-hash="b7a9bf3e65b1266ddd6c624c1d5ad2bb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>sign.update(data)<span><a href="#all_sign_update_data_1408" id="all_sign_update_data_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="5dc19e92b06ba3cb421a176423c8938b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用<code>data</code>来更新sign对象。 This can be called many times
with new data as it is streamed.

</p>
</div>

<div class="translate-section" data-hash="8aa13d8fb315cb887e7bc0280a3359c7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>sign.sign(private_key, [output_format])<span><a href="#all_sign_sign_private_key_output_format_1408" id="all_sign_sign_private_key_output_format_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="def9956b56bb8d871ae2d308261f40e2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据所有传送给sign的更新数据来计算电子签名。<code>private_key</code>是一个包含了签名私钥的字符串，而该私钥是用PEM编码的。

</p>
</div>

<div class="translate-section" data-hash="153c112cba73841335d90f025b03cdb8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个数字签名，该签名的格式可以是<code>'binary'</code>,
<code>'hex'</code>或 <code>'base64'</code>. 如果没有指明编码方式，则返回一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="84cdb92790bc4fee1c297a20f4dc3c2d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注：调用<code>sign()</code>后不能使用<code>sign</code>对象。

</p>
</div>

<div class="translate-section" data-hash="b707ccffb014ce3faa393fe18b20a411"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.createVerify(algorithm)<span><a href="#all_crypto_createverify_algorithm_1408" id="all_crypto_createverify_algorithm_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="e79d5815b9398ba87b6d1500beee4bda"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据指明的算法，创建并返回一个验证器对象。这是上述签名器对象的镜像。

</p>
</div>

<div class="translate-section" data-hash="84cad14f6a501e1740f547d8cac89edd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Class: Verify<span><a href="#all_class_verify_1408" id="all_class_verify_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="fe0f738bcd1e374ec4bc9c5b7dc9a10c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用来验证数字签名的类。

</p>
</div>

<div class="translate-section" data-hash="e851a8b1247a66e0720d840c15cca92d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>由 <code>crypto.createVerify</code>返回。

</p>
</div>

<div class="translate-section" data-hash="85f1f64e91b96453c94609f8fa6a8a57"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>验证器对象是可写的<a href="http://nodeapi.ucdok.com/api/stream.html">流</a>对象.  被写入的数据会被用来验证提供的数字签名。在所有的数据被写入后，如果提供的数字签名有效，<code>verify</code>函数会返回真。验证器对象也支持 The legacy <code>update</code>函数。

</p>
</div>

<div class="translate-section" data-hash="32cef30126f149dcdaac652f37216628"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>verifier.update(data)<span><a href="#all_verifier_update_data_1408" id="all_verifier_update_data_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="686b1ef3fe058b6ab0c9814f2cb88edb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用数据更新验证器对象。This can be called many times
with new data as it is streamed.

</p>
</div>

<div class="translate-section" data-hash="c76f59a76c00b3e5b04dc6345f223571"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>verifier.verify(object, signature, [signature_format])<span><a href="#all_verifier_verify_object_signature_signature_format_1408" id="all_verifier_verify_object_signature_signature_format_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a10407e52ac2a5a7e019e1b87d4bd940"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用<code>object</code>和<code>signature</code>来验证被签名的数据。
<code>object</code>是一个字符串，这个字符串包含了一个被PEM编码的对象，这个对象可以是RSA公钥，DSA公钥或者X.509 证书。
<code>signature</code>是之前计算出来的数字签名，其中的 <code>signature_format</code>可以是<code>'binary'</code>, <code>'hex'</code> 或 <code>'base64'</code>.
如果没有指明编码方式，那么默认是一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="cc2fdbc5d277a0f87888d8f32f1aa199"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据数字签名对于数据和公钥的有效性，返回true或false。

</p>
</div>

<div class="translate-section" data-hash="a5dbf751e88dbd799de19ae272a4c1fc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注: 调用<code>verify()</code>函数后不能使用<code>verifier</code>对象。

</p>
</div>

<div class="translate-section" data-hash="6db56ce6ec7dd5937a545b8d82ee1796"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.createDiffieHellman(prime_length)<span><a href="#all_crypto_creatediffiehellman_prime_length_1408" id="all_crypto_creatediffiehellman_prime_length_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="42044d1839ff5f4ba56af6f43a0de50c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建一个迪菲－赫尔曼密钥交换(Diffie-Hellman key exchange)对象，并根据给定的位长度生成一个质数。所用的生成器是<code>s</code>。

</p>
</div>

<div class="translate-section" data-hash="200d8ecd5a35e2c4204d4dc596167234"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.createDiffieHellman(prime, [encoding])<span><a href="#all_crypto_creatediffiehellman_prime_encoding_1408" id="all_crypto_creatediffiehellman_prime_encoding_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b1a034533c515cd1eb571d2884f349f3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据给定的质数创建一个迪菲－赫尔曼密钥交换(Diffie-Hellman key exchange)对象。
所用的生成器是<code>2</code>。编码方式可以是<code>'binary'</code>, <code>'hex'</code>或
<code>'base64'</code>。如果没有指明编码方式，则默认是一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="2341b637f736ca7e1c1f680394afbf79"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Class: DiffieHellman<span><a href="#all_class_diffiehellman_1408" id="all_class_diffiehellman_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="79484424e9d80d14d26e219895b8e974"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建迪菲－赫尔曼密钥交换(Diffie-Hellman key exchanges)的类。

</p>
</div>

<div class="translate-section" data-hash="45e4d12e05dda0964305d13f302a1a09"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>由<code>crypto.createDiffieHellman</code>返回。

</p>
</div>

<div class="translate-section" data-hash="14ed425307b527c747d5057919747b34"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>diffieHellman.generateKeys([encoding])<span><a href="#all_diffiehellman_generatekeys_encoding_1408" id="all_diffiehellman_generatekeys_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="521ae16255374b30d80808398b9e051b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>生成迪菲－赫尔曼(Diffie-Hellman)算法的公钥和私钥，并根据指明的编码方式返回公钥。这个公钥可以转交给第三方。编码方式可以是 <code>'binary'</code>, <code>'hex'</code>或 <code>'base64'</code>.  如果没有指明编码方式，则返回一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="43b437e163a4d26bd0c5790f06e5b44b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>diffieHellman.computeSecret(other_public_key, [input_encoding], [output_encoding])<span><a href="#all_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding_1408" id="all_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="808c62a97f4baec709cbc6cebcb50b5e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>以<code>other_public_key</code>作为第三方公钥来计算共享秘密，并返回这个共享秘密。参数中的密钥会以<code>input_encoding</code>编码方式来解读，而共享密钥则会用<code>output_encoding</code>进行编码。编码方式可以是<code>'binary'</code>, <code>'hex'</code>或 <code>'base64'</code>。如果没有提供输入的编码方式，则默认为一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="26c312a3691f4f27c1b86c0d8406a6ef"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果没有指明输出的编码方式，则返回一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="29b66c2658c7c272853b55c2f3dfeef5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>diffieHellman.getPrime([encoding])<span><a href="#all_diffiehellman_getprime_encoding_1408" id="all_diffiehellman_getprime_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="e63c656ea6a5dc4473180cdd9ee5b6f8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据指明的编码格式返回迪菲－赫尔曼(Diffie-Hellman)质数，其中编码方式可以是<code>'binary'</code>, <code>'hex'</code> 或 <code>'base64'</code>。如果没有指明编码方式，则返回一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="ec6e5cc1602b36480d28042780da3be3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>diffieHellman.getGenerator([encoding])<span><a href="#all_diffiehellman_getgenerator_encoding_1408" id="all_diffiehellman_getgenerator_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="e63c656ea6a5dc4473180cdd9ee5b6f8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据指明的编码格式返回迪菲－赫尔曼(Diffie-Hellman)质数，其中编码方式可以是<code>'binary'</code>, <code>'hex'</code> 或 <code>'base64'</code>。如果没有指明编码方式，则返回一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="9d1a5a8e575c5230e3e422357ebb585a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>diffieHellman.getPublicKey([encoding])<span><a href="#all_diffiehellman_getpublickey_encoding_1408" id="all_diffiehellman_getpublickey_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="cc4a17b50af704719a420aceb0725251"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据指明的编码格式返回迪菲－赫尔曼(Diffie-Hellman)公钥，其中编码方式可以是<code>'binary'</code>, <code>'hex'</code> 或 <code>'base64'</code>。 如果没有指明编码方式，则返回一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="bda81af80547e5f4e4d0969133dd6613"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>diffieHellman.getPrivateKey([encoding])<span><a href="#all_diffiehellman_getprivatekey_encoding_1408" id="all_diffiehellman_getprivatekey_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="66c3d5c00390e9e611dab5cd2d7e2453"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>根据指明的编码格式返回迪菲－赫尔曼(Diffie-Hellman)私钥，其中编码方式可以是<code>'binary'</code>, <code>'hex'</code> 或 <code>'base64'</code>。如果没有指明编码方式，则返回一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="6a6a3d1c1613b937b528313607a65bb2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>diffieHellman.setPublicKey(public_key, [encoding])<span><a href="#all_diffiehellman_setpublickey_public_key_encoding_1408" id="all_diffiehellman_setpublickey_public_key_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="9d620b942e8ae8423d2b26fe382cacf8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置迪菲－赫尔曼(Diffie-Hellman)公钥，编码方式可以是可以是<code>'binary'</code>, <code>'hex'</code> 或 <code>'base64'</code>。如果没有指明编码方式，则返回一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="d53c7025bd7afc9e9fe371e81d552143"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>diffieHellman.setPrivateKey(private_key, [encoding])<span><a href="#all_diffiehellman_setprivatekey_private_key_encoding_1408" id="all_diffiehellman_setprivatekey_private_key_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c56e2ccb2d51d6a3109a4e0184e63929"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置迪菲－赫尔曼(Diffie-Hellman)私钥，编码方式可以是可以是<code>'binary'</code>, <code>'hex'</code> 或 <code>'base64'</code>。如果没有指明编码方式，则返回一个buffer对象。

</p>
</div>

<div class="translate-section" data-hash="f537b892341e68a510604b702380e508"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.getDiffieHellman(group_name)<span><a href="#all_crypto_getdiffiehellman_group_name_1408" id="all_crypto_getdiffiehellman_group_name_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="9590bcf721ca1b5cfc0dc6047033e313"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建一个预定义的迪菲－赫尔曼密钥交换(Diffie-Hellman key exchanges)对象。支持以下的D-H组：<code>'modp1'</code>, <code>'modp2'</code>, <code>'modp5'</code> (在<a href="http://www.rfc-editor.org/rfc/rfc2412.txt">RFC
2412</a>中定义) 和 <code>'modp14'</code>, <code>'modp15'</code>, <code>'modp16'</code>, <code>'modp17'</code>,
<code>'modp18'</code> (在 <a href="http://www.rfc-editor.org/rfc/rfc3526.txt">RFC 3526</a>中定义)。返回的对象模仿了上述 <a href="#crypto_crypto_creatediffiehellman_prime_encoding">crypto.createDiffieHellman()</a>方法所创建的对象的接口，但不会晕允许密钥交换
(例如像
<a href="#crypto_diffiehellman_setpublickey_public_key_encoding">diffieHellman.setPublicKey()</a>那样)。执行这套流程的好处是双方不需要事先生成或交换组余数，节省了处理和通信时间。

</p>
</div>

<div class="translate-section" data-hash="199c3c0e031133252349c8cfb946fba4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例子 (获取一个共享秘密):

</p>
</div>

<div class="translate-section" data-hash="c17cb487f6cdbfa8db5741992aa015ff"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">/* alice_secret和 bob_secret应该是一样的 */</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>alice_secret <span class="sh_symbol">==</span> bob_secret<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="929d6a5650663a271f29f52c0f4be4c2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.pbkdf2(password, salt, iterations, keylen, callback)<span><a href="#all_crypto_pbkdf2_password_salt_iterations_keylen_callback_1408" id="all_crypto_pbkdf2_password_salt_iterations_keylen_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b70acb24ac699bb29375e0837caafd2a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步PBKDF2提供了一个伪随机函数 HMAC-SHA1，根据给定密码的长度，salt和iterations来得出一个密钥。回调函数得到两个参数 <code>(err, derivedKey)</code>。

</p>
</div>

<div class="translate-section" data-hash="511407189f414060a6edb59c9a266982"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.pbkdf2Sync(password, salt, iterations, keylen)<span><a href="#all_crypto_pbkdf2sync_password_salt_iterations_keylen_1408" id="all_crypto_pbkdf2sync_password_salt_iterations_keylen_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="09310772478a05323173cbd96c178e92"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步 PBKDF2 函数。返回derivedKey或抛出一个错误。

</p>
</div>

<div class="translate-section" data-hash="7821ce45817722eb8395657ba1da2d62"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.randomBytes(size, [callback])<span><a href="#all_crypto_randombytes_size_callback_1408" id="all_crypto_randombytes_size_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="bd0c343712d6e952602c21ddbe1c4339"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>生成密码学强度的伪随机数据。用法：

</p>
</div>

<div class="translate-section" data-hash="b65d8c22286cfe0b7df7729bb2e1371a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 同步</span>
<span class="sh_keyword">try</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> buf <span class="sh_symbol">=</span> crypto<span class="sh_symbol">.</span><span class="sh_function">randomBytes</span><span class="sh_symbol">(</span><span class="sh_number">256</span><span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'有 %d 字节的随机数据： %s'</span><span class="sh_symbol">,</span> buf<span class="sh_symbol">.</span>length<span class="sh_symbol">,</span> buf<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span> <span class="sh_keyword">catch</span> <span class="sh_symbol">(</span>ex<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// handle error</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="2f06d861fce688c13e531f06bfc0241d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.pseudoRandomBytes(size, [callback])<span><a href="#all_crypto_pseudorandombytes_size_callback_1408" id="all_crypto_pseudorandombytes_size_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="5d41e9b06720ce77a689946eec27c5fc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>生成<em>非</em>密码学强度的伪随机数据。如果数据足够长的话会返回一个唯一的数据，但这个返回值不一定是不可预料的。基于这个原因，当不可预料性很重要时，这个函数的返回值永远都不应该被使用，例如在生成加密的密钥时。

</p>
</div>

<div class="translate-section" data-hash="d4d401daac83c36973cf4c328dd0b4c8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用法与 <code>crypto.randomBytes</code>一模一样。

</p>
</div>

<div class="translate-section" data-hash="a3cbebabd9a8e6772a735744406b8252"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>crypto.DEFAULT_ENCODING<span><a href="#all_crypto_default_encoding_1408" id="all_crypto_default_encoding_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="f99da6b7d4bb5a4555d94d4529df5378"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>对于可以接受字符串或buffer对象的函数的默认编码方式。默认值是<code>'buffer'</code>，所以默认使用Buffer对象。这是为了让crypto模块与默认<code>'binary'</code>为编码方式的遗留程序更容易兼容。

</p>
</div>

<div class="translate-section" data-hash="a8c0a979fbf2c533da3021eee88382a9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>要注意，新的程序会期待buffer对象，所以使用这个时请只作为暂时的手段。

</p>
</div>

<div class="translate-section" data-hash="5f3086092b69c58cdba8fc31f5a1d87e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Recent API Changes<span><a href="#all_recent_api_changes_1408" id="all_recent_api_changes_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="d1ffaccd5e7ea9c3c8fe102eb39818ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>早在统一的流API概念出现，以及引入Buffer对象来处理二进制数据之前，Crypto模块就被添加到Node。

</p>
</div>

<div class="translate-section" data-hash="49d176315e67768b1d5d18bbb7d579c3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>因为这样，与流有关的类中并没有其它Node类的典型函数，而且很多函数接受和返回默认的二进制编码的字符串，而不是Buffer对象。在最近的修改中，这些函数都被改成默认使用Buffer对象。

</p>
</div>

<div class="translate-section" data-hash="96d7981639c73744c05e0d01b1a02980"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这对于某些(但不是全部)使用场景来讲是重大的改变。

</p>
</div>

<div class="translate-section" data-hash="425362612fcc08afd4e065207b647b7d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例如，如果你现在使用Sign类的默认参数，然后在没有检查数据的情况下，将结果传递给Verify类，那么程序会照常工作。在以前，你会拿到一个二进制字符串，然后它传递给Verify对象；而现在，你会得到一个Buffer对象，然后把它传递给Verify对象。

</p>
</div>

<div class="translate-section" data-hash="2e7369569fbad0253cb1a1926b783389"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>但是，如果你以前是使用那些在Buffer对象上不能正常工作的字符串数据，或者以默认编码方式将二进制数据传递给加密函数的话，那你就要开始提供编码方式参数来指明你想使用的编码方式了。如果想准换回旧的风格默认使用二进制字符串，那么你需要把<code>crypto.DEFAULT_ENCODING</code>字段设为'binary'。但请注意，因为新的程序很可能会期望buffer对象，所以仅将此当做临时手段。

</p>
</div>

<div class="translate-section" data-hash="12fb0684f66a6fd6808e8446c1d63538"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

</div>
<div class="translate-section" data-hash="145c39a9e9cdc960d42e3ac0b5f4fda0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>TLS (SSL)<span><a href="#all_tls_ssl_1408" id="all_tls_ssl_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<div class="translate-section" data-hash="340ccb0b121dba15010d9d89b162e623"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 <code>require('tls')</code> 来访问此模块。

</p>
</div>

<div class="translate-section" data-hash="423b5200a968afc362ac16aa3478401f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>tls</code> 模块使用 OpenSSL 来提供传输层安全协议（Transport Layer Security）和/或安全套接层（Secure Socket Layer）：加密过的流通讯。

</p>
</div>

<div class="translate-section" data-hash="9c805f24fea54cc0b38f81efa98ee44c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>TLS/SSL 是一种公钥/私钥架构。每个客户端和服务器都必有一个私钥。一个私钥使用类似的方式创建：

</p>
</div>

<div class="translate-section" data-hash="4d5920ff6f58e691523d5f99ab5368f6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>openssl genrsa <span class="sh_symbol">-</span>out ryans<span class="sh_symbol">-</span>key<span class="sh_symbol">.</span>pem <span class="sh_number">1024</span></code></pre>
</div>

<div class="translate-section" data-hash="b874100bf595b22707137a749b56624c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所有服务器和某些客户端需要具备证书。证书是证书办法机构签发或自签发的公钥。获取证书的第一步是创建一个“证书签发申请”（CSR）文件。使用这条命令完成：

</p>
</div>

<div class="translate-section" data-hash="c06f7c7ca1a360ecddba5e64b3339b07"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>openssl req <span class="sh_symbol">-</span><span class="sh_keyword">new</span> <span class="sh_symbol">-</span>key ryans<span class="sh_symbol">-</span>key<span class="sh_symbol">.</span>pem <span class="sh_symbol">-</span>out ryans<span class="sh_symbol">-</span>csr<span class="sh_symbol">.</span>pem</code></pre>
</div>

<div class="translate-section" data-hash="25e7613185453b30d5f65edcdc3abfa0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>像这样使用 CSR 创建一个自签名证书：

</p>
</div>

<div class="translate-section" data-hash="a088da845b7d4e314e0652e362ce4e9f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>openssl x509 <span class="sh_symbol">-</span>req <span class="sh_symbol">-</span><span class="sh_keyword">in</span> ryans<span class="sh_symbol">-</span>csr<span class="sh_symbol">.</span>pem <span class="sh_symbol">-</span>signkey ryans<span class="sh_symbol">-</span>key<span class="sh_symbol">.</span>pem <span class="sh_symbol">-</span>out ryans<span class="sh_symbol">-</span>cert<span class="sh_symbol">.</span>pem</code></pre>
</div>

<div class="translate-section" data-hash="ea7f8c63b0e03e1a7f511fde3c26f151"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>又或者你可以将 CSR 发送给一个数字证书认证机构请求签名。

</p>
</div>

<div class="translate-section" data-hash="44853bd349363585ac5c52e7482b5528"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>(TODO: docs on creating a CA, for now interested users should just look at
<code>test/fixtures/keys/Makefile</code> in the Node source code)

</p>
</div>

<div class="translate-section" data-hash="7a524d3fc507c7bb6cf9edaa2900012e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>像这样创建 .pfx 或 .p12：

</p>
</div>

<div class="translate-section" data-hash="1c7248778da43fed0e23ea39a5fad33b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>openssl pkcs12 <span class="sh_symbol">-</span><span class="sh_keyword">export</span> <span class="sh_symbol">-</span><span class="sh_keyword">in</span> agent5<span class="sh_symbol">-</span>cert<span class="sh_symbol">.</span>pem <span class="sh_symbol">-</span>inkey agent5<span class="sh_symbol">-</span>key<span class="sh_symbol">.</span>pem <span class="sh_symbol">\</span>
    <span class="sh_symbol">-</span>certfile ca<span class="sh_symbol">-</span>cert<span class="sh_symbol">.</span>pem <span class="sh_symbol">-</span>out agent5<span class="sh_symbol">.</span>pfx</code></pre>
</div>

<div class="translate-section" data-hash="e33e840756a4a8db465d1075f59bb231"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>in</code>:  certificate</li>
<li><code>inkey</code>: private key</li>
<li><code>certfile</code>: all CA certs concatenated in one file like
<code>cat ca1-cert.pem ca2-cert.pem &gt; ca-cert.pem</code></li>
</ul>
</div>

<div class="translate-section" data-hash="ad90c4bebd7ed4843ed7545cd4e2eee5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Client-initiated renegotiation attack mitigation<span><a href="#all_client_initiated_renegotiation_attack_mitigation_1408" id="all_client_initiated_renegotiation_attack_mitigation_1408">#</a></span></h2>
</div>

<!-- type=misc -->

<div class="translate-section" data-hash="c86ce11a9cac72c10f68c0d7de7cef4e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>TLS协议会令客户端可以重新协商TLS会话的某些方面。但是，会话的重新协商是需要相应量的服务器端资源的，所以导致其变成一个阻断服务攻击（denial-of-service）的潜在媒介。

</p>
</div>

<div class="translate-section" data-hash="35042d6cb36695696c9dfba4206ab2b4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>为了减低这种情况的发生，重新协商被限制在每10分钟三次。如果超过这个数目，那么在<a href="#tls_class_tls_tlssocket">tls.TLSSocket</a>实例上就会分发一个错误。这个限制是可设置的：

</p>
</div>

<div class="translate-section" data-hash="a84dbdef94cc0a04e1ff41b8c164684f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>tls.CLIENT_RENEG_LIMIT</code>: 重新协商的次数限制，默认为3。</li>
</ul>
</div>

<div class="translate-section" data-hash="92c41f60e695f457431d1cb27f05551c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>tls.CLIENT_RENEG_WINDOW</code>: 重新协商窗口的秒数，默认为600（10分钟）。</li>
</ul>
</div>

<div class="translate-section" data-hash="e67d2640b986cb5702a5415006427ed5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>除非你完全理解整个机制和清楚自己要干什么，否则不要改变这个默认值。

</p>
</div>

<div class="translate-section" data-hash="d8b5e2dd0728a4d38bed43a16b5e3c97"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>要测试你的服务器的话，用命令 <code>openssl s_client -connect 地址:端口</code>连接上服务器，然后敲击<code>R&lt;CR&gt;</code>（字母键<code>R</code>加回车键）几次。

</p>
</div>

<div class="translate-section" data-hash="f25c6922f280507a9710341ef0d71309"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>NPN 和 SNI<span><a href="#all_npn_sni_1408" id="all_npn_sni_1408">#</a></span></h2>
</div>

<!-- type=misc -->

<div class="translate-section" data-hash="fd776edd1aa58460587833735f9c60fa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>NPN (Next Protocol Negotiation) and SNI (Server Name Indication) are TLS
handshake extensions allowing you:

</p>
</div>

<div class="translate-section" data-hash="5733b3456318fbf7eb007d5a378044c2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>NPN - to use one TLS server for multiple protocols (HTTP, SPDY)</li>
<li>SNI - to use one TLS server for multiple hostnames with different SSL
certificates.</li>
</ul>
</div>

<div class="translate-section" data-hash="25b47968d53b0519b1cbb40139954b27"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>tls.getCiphers()<span><a href="#all_tls_getciphers_1408" id="all_tls_getciphers_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="4abb84cb50fb1f208e41dbcff6d91da8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个数组，其中包含了所支持的SSL加密器的名字。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="44b42775ca7fc21960509673ea3bd961"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> ciphers <span class="sh_symbol">=</span> tls<span class="sh_symbol">.</span><span class="sh_function">getCiphers</span><span class="sh_symbol">();</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>ciphers<span class="sh_symbol">);</span> <span class="sh_comment">// ['AES128-SHA', 'AES256-SHA', ...]</span></code></pre>
</div>

<div class="translate-section" data-hash="2f516e2dfbe2da0ff7ec64156418d70f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>tls.createServer(options, [secureConnectionListener])<span><a href="#all_tls_createserver_options_secureconnectionlistener_1408" id="all_tls_createserver_options_secureconnectionlistener_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="f4db6ea2c98b40852ebd879b5a82b3a0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>新建一个新的 <a href="#tls_class_tls_server">tls.Server</a>.  The <code>connectionListener</code> 参数会自动设置为 <a href="#tls_event_secureconnection">secureConnection</a> 事件的监听器. 这个 <code>options</code> 对象有这些可能性:

</p>
</div>

<div class="translate-section" data-hash="716861e7800777b43efd61369becf2e9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>pfx</code>: 一个String 或<code>Buffer</code>包含了私钥, 证书和CA certs, 一般是 PFX 或者 PKCS12 格式. (Mutually exclusive with
the <code>key</code>, <code>cert</code> and <code>ca</code> options.)</li>
</ul>
</div>

<div class="translate-section" data-hash="a00a4b0d9da3e5f878f00d84b74f6465"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>key</code>: 一个字符串或 <code>Buffer</code>对象，其中包含了PEF格式的服务器的私钥。 (必需)</li>
</ul>
</div>

<div class="translate-section" data-hash="221243ca1a04baba286e9e9414b68d53"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>passphrase</code>: 私钥或pfx密码的字符串。</li>
</ul>
</div>

<div class="translate-section" data-hash="6ff4177c6e56ff50ed51584be4fc2064"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>cert</code>: A string or <code>Buffer</code> containing the certificate key of the server in
PEM format. (Required)</li>
</ul>
</div>

<div class="translate-section" data-hash="756b9899f731d900f0daa5f78a956bc2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>ca</code>: An array of strings or <code>Buffer</code>s of trusted certificates. If this is
omitted several well known "root" CAs will be used, like VeriSign.
These are used to authorize connections.</li>
</ul>
</div>

<div class="translate-section" data-hash="a1cf27a951ad56e6da360a924a696612"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>crl</code> : Either a string or list of strings of PEM encoded CRLs (Certificate
Revocation List)</li>
</ul>
</div>

<div class="translate-section" data-hash="3c7ad9da26d8acd55b65211f0fa336c3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>ciphers</code>: A string describing the ciphers to use or exclude.</li>
</ul>
</div>

<div class="translate-section" data-hash="8689ec4270155cf3c4886955506171ab"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_symbol">**</span>NOTE<span class="sh_symbol">**:</span> Previous revisions of <span class="sh_keyword">this</span> section suggested `AES256<span class="sh_symbol">-</span>SHA` as an
acceptable cipher<span class="sh_symbol">.</span> Unfortunately<span class="sh_symbol">,</span> `AES256<span class="sh_symbol">-</span>SHA` is a CBC cipher and therefore
susceptible to BEAST attacks<span class="sh_symbol">.</span> Do <span class="sh_symbol">*</span>not<span class="sh_symbol">*</span> use it<span class="sh_symbol">.</span></code></pre>
</div>

<div class="translate-section" data-hash="99a461dd4ee65a293aeff0cfdb88a13f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>handshakeTimeout</code>: Abort the connection if the SSL/TLS handshake does not
finish in this many milliseconds. The default is 120 seconds.</li>
</ul>
</div>

<div class="translate-section" data-hash="c22eb7dba237bddbcf8f3f114fa4217b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>A `<span class="sh_string">'clientError'</span>` is emitted on the `tls<span class="sh_symbol">.</span>Server` object whenever a handshake
times out<span class="sh_symbol">.</span></code></pre>
</div>

<div class="translate-section" data-hash="94e2eb3f4fa9540a706798446aa424b0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>honorCipherOrder</code> : When choosing a cipher, use the server's preferences
instead of the client preferences.</li>
</ul>
</div>

<div class="translate-section" data-hash="2944f0bc1bd10498a7fbbb4bdd882ff6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>Although<span class="sh_symbol">,</span> <span class="sh_keyword">this</span> option is disabled by <span class="sh_keyword">default</span><span class="sh_symbol">,</span> it is <span class="sh_symbol">*</span>recommended<span class="sh_symbol">*</span> that you
use <span class="sh_keyword">this</span> option <span class="sh_keyword">in</span> conjunction <span class="sh_keyword">with</span> the `ciphers` option to mitigate
BEAST attacks<span class="sh_symbol">.</span></code></pre>
</div>

<div class="translate-section" data-hash="248d168bdcf99bf77a7cb6a73d4e7b01"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>requestCert</code>: If <code>true</code> the server will request a certificate from
clients that connect and attempt to verify that certificate. Default:
<code>false</code>.</li>
</ul>
</div>

<div class="translate-section" data-hash="e745f1f97c57bc04958abd8031d66223"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>rejectUnauthorized</code>: If <code>true</code> the server will reject any connection
which is not authorized with the list of supplied CAs. This option only
has an effect if <code>requestCert</code> is <code>true</code>. Default: <code>false</code>.</li>
</ul>
</div>

<div class="translate-section" data-hash="ca52ef10e60e8f00842e31ddf1551134"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>NPNProtocols</code>: An array or <code>Buffer</code> of possible NPN protocols. (Protocols
should be ordered by their priority).</li>
</ul>
</div>

<div class="translate-section" data-hash="d0959372181d900810d301a24c12084e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>SNICallback(servername, cb)</code>: A function that will be called if client
supports SNI TLS extension. Two argument will be passed to it: <code>servername</code>,
and <code>cb</code>. <code>SNICallback</code> should invoke <code>cb(null, ctx)</code>, where <code>ctx</code> is a
SecureContext instance.
(You can use <code>crypto.createCredentials(...).context</code> to get proper
SecureContext). If <code>SNICallback</code> wasn't provided - default callback with
high-level API will be used (see below).</li>
</ul>
</div>

<div class="translate-section" data-hash="41af95080be068cdf39729f35659bd5b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>sessionTimeout</code>: An integer specifying the seconds after which TLS
session identifiers and TLS session tickets created by the server are
timed out. See <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html">SSL_CTX_set_timeout</a> for more details.</li>
</ul>
</div>

<div class="translate-section" data-hash="6939c4944d01f15ac688d730e1105171"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>sessionIdContext</code>: A string containing a opaque identifier for session
resumption. If <code>requestCert</code> is <code>true</code>, the default is MD5 hash value
generated from command-line. Otherwise, the default is not provided.</li>
</ul>
</div>

<div class="translate-section" data-hash="d9ade6c30aaadd09106f968f95cdf192"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>secureProtocol</code>: The SSL method to use, e.g. <code>SSLv3_method</code> to force
SSL version 3. The possible values depend on your installation of
OpenSSL and are defined in the constant <a href="http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_PROTOCOL_METHODS">SSL_METHODS</a>.</li>
</ul>
</div>

<div class="translate-section" data-hash="e8d35e7802c8678cf2161d0403114d69"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是一个简单的应答服务器例子：

</p>
</div>

<div class="translate-section" data-hash="c6e2097183d4b43e8183298f88a5c3ff"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> server <span class="sh_symbol">=</span> tls<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'服务器已连接'</span><span class="sh_symbol">,</span>
              socket<span class="sh_symbol">.</span>authorized <span class="sh_symbol">?</span> <span class="sh_string">'已授权'</span> <span class="sh_symbol">:</span> <span class="sh_string">'未授权'</span><span class="sh_symbol">);</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">"欢迎！</span><span class="sh_specialchar">\n</span><span class="sh_string">"</span><span class="sh_symbol">);</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'server bound'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="3a2d5fe857d8f9541136a124c2edec6c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>或者

</p>
</div>

<div class="translate-section" data-hash="a635f48c8a1543ade7ef09415c826999"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">}</span><span class="sh_symbol">;</span></code></pre>
</div>

<div class="translate-section" data-hash="114486c9b56801223fc5c1f518bd0d91"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> server <span class="sh_symbol">=</span> tls<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'服务器已连接'</span><span class="sh_symbol">,</span>
              socket<span class="sh_symbol">.</span>authorized <span class="sh_symbol">?</span> <span class="sh_string">'已授权'</span> <span class="sh_symbol">:</span> <span class="sh_string">'未授权'</span><span class="sh_symbol">);</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">"欢迎！</span><span class="sh_specialchar">\n</span><span class="sh_string">"</span><span class="sh_symbol">);</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'服务器已绑定'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
<p>您可以使用 <code>openssl s_client</code> 连接这个服务器来测试：

</p>
</div>

<div class="translate-section" data-hash="c44e1b653cefb2d12a2d49a9f9017ccb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>openssl s_client <span class="sh_symbol">-</span>connect <span class="sh_number">127.0.0.1</span><span class="sh_symbol">:</span><span class="sh_number">8000</span></code></pre>
</div>

<div class="translate-section" data-hash="79fa2c2a155ad1b356f30265e71a7f13"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>tls.connect(options, [callback])<span><a href="#all_tls_connect_options_callback_1408" id="all_tls_connect_options_callback_1408">#</a></span></h2>
<h2>tls.connect(port, [host], [options], [callback])<span><a href="#all_tls_connect_port_host_options_callback_1408" id="all_tls_connect_port_host_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="9875d5314b7d9452f8f3977dad05805b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Creates a new client connection to the given <code>port</code> and <code>host</code> (old API) or
<code>options.port</code> and <code>options.host</code>. (If <code>host</code> is omitted, it defaults to
<code>localhost</code>.) <code>options</code> should be an object which specifies:

</p>
</div>

<div class="translate-section" data-hash="85bbce9d04348d58f45485156e65dbd3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>host</code>: Host the client should connect to</li>
</ul>
</div>

<div class="translate-section" data-hash="5a385903e7c60a803de7c51aa209b4f6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>port</code>: Port the client should connect to</li>
</ul>
</div>

<div class="translate-section" data-hash="b8414c346a6cb587ee8c0bc2de99b8a3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>socket</code>: Establish secure connection on a given socket rather than
creating a new socket. If this option is specified, <code>host</code> and <code>port</code>
are ignored.</li>
</ul>
</div>

<div class="translate-section" data-hash="b4148da9770f061195012beda9aaaadd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>pfx</code>: A string or <code>Buffer</code> containing the private key, certificate and
CA certs of the server in PFX or PKCS12 format.</li>
</ul>
</div>

<div class="translate-section" data-hash="e638aa8c4a456a75da959ae99b47ebde"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>key</code>: A string or <code>Buffer</code> containing the private key of the client in
PEM format.</li>
</ul>
</div>

<div class="translate-section" data-hash="221243ca1a04baba286e9e9414b68d53"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>passphrase</code>: 私钥或pfx密码的字符串。</li>
</ul>
</div>

<div class="translate-section" data-hash="2c134781b6aea1bd7900f63fd08a8bf0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>cert</code>: A string or <code>Buffer</code> containing the certificate key of the client in
PEM format.</li>
</ul>
</div>

<div class="translate-section" data-hash="756b9899f731d900f0daa5f78a956bc2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>ca</code>: An array of strings or <code>Buffer</code>s of trusted certificates. If this is
omitted several well known "root" CAs will be used, like VeriSign.
These are used to authorize connections.</li>
</ul>
</div>

<div class="translate-section" data-hash="5fd648c58d03e83e379409a7ff2175dc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>rejectUnauthorized</code>: If <code>true</code>, the server certificate is verified against
the list of supplied CAs. An <code>'error'</code> event is emitted if verification
fails. Default: <code>true</code>.</li>
</ul>
</div>

<div class="translate-section" data-hash="b0d69cda11e2ae646635c397c661a9af"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>NPNProtocols</code>: An array of string or <code>Buffer</code> containing supported NPN
protocols. <code>Buffer</code> should have following format: <code>0x05hello0x05world</code>,
where first byte is next protocol name's length. (Passing array should
usually be much simpler: <code>['hello', 'world']</code>.)</li>
</ul>
</div>

<div class="translate-section" data-hash="8d326ddb99846504c20c310aa0d1dcd9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>servername</code>: Servername for SNI (Server Name Indication) TLS extension.</li>
</ul>
</div>

<div class="translate-section" data-hash="d9ade6c30aaadd09106f968f95cdf192"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>secureProtocol</code>: The SSL method to use, e.g. <code>SSLv3_method</code> to force
SSL version 3. The possible values depend on your installation of
OpenSSL and are defined in the constant <a href="http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_PROTOCOL_METHODS">SSL_METHODS</a>.</li>
</ul>
</div>

<div class="translate-section" data-hash="d1afea7a90224ea7f24a025a2d8ca809"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>callback</code>参数会被作为监听器添加到<a href="#tls_event_secureconnect">'secureConnect'</a>事件。

</p>
</div>

<div class="translate-section" data-hash="b232cc92a696225fb387136d12e90edc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>tls.connect()</code>返回一个<a href="#tls_class_tls_tlssocket">tls.TLSSocket</a>对象。

</p>
</div>

<div class="translate-section" data-hash="75d03e8caa718d3ba0ed7357f93fb3d3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>下面是一个上述应答服务器的客户端的例子：

</p>
</div>

<div class="translate-section" data-hash="b6d22a532088be9249a25a72b55b2f75"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> socket <span class="sh_symbol">=</span> tls<span class="sh_symbol">.</span><span class="sh_function">connect</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">,</span> options<span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'client connected'</span><span class="sh_symbol">,</span>
              socket<span class="sh_symbol">.</span>authorized <span class="sh_symbol">?</span> <span class="sh_string">'authorized'</span> <span class="sh_symbol">:</span> <span class="sh_string">'unauthorized'</span><span class="sh_symbol">);</span>
  process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">);</span>
  process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">resume</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
socket<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>data<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  server<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="3a2d5fe857d8f9541136a124c2edec6c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>或者

</p>
</div>

<div class="translate-section" data-hash="b6d22a532088be9249a25a72b55b2f75"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> socket <span class="sh_symbol">=</span> tls<span class="sh_symbol">.</span><span class="sh_function">connect</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">,</span> options<span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'client connected'</span><span class="sh_symbol">,</span>
              socket<span class="sh_symbol">.</span>authorized <span class="sh_symbol">?</span> <span class="sh_string">'authorized'</span> <span class="sh_symbol">:</span> <span class="sh_string">'unauthorized'</span><span class="sh_symbol">);</span>
  process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>socket<span class="sh_symbol">);</span>
  process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">resume</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
socket<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>data<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  server<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="f49cedfdf1a25b85e777bf14b1381865"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: tls.TLSSocket<span><a href="#all_tls_tlssocket_2816" id="all_tls_tlssocket_2816">#</a></span></h2>
</div>

<div class="translate-section" data-hash="96873ad19a9ab0b932acdb1aed297bb7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Wrapper for instance of <a href="http://nodeapi.ucdok.com/api/net.html#net_class_net_socket">net.Socket</a>, replaces internal socket read/write
routines to perform transparent encryption/decryption of incoming/outgoing data.

</p>
</div>

<div class="translate-section" data-hash="a64a876171a92ae51a3d8827a84bae48"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>new tls.TLSSocket(socket, options)<span><a href="#all_new_tls_tlssocket_socket_options_1408" id="all_new_tls_tlssocket_socket_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="53a8eae7473fd49a1388ebcf3880bdf1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Construct a new TLSSocket object from existing TCP socket.

</p>
</div>

<div class="translate-section" data-hash="96fb24a975ac6f33c1aff137518e48d5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>socket</code>是一个<a href="http://nodeapi.ucdok.com/api/net.html#net_class_net_socket">net.Socket</a>示例。

</p>
</div>

<div class="translate-section" data-hash="ebf7bcac8c2399a8d8ecb41029aef219"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>options</code>是一个可能包含以下属性的对象：

</p>
</div>

<div class="translate-section" data-hash="28a78a393e77bdb07b9a7104d848c435"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>credentials</code>: An optional credentials object from
 <code>crypto.createCredentials( ... )</code></li>
</ul>
</div>

<div class="translate-section" data-hash="ed9af971b80a7243218803084f8d9fe2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>isServer</code>: If true - TLS socket will be instantiated in server-mode</li>
</ul>
</div>

<div class="translate-section" data-hash="8a373ae4921b42b59ecf15860dc4292e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>server</code>: 一个可选的<a href="http://nodeapi.ucdok.com/api/net.html#net_class_net_server">net.Server</a>实例</li>
</ul>
</div>

<div class="translate-section" data-hash="45a1f1a872b51cb61b7b922948bb13f1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>requestCert</code>: 可选的，见<a href="#tls_tls_createsecurepair_credentials_isserver_requestcert_rejectunauthorized">tls.createSecurePair</a></li>
</ul>
</div>

<div class="translate-section" data-hash="c5551e3bef724a9467e7600d5b5bcf28"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>rejectUnauthorized</code>: 可选的，见<a href="#tls_tls_createsecurepair_credentials_isserver_requestcert_rejectunauthorized">tls.createSecurePair</a></li>
</ul>
</div>

<div class="translate-section" data-hash="228b65150582116b5f91ca6e459faf01"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>NPNProtocols</code>: 可选的，见<a href="#tls_tls_createserver_options_secureconnectionlistener">tls.createServer</a></li>
</ul>
</div>

<div class="translate-section" data-hash="8608d1c626e844d0ef6c7da726bc952b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>SNICallback</code>: 可选的，见<a href="#tls_tls_createserver_options_secureconnectionlistener">tls.createServer</a></li>
</ul>
</div>

<div class="translate-section" data-hash="9499701e53610bbb8834cd9a8b7d6fd4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>tls.createSecurePair([credentials], [isServer], [requestCert], [rejectUnauthorized])<span><a href="#all_tls_createsecurepair_credentials_isserver_requestcert_rejectunauthorized_1408" id="all_tls_createsecurepair_credentials_isserver_requestcert_rejectunauthorized_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="6b542b021eec46d9d0c2e9c51eb4275f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定性<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> 已废弃。使用 tls<span class="sh_symbol">.</span>TLSSocket 替代。</code></pre>
</div>

<div class="translate-section" data-hash="f3be51a07824e5a39b2712b99ff000f3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Creates a new secure pair object with two streams, one of which reads/writes
encrypted data, and one reads/writes cleartext data.
Generally the encrypted one is piped to/from an incoming encrypted data stream,
and the cleartext one is used as a replacement for the initial encrypted stream.

</p>
</div>

<div class="translate-section" data-hash="5d0ad606ced87dd09850c67e2ae6aa04"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>credentials</code>: A credentials object from crypto.createCredentials( ... )</li>
</ul>
</div>

<div class="translate-section" data-hash="3f03d0de187b3e91133d6f25f30d782e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>isServer</code>: A boolean indicating whether this tls connection should be
opened as a server or a client.</li>
</ul>
</div>

<div class="translate-section" data-hash="cf5eed3ed39e05608b5111a81c2f13a0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>requestCert</code>: A boolean indicating whether a server should request a
certificate from a connecting client. Only applies to server connections.</li>
</ul>
</div>

<div class="translate-section" data-hash="0de5cbebffb20da93b199dc92dd3e402"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>rejectUnauthorized</code>: A boolean indicating whether a server should
automatically reject clients with invalid certificates. Only applies to
servers with <code>requestCert</code> enabled.</li>
</ul>
</div>

<div class="translate-section" data-hash="53732014276ca47df2eac2aa9a7ec89b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>tls.createSecurePair()</code> returns a SecurePair object with <code>cleartext</code> and
<code>encrypted</code> stream properties.

</p>
</div>

<div class="translate-section" data-hash="470873050dd4852a71bd82cdf3c0cb34"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>NOTE: <code>cleartext</code> has the same APIs as <a href="#tls_class_tls_tlssocket">tls.TLSSocket</a>

</p>
</div>

<div class="translate-section" data-hash="9ef78a31e8114bed9bd037cc4b0d6fb0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: SecurePair<span><a href="#all_securepair_1408" id="all_securepair_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="8633e8f3559ae15e61b9944c4a2c3112"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>由tls.createSecurePair返回。

</p>
</div>

<div class="translate-section" data-hash="3d671130e19309c71e55139089c8d1fb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'secure'<span><a href="#all_secure_1408" id="all_secure_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="ed3f4944f5db39c57647994e6e6ceaef"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>The event is emitted from the SecurePair once the pair has successfully
established a secure connection.

</p>
</div>

<div class="translate-section" data-hash="299ad055b3c32dce1c366e9634d3a301"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Similarly to the checking for the server 'secureConnection' event,
pair.cleartext.authorized should be checked to confirm whether the certificate
used properly authorized.

</p>
</div>

<div class="translate-section" data-hash="345954ec35abc5ff98e86855d06bea1c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: tls.Server<span><a href="#all_tls_server_1408" id="all_tls_server_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="789889d3e9cfad64fbcacb271cdc8181"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>This class is a subclass of <code>net.Server</code> and has the same methods on it.
Instead of accepting just raw TCP connections, this accepts encrypted
connections using TLS or SSL.

</p>
</div>

<div class="translate-section" data-hash="3ff92e96df8f3836e0cf04044ae7e574"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'secureConnection'<span><a href="#all_secureconnection_1408" id="all_secureconnection_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="69c2224748b9e206240c0e9b3773313c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (tlsSocket) {}</code>

</p>
</div>

<div class="translate-section" data-hash="082e329b2b255ec547e24767cb5b2948"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>This event is emitted after a new connection has been successfully
handshaked. The argument is a instance of <a href="#tls_class_tls_tlssocket">tls.TLSSocket</a>. It has all the
common stream methods and events.

</p>
</div>

<div class="translate-section" data-hash="97730a28498c843eb9938d98d35a1583"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>socket.authorized</code> is a boolean value which indicates if the
client has verified by one of the supplied certificate authorities for the
server. If <code>socket.authorized</code> is false, then
<code>socket.authorizationError</code> is set to describe how authorization
failed. Implied but worth mentioning: depending on the settings of the TLS
server, you unauthorized connections may be accepted.
<code>socket.npnProtocol</code> is a string containing selected NPN protocol.
<code>socket.servername</code> is a string containing servername requested with
SNI.

</p>
</div>

<div class="translate-section" data-hash="1db79e530811fc519fbde11d3200bafe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Event: 'clientError'<span><a href="#all_event_clienterror_2816" id="all_event_clienterror_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="8139ce949ad8455f5da31c91fdd32016"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (exception, tlsSocket) { }</code>

</p>
</div>

<div class="translate-section" data-hash="2bc80bc70b43e6df809e509fad118019"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>When a client connection emits an 'error' event before secure connection is
established - it will be forwarded here.

</p>
</div>

<div class="translate-section" data-hash="7bde5932d423926521b06cbd0a1a846f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>tlsSocket</code> is the <a href="#tls_class_tls_tlssocket">tls.TLSSocket</a> that the error originated from.

</p>
</div>

<div class="translate-section" data-hash="5019fa242c7f729c02dfaee5c3e62c3b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'newSession'<span><a href="#all_newsession_1408" id="all_newsession_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="ca82772d3d75501abb88c35d0325a741"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (sessionId, sessionData) { }</code>

</p>
</div>

<div class="translate-section" data-hash="c1121341b9b0b1de637a0bb7acc87abb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Emitted on creation of TLS session. May be used to store sessions in external
storage.

</p>
</div>

<div class="translate-section" data-hash="5a565597c6e0b4ba94f4fc31cd1670a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>NOTE: adding this event listener will have an effect only on connections
established after addition of event listener.

</p>
</div>

<div class="translate-section" data-hash="9452e4e080c7ea6f916f67b90da35091"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'resumeSession'<span><a href="#all_resumesession_1408" id="all_resumesession_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="7c294f88013f31eab5318761831dd366"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (sessionId, callback) { }</code>

</p>
</div>

<div class="translate-section" data-hash="85486c8e1da8a1ac227ca68e739f9434"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Emitted when client wants to resume previous TLS session. Event listener may
perform lookup in external storage using given <code>sessionId</code>, and invoke
<code>callback(null, sessionData)</code> once finished. If session can't be resumed
(i.e. doesn't exist in storage) one may call <code>callback(null, null)</code>. Calling
<code>callback(err)</code> will terminate incoming connection and destroy socket.

</p>
</div>

<div class="translate-section" data-hash="5a565597c6e0b4ba94f4fc31cd1670a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>NOTE: adding this event listener will have an effect only on connections
established after addition of event listener.

</p>
</div>

<div class="translate-section" data-hash="ef484f68115b8f01ba61f449676de204"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.listen(port, [host], [callback])<span><a href="#all_server_listen_port_host_callback_1408" id="all_server_listen_port_host_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="0a481e6541194801d2014b6095d0953d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Begin accepting connections on the specified <code>port</code> and <code>host</code>.  If the
<code>host</code> is omitted, the server will accept connections directed to any
IPv4 address (<code>INADDR_ANY</code>).

</p>
</div>

<div class="translate-section" data-hash="cc006a56306659131437fef0e53317f7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>This function is asynchronous. The last parameter <code>callback</code> will be called
when the server has been bound.

</p>
</div>

<div class="translate-section" data-hash="da49dec74133e0d4348439b3b581f208"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>更多信息见<code>net.Server</code>。

</p>
</div>

<div class="translate-section" data-hash="9c571988346aff5c0f46e5a250ff9eb6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.close()<span><a href="#all_server_close_1408" id="all_server_close_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3346c75f394b6fc71db1f6eb4e0977be"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Stops the server from accepting new connections. This function is
asynchronous, the server is finally closed when the server emits a <code>'close'</code>
event.

</p>
</div>

<div class="translate-section" data-hash="384a0012bb072a9b692a19e31455fc8f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.address()<span><a href="#all_server_address_2816" id="all_server_address_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="b78e274f384dad79107bc28883ee3c73"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Returns the bound address, the address family name and port of the
server as reported by the operating system.  See <a href="http://nodeapi.ucdok.com/api/net.html#net_server_address">net.Server.address()</a> for
more information.

</p>
</div>

<div class="translate-section" data-hash="1f2083b6f8c1fed832e246955620eab5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.addContext(hostname, credentials)<span><a href="#all_server_addcontext_hostname_credentials_1408" id="all_server_addcontext_hostname_credentials_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="ee6395eea66aafc979e1ee8de3291c4d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Add secure context that will be used if client request's SNI hostname is
matching passed <code>hostname</code> (wildcards can be used). <code>credentials</code> can contain
<code>key</code>, <code>cert</code> and <code>ca</code>.

</p>
</div>

<div class="translate-section" data-hash="a1729ebb5af5ad68678ff775c92a05de"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.maxConnections<span><a href="#all_server_maxconnections_2816" id="all_server_maxconnections_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a06f729fe436969087cdabde0ee9fbde"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Set this property to reject connections when the server's connection count
gets high.

</p>
</div>

<div class="translate-section" data-hash="49db72aa1abba4986962d84adecdf2e4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.connections<span><a href="#all_server_connections_2816" id="all_server_connections_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="f4b5d98fd6e7acf826b418a00e477948"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>服务器的并发连接数.

</p>
</div>

<div class="translate-section" data-hash="a9a3ffc186a6dec558a77bcaddabdc0d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: CryptoStream<span><a href="#all_cryptostream_1408" id="all_cryptostream_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="6b542b021eec46d9d0c2e9c51eb4275f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定性<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_symbol">-</span> 已废弃。使用 tls<span class="sh_symbol">.</span>TLSSocket 替代。</code></pre>
</div>

<div class="translate-section" data-hash="788c070ad910ba7ebfce7613bb70a448"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是一个被加密的流。

</p>
</div>

<div class="translate-section" data-hash="1475725ecf4883e8b2ab866739062a66"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>cryptoStream.bytesWritten<span><a href="#all_cryptostream_byteswritten_1408" id="all_cryptostream_byteswritten_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c3e09cfb2346dd9fe060cd71b3ad2bd0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>A proxy to the underlying socket's bytesWritten accessor, this will return
the total bytes written to the socket, <em>including the TLS overhead</em>.

</p>
</div>

<div class="translate-section" data-hash="f49cedfdf1a25b85e777bf14b1381865"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: tls.TLSSocket<span><a href="#all_tls_tlssocket_2817" id="all_tls_tlssocket_2817">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b1d3cadfff082c381b5fb7f294e60557"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>This is a wrapped version of <a href="http://nodeapi.ucdok.com/api/net.html#net_class_net_socket">net.Socket</a> that does transparent encryption
of written data and all required TLS negotiation.

</p>
</div>

<div class="translate-section" data-hash="2ffc170c6763dc99bdc9f2e13d9191dc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>This instance implements a duplex <a href="http://nodeapi.ucdok.com/api/stream.html#stream_stream">Stream</a> interfaces.  It has all the
common stream methods and events.

</p>
</div>

<div class="translate-section" data-hash="54e79d8f825c8f9675a06ea6f0c91e39"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'secureConnect'<span><a href="#all_secureconnect_1408" id="all_secureconnect_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="77045f78ce7c61814a9b68f87037199b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>This event is emitted after a new connection has been successfully handshaked.
The listener will be called no matter if the server's certificate was
authorized or not. It is up to the user to test <code>tlsSocket.authorized</code>
to see if the server certificate was signed by one of the specified CAs.
If <code>tlsSocket.authorized === false</code> then the error can be found in
<code>tlsSocket.authorizationError</code>. Also if NPN was used - you can check
<code>tlsSocket.npnProtocol</code> for negotiated protocol.

</p>
</div>

<div class="translate-section" data-hash="2520172b9e357cdc30235508ec85f587"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>tlsSocket.authorized<span><a href="#all_tlssocket_authorized_1408" id="all_tlssocket_authorized_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3b22814050d7a1ad42014a3321e8c5ac"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>A boolean that is <code>true</code> if the peer certificate was signed by one of the
specified CAs, otherwise <code>false</code>

</p>
</div>

<div class="translate-section" data-hash="5b82d8a607f773b0915d002a67d24b6f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>tlsSocket.authorizationError<span><a href="#all_tlssocket_authorizationerror_1408" id="all_tlssocket_authorizationerror_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="33f9a6af66ba4e919acc63e146d6f3b1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>The reason why the peer's certificate has not been verified. This property
becomes available only when <code>tlsSocket.authorized === false</code>.

</p>
</div>

<div class="translate-section" data-hash="3ca263e36a43d7920f7c06705a74ba1c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>tlsSocket.getPeerCertificate()<span><a href="#all_tlssocket_getpeercertificate_1408" id="all_tlssocket_getpeercertificate_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="27ec2a904e45c18a2075d95e8510f747"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Returns an object representing the peer's certificate. The returned object has
some properties corresponding to the field of the certificate.

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="3b5121bb23864739ebfcd7cdc597cb50"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> subject<span class="sh_symbol">:</span> 
   <span class="sh_cbracket">{</span> C<span class="sh_symbol">:</span> <span class="sh_string">'UK'</span><span class="sh_symbol">,</span>
     ST<span class="sh_symbol">:</span> <span class="sh_string">'Acknack Ltd'</span><span class="sh_symbol">,</span>
     L<span class="sh_symbol">:</span> <span class="sh_string">'Rhys Jones'</span><span class="sh_symbol">,</span>
     O<span class="sh_symbol">:</span> <span class="sh_string">'node.js'</span><span class="sh_symbol">,</span>
     OU<span class="sh_symbol">:</span> <span class="sh_string">'Test TLS Certificate'</span><span class="sh_symbol">,</span>
     CN<span class="sh_symbol">:</span> <span class="sh_string">'localhost'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  issuer<span class="sh_symbol">:</span> 
   <span class="sh_cbracket">{</span> C<span class="sh_symbol">:</span> <span class="sh_string">'UK'</span><span class="sh_symbol">,</span>
     ST<span class="sh_symbol">:</span> <span class="sh_string">'Acknack Ltd'</span><span class="sh_symbol">,</span>
     L<span class="sh_symbol">:</span> <span class="sh_string">'Rhys Jones'</span><span class="sh_symbol">,</span>
     O<span class="sh_symbol">:</span> <span class="sh_string">'node.js'</span><span class="sh_symbol">,</span>
     OU<span class="sh_symbol">:</span> <span class="sh_string">'Test TLS Certificate'</span><span class="sh_symbol">,</span>
     CN<span class="sh_symbol">:</span> <span class="sh_string">'localhost'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  valid_from<span class="sh_symbol">:</span> <span class="sh_string">'Nov 11 09:52:22 2009 GMT'</span><span class="sh_symbol">,</span>
  valid_to<span class="sh_symbol">:</span> <span class="sh_string">'Nov  6 09:52:22 2029 GMT'</span><span class="sh_symbol">,</span>
  fingerprint<span class="sh_symbol">:</span> <span class="sh_string">'2A:7A:C2:DD:E5:F9:CC:53:72:35:99:7A:02:5A:71:38:52:EC:8A:DF'</span> <span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="3c696c1b0863a0d7ae3370a0d53d3a38"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>If the peer does not provide a certificate, it returns <code>null</code> or an empty
object.

</p>
</div>

<div class="translate-section" data-hash="fcd1474a6ef1904fe8bbdd9e98bbef7e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>tlsSocket.getCipher()<span><a href="#all_tlssocket_getcipher_1408" id="all_tlssocket_getcipher_1408">#</a></span></h3>
<p>Returns an object representing the cipher name and the SSL/TLS
protocol version of the current connection.

</p>
</div>

<div class="translate-section" data-hash="0e012c29b39ee4eefdc2572c80aa73b2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Example:
{ name: 'AES256-SHA', version: 'TLSv1/SSLv3' }

</p>
</div>

<div class="translate-section" data-hash="fb7086021857eb797fb7837feed993cc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>See SSL_CIPHER_get_name() and SSL_CIPHER_get_version() in
<a href="http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_CIPHERS">http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_CIPHERS</a> for more
information.

</p>
</div>

<div class="translate-section" data-hash="6aebf26a5c20151c1460dab53fee670d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>tlsSocket.renegotiate(options, callback)<span><a href="#all_tlssocket_renegotiate_options_callback_1408" id="all_tlssocket_renegotiate_options_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="92974a00c05e2ebd675be400cf160e1d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Initiate TLS renegotiation process. The <code>options</code> may contain the following
fields: <code>rejectUnauthorized</code>, <code>requestCert</code> (See <a href="#tls_tls_createserver_options_secureconnectionlistener">tls.createServer</a>
for details). <code>callback(err)</code> will be executed with <code>null</code> as <code>err</code>,
once the renegotiation is successfully completed.

</p>
</div>

<div class="translate-section" data-hash="25759b818389b8bf0faf2bac88557064"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>NOTE: Can be used to request peer's certificate after the secure connection
has been established.

</p>
</div>

<div class="translate-section" data-hash="81e3c0a8ac0f76de6eca77c8fb6a2de3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>ANOTHER NOTE: When running as the server, socket will be destroyed
with an error after <code>handshakeTimeout</code> timeout.

</p>
</div>

<div class="translate-section" data-hash="5d3df9e17ca60b04844b3c918d24d497"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>tlsSocket.address()<span><a href="#all_tlssocket_address_1408" id="all_tlssocket_address_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="4c1be53de58495e9fb6e229548860f86"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Returns the bound address, the address family name and port of the
underlying socket as reported by the operating system. Returns an
object with three properties, e.g.
<code>{ port: 12346, family: 'IPv4', address: '127.0.0.1' }</code>

</p>
</div>

<div class="translate-section" data-hash="5039928eec6dad1197c2da3834f884ee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>tlsSocket.remoteAddress<span><a href="#all_tlssocket_remoteaddress_1408" id="all_tlssocket_remoteaddress_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3875d73c871ccf8b6152db536146f839"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>远程IP地址的字符串表示。例如，<code>'74.125.127.100'</code>或 <code>'2001:4860:a005::68'</code>。

</p>
</div>

<div class="translate-section" data-hash="67693d1184bf4c7920ee5889bb87714e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>tlsSocket.remotePort<span><a href="#all_tlssocket_remoteport_1408" id="all_tlssocket_remoteport_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="751ae8945ade1e8befb3ec862d6adf3a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>远程端口的数值表示。例如， <code>443</code>。

</p>
</div>

<div class="translate-section" data-hash="6a17eb3a7201157bc6c3d2b89e9d0667"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>tlsSocket.localAddress<span><a href="#all_tlssocket_localaddress_1408" id="all_tlssocket_localaddress_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c6f975d7c149827a134681157c4daa3c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>本地IP地址的字符串表达。

</p>
</div>

<div class="translate-section" data-hash="c566329dd5f7bd371236b00e65b5ada7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>tlsSocket.localPort<span><a href="#all_tlssocket_localport_1408" id="all_tlssocket_localport_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="64f28eee3970fa06e346bcf936e88710"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>本地端口的数值表示。

</p>
</div>

<div class="translate-section" data-hash="74a1cf52a8575492af1662567f712989"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

</div>
<div class="translate-section" data-hash="5105d16a0fb48d568d30f770d7c784b7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>字符串解码器<span><a href="#all_70418" id="all_70418">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<div class="translate-section" data-hash="0b7e074adaf999f0fb2ec8f0afe2dfa8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>通过 <code>require('string_decoder')</code> 使用这个模块。这个模块将一个 Buffer 解码成一个字符串。他是 <code>buffer.toString()</code> 的一个简单接口，但提供对 utf8 的支持。

</p>
</div>

<div class="translate-section" data-hash="f4d3b3a50682138a4a5a4a21e24d4949"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> euro <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">([</span><span class="sh_number">0xE2</span><span class="sh_symbol">,</span> <span class="sh_number">0x82</span><span class="sh_symbol">,</span> <span class="sh_number">0xAC</span><span class="sh_symbol">]);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>decoder<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>euro<span class="sh_symbol">));</span></code></pre>
</div>

<div class="translate-section" data-hash="1d0864636f9a3eb1a19c0a626d3bd3b2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: StringDecoder<span><a href="#all_stringdecoder_1408" id="all_stringdecoder_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="34ead82832a98efaf0915e47fff5cdf1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>接受 <code>encoding</code> 一个参数，默认是 <code>utf8</code>。

</p>
</div>

<div class="translate-section" data-hash="b873fc72230c9392fbc783329f5b898b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>decoder.write(buffer)<span><a href="#all_decoder_write_buffer_1408" id="all_decoder_write_buffer_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="5ec106690a3cddf6485a6ae973302c67"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回解码后的字符串。

</p>
</div>

<div class="translate-section" data-hash="2fb6f16fe359904385951605704c76cd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>decoder.end()<span><a href="#all_decoder_end_1408" id="all_decoder_end_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a0a46011434504228348da8758a5f8b9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回 Buffer 中剩下的末尾字节。

</p>
</div>
<div class="translate-section" data-hash="383365af4859ecb16a618d78b5380dcd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>File System<span><a href="#all_file_system_1408" id="all_file_system_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<!--name=fs-->

<div class="translate-section" data-hash="a959beadee2543d33a339fb2b6adee77"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>文件系统模块是一个简单包装的标准 POSIX 文件 I/O 操作方法集。您可以通过调用<code>require('fs')</code>来获取该模块。文件系统模块中的所有方法均有异步和同步版本。 

</p>
</div>

<div class="translate-section" data-hash="744c870c2e4118b9ba8cc3b275c0de0c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>文件系统模块中的异步方法需要一个完成时的回调函数作为最后一个传入形参。
回调函数的构成由您调用的异步方法所决定，通常情况下回调函数的第一个形参为返回的错误信息。
如果异步操作执行正确并返回，该错误形参则为<code>null</code>或者<code>undefined</code>。

</p>
</div>

<div class="translate-section" data-hash="01a7efa5dd1801f3d8ad40624826f1b2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果您使用的是同步版本的操作方法，则一旦出现错误，会以通常的抛出错误的形式返回错误。
你可以用<code>try</code>和<code>catch</code>等语句来拦截错误并使程序继续进行。

</p>
</div>

<div class="translate-section" data-hash="9b25422186be06ea81ece9d4e13c67ce"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这里是一个异步版本的例子：

</p>
</div>

<div class="translate-section" data-hash="0a55bbb96e5f406d374057de37447ed2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>fs<span class="sh_symbol">.</span><span class="sh_function">unlink</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/hello'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'successfully deleted /tmp/hello'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="50e7a7acd0381b23249c2d1d95793e0a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是同步版本的例子:

</p>
</div>

<div class="translate-section" data-hash="c9cdb0944cf222d71542dafb0606e67c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>fs<span class="sh_symbol">.</span><span class="sh_function">unlinkSync</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/hello'</span><span class="sh_symbol">)</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'successfully deleted /tmp/hello'</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="56dd1eb95416f521403ed6cc3457b68a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当使用异步版本时不能保证执行顺序,因此下面这个例子很容易出错:

</p>
</div>

<div class="translate-section" data-hash="557880bd680c218e4a3215376e19d56c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>fs<span class="sh_symbol">.</span><span class="sh_function">rename</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/hello'</span><span class="sh_symbol">,</span> <span class="sh_string">'/tmp/world'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'renamed complete'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
fs<span class="sh_symbol">.</span><span class="sh_function">stat</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/world'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> stats<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'stats: '</span> <span class="sh_symbol">+</span> JSON<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">(</span>stats<span class="sh_symbol">));</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="d59c8b09ddc59ead5a12723248df8c4b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>fs.stat</code>有可能在<code>fs.rename</code>前执行.要等到正确的执行顺序应该用下面的方法:

</p>
</div>

<div class="translate-section" data-hash="708c77b5d12454a965716a93869cdf4b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>fs<span class="sh_symbol">.</span><span class="sh_function">rename</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/hello'</span><span class="sh_symbol">,</span> <span class="sh_string">'/tmp/world'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  fs<span class="sh_symbol">.</span><span class="sh_function">stat</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/world'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> stats<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'stats: '</span> <span class="sh_symbol">+</span> JSON<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">(</span>stats<span class="sh_symbol">));</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="f24079a9833bffec59e0fb619f09216d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在繁重的任务中,<em>强烈推荐</em>使用这些函数的异步版本.同步版本会阻塞进程,直到完成处理,也就是说会暂停所有的连接.

</p>
</div>

<div class="translate-section" data-hash="e50d6dc51409af3b53cb8909fb9cf1ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>可以使用文件名的相对路径, 但是记住这个路径是相对于<code>process.cwd()</code>的.

</p>
</div>

<div class="translate-section" data-hash="3bd191edd75018c25ad9d0bd7cca10cc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>大部分的文件系统(fs)函数可以忽略回调函数(callback)这个参数.如果忽略它,将会由一个默认回调函数(callback)来重新抛出(rethrow)错误.要获得原调用点的堆栈跟踪(trace)信息,需要在环境变量里设置NODE_DEBUG.

</p>
</div>

<div class="translate-section" data-hash="381590b65905dc9c380f5ef68334310f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>$ env NODE_DEBUG<span class="sh_symbol">=</span>fs node script<span class="sh_symbol">.</span>js
fs<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">66</span>
        <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
              <span class="sh_symbol">^</span>
<span class="sh_predef_func">Error</span><span class="sh_symbol">:</span> EISDIR<span class="sh_symbol">,</span> read
    at <span class="sh_function">rethrow</span> <span class="sh_symbol">(</span>fs<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">61</span><span class="sh_symbol">:</span><span class="sh_number">21</span><span class="sh_symbol">)</span>
    at <span class="sh_function">maybeCallback</span> <span class="sh_symbol">(</span>fs<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">79</span><span class="sh_symbol">:</span><span class="sh_number">42</span><span class="sh_symbol">)</span>
    at <span class="sh_predef_func">Object</span><span class="sh_symbol">.</span>fs<span class="sh_symbol">.</span><span class="sh_function">readFile</span> <span class="sh_symbol">(</span>fs<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">153</span><span class="sh_symbol">:</span><span class="sh_number">18</span><span class="sh_symbol">)</span>
    at <span class="sh_function">bad</span> <span class="sh_symbol">(</span><span class="sh_regexp">/path/</span><span class="sh_normal">to</span><span class="sh_symbol">/</span>script<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">2</span><span class="sh_symbol">:</span><span class="sh_number">17</span><span class="sh_symbol">)</span>
    at <span class="sh_predef_func">Object</span><span class="sh_symbol">.&lt;</span>anonymous<span class="sh_symbol">&gt;</span> <span class="sh_symbol">(</span><span class="sh_regexp">/path/</span><span class="sh_normal">to</span><span class="sh_symbol">/</span>script<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">5</span><span class="sh_symbol">:</span><span class="sh_number">1</span><span class="sh_symbol">)</span>
    <span class="sh_symbol">&lt;</span>etc<span class="sh_symbol">.&gt;</span></code></pre>
</div>

<div class="translate-section" data-hash="6e50891cedf0ef76c9304cbbe9d949b8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.rename(oldPath, newPath, callback)<span><a href="#all_fs_rename_oldpath_newpath_callback_1408" id="all_fs_rename_oldpath_newpath_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ff39f9181db50273ea4f476b7c20e80c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版本的rename函数(2).完成时的回调函数(callback)只接受一个参数:可能出现的异常信息.

</p>
</div>

<div class="translate-section" data-hash="909ed3c51c97b89781b6443ee86d5122"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.renameSync(oldPath, newPath)<span><a href="#all_fs_renamesync_oldpath_newpath_1408" id="all_fs_renamesync_oldpath_newpath_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="dd470f0dd6c800145327ef61c67ed116"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版本的rename(2).

</p>
</div>

<div class="translate-section" data-hash="f96026cfcbd330b57245a9cdaf0822f3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.ftruncate(fd, len, callback)<span><a href="#all_fs_ftruncate_fd_len_callback_1408" id="all_fs_ftruncate_fd_len_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b4790249b0bc10ced4aea4be82f1ce29"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版本的ftruncate(2). 完成时的回调函数(callback)只接受一个参数:可能出现的异常信息.

</p>
</div>

<div class="translate-section" data-hash="d93b05b4dceac9d850f7a7692749e198"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.ftruncateSync(fd, len)<span><a href="#all_fs_ftruncatesync_fd_len_1408" id="all_fs_ftruncatesync_fd_len_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="274f71968f1b551f2141794410778b51"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版本的ftruncate(2).

</p>
</div>

<div class="translate-section" data-hash="d394e37747801d907c572497c15cb30d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.truncate(path, len, callback)<span><a href="#all_fs_truncate_path_len_callback_1408" id="all_fs_truncate_path_len_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="11476ee2e375f0ab61f5c0f843ceb47c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版本的truncate(2). 完成时的回调函数(callback)只接受一个参数:可能出现的异常信息.

</p>
</div>

<div class="translate-section" data-hash="4485ae6759e75c47f29e4cb5c61e548f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.truncateSync(path, len)<span><a href="#all_fs_truncatesync_path_len_1408" id="all_fs_truncatesync_path_len_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="1078e39b3710fa86aedb71a4fc88f6b2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版本的truncate(2).

</p>
</div>

<div class="translate-section" data-hash="9aef7d7a9c8526390cf935a12ef617c6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版本的chown.完成时的回调函数(callback)只接受一个参数:可能出现的异常信息.

</p>
</div>

<div class="translate-section" data-hash="83ecff3ba3531f969ec58182e04b09e9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版本的chown(2).完成时的回调函数(callback)只接受一个参数:可能出现的异常信息.

</p>
</div>

<div class="translate-section" data-hash="d34245fa6df4f8127461a3a911751984"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.chownSync(path, uid, gid)<span><a href="#all_fs_chownsync_path_uid_gid_1408" id="all_fs_chownsync_path_uid_gid_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="6bf4fb92e72f9af5258bee0a82e05ce8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版本的chown(2).

</p>
</div>

<div class="translate-section" data-hash="7566b3dc2a320a1b88507599f0110ccb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.fchown(fd, uid, gid, callback)<span><a href="#all_fs_fchown_fd_uid_gid_callback_1408" id="all_fs_fchown_fd_uid_gid_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ab5337df0a5b153daf43585b8db4572a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版本的fchown(2)。回调函数的参数除了出现错误时有一个错误对象外，没有其它参数。

</p>
</div>

<div class="translate-section" data-hash="bc1136fedd85682c741f2c50e3f3b515"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.fchownSync(fd, uid, gid)<span><a href="#all_fs_fchownsync_fd_uid_gid_1408" id="all_fs_fchownsync_fd_uid_gid_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="709974425882dea11f80b5e02f6472a9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版本的fchown(2).

</p>
</div>

<div class="translate-section" data-hash="a5071753cf05bd9855f503755109af5d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.lchown(path, uid, gid, callback)<span><a href="#all_fs_lchown_path_uid_gid_callback_1408" id="all_fs_lchown_path_uid_gid_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="cf339124585eec0514a61f3bb9d84a0d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的lchown(2)。完成时的回调函数(callback)只接受一个参数:可能出现的异常信息.

</p>
</div>

<div class="translate-section" data-hash="4687a5e6a917b732748b52918aeea6ed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.lchownSync(path, uid, gid)<span><a href="#all_fs_lchownsync_path_uid_gid_1408" id="all_fs_lchownsync_path_uid_gid_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="3488d582b31d1d2d6b7c281f5acf0a07"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版本的lchown(2).

</p>
</div>

<div class="translate-section" data-hash="83bdf9cb81a110a3e3b7c1f3545733aa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.chmod(path, mode, callback)<span><a href="#all_fs_chmod_path_mode_callback_1408" id="all_fs_chmod_path_mode_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="08442eaaf80395924979234384b5ecbd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的 chmod(2). 完成时的回调函数(callback)只接受一个参数:可能出现的异常信息.

</p>
</div>

<div class="translate-section" data-hash="3f78753ba16283f659cc9bebcfd0ea7d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.chmodSync(path, mode)<span><a href="#all_fs_chmodsync_path_mode_1408" id="all_fs_chmodsync_path_mode_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="4be0609ddcc218e345886317e88cfc95"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版的 chmod(2).

</p>
</div>

<div class="translate-section" data-hash="fed460df3f52ef64e6867479a798d450"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.fchmod(fd, mode, callback)<span><a href="#all_fs_fchmod_fd_mode_callback_1408" id="all_fs_fchmod_fd_mode_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="bd6ff8da3d5a3939e6fb7d193c84f0b5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的 fchmod(2). 完成时的回调函数(callback)只接受一个参数:可能出现的异常信息.

</p>
</div>

<div class="translate-section" data-hash="11958d6a0453b2d404ddec445ed89b95"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.fchmodSync(fd, mode)<span><a href="#all_fs_fchmodsync_fd_mode_1408" id="all_fs_fchmodsync_fd_mode_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="034a641492cf799e51ad76e0174a6b01"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版的 fchmod(2).

</p>
</div>

<div class="translate-section" data-hash="c845cab9215cba3e52659932bc71efe3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.lchmod(path, mode, callback)<span><a href="#all_fs_lchmod_path_mode_callback_1408" id="all_fs_lchmod_path_mode_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="e0938a9a3fbbe6299e49277d35eb5865"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的 lchmod(2). 完成时的回调函数(callback)只接受一个参数:可能出现的异常信息.

</p>
</div>

<div class="translate-section" data-hash="cf1e0118919c3dd604a3e9313820f5d5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>仅在 Mac OS X 系统下可用。

</p>
</div>

<div class="translate-section" data-hash="2399a22992a5bf89b23c9b618f54c06a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.lchmodSync(path, mode)<span><a href="#all_fs_lchmodsync_path_mode_1408" id="all_fs_lchmodsync_path_mode_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="0e0c3ab73ad4421c0a37f75fbb72dad5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版的 lchmod(2).

</p>
</div>

<div class="translate-section" data-hash="36c4a6c0a3860cec65b157a278013787"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.stat(path, callback)<span><a href="#all_fs_stat_path_callback_1408" id="all_fs_stat_path_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="d415e973dd809f058002013d745160d0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的 stat(2). 回调函数（callback） 接收两个参数： <code>(err, stats)</code> ，其中
<code>stats</code> 是一个 <a href="#fs_class_fs_stats">fs.Stats</a> 对象。 详情请参考 <a href="#fs_class_fs_stats">fs.Stats</a>

</p>
</div>

<div class="translate-section" data-hash="e112706f246c61cdb3a01acb9a814b34"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.lstat(path, callback)<span><a href="#all_fs_lstat_path_callback_1408" id="all_fs_lstat_path_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="c247b10ab44dcb4192a318dc3ac8829d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的 lstat(2). 回调函数（callback）接收两个参数： <code>(err, stats)</code> 其中
<code>stats</code> 是一个 <code>fs.Stats</code> 对象。 <code>lstat()</code> 与 <code>stat()</code> 相同，区别在于：
若 <code>path</code> 是一个符号链接时（symbolic link）,读取的是该符号链接本身，而不是它所
链接到的文件。

</p>
</div>

<div class="translate-section" data-hash="0c3667ff6058481de1165f37590fd033"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.fstat(fd, callback)<span><a href="#all_fs_fstat_fd_callback_1408" id="all_fs_fstat_fd_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="92cfc0b93d6f7f10a739ef574a747628"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的 fstat(2). 回调函数（callback）接收两个参数： <code>(err, stats)</code> 其中
<code>stats</code> 是一个 <code>fs.Stats</code> 对象。 <code>fstat()</code> 与 <code>stat()</code> 相同，区别在于：
要读取的文件（译者注：即第一个参数）是一个文件描述符（file descriptor） <code>fd</code> 。

</p>
</div>

<div class="translate-section" data-hash="b66264138f112c971ffb58b831a8b80a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.statSync(path)<span><a href="#all_fs_statsync_path_1408" id="all_fs_statsync_path_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="231d480327c1687555b6335979cc49b3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版的 stat(2). 返回一个 <code>fs.Stats</code> 实例。

</p>
</div>

<div class="translate-section" data-hash="0f935158b1453dba51bdce8fbc7b868e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.lstatSync(path)<span><a href="#all_fs_lstatsync_path_1408" id="all_fs_lstatsync_path_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="7f4f5aacf7970306de288d43593f8c65"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版的 lstat(2). 返回一个 <code>fs.Stats</code> 实例。

</p>
</div>

<div class="translate-section" data-hash="576c48a22c223e4f7466869c9c51b5af"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.fstatSync(fd)<span><a href="#all_fs_fstatsync_fd_1408" id="all_fs_fstatsync_fd_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="df4693a38530dbc3daf52d065c4f4492"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版的 fstat(2). 返回一个 <code>fs.Stats</code> 实例。

</p>
</div>

<div class="translate-section" data-hash="6aa36119ee4a3b526b7f3dea75450712"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.link(srcpath, dstpath, callback)<span><a href="#all_fs_link_srcpath_dstpath_callback_1408" id="all_fs_link_srcpath_dstpath_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="04ea0282730bbd9841d7f05e203ee90a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的 link(2). 完成时的回调函数（callback）只接受一个参数：可能出现的异常信息。

</p>
</div>

<div class="translate-section" data-hash="d9673193e1d20ad8d743de554b7c547c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.linkSync(srcpath, dstpath)<span><a href="#all_fs_linksync_srcpath_dstpath_1408" id="all_fs_linksync_srcpath_dstpath_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b38b1be73704f4e03c951bd2a9dbc0de"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版的 link(2).

</p>
</div>

<div class="translate-section" data-hash="5e78065e44a30258fc2961bbd3a82bcb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.symlink(srcpath, dstpath, [type], callback)<span><a href="#all_fs_symlink_srcpath_dstpath_type_callback_1408" id="all_fs_symlink_srcpath_dstpath_type_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="749f20e17eab5c86916105f29119f1e0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的 symlink(2). 完成时的回调函数（callback）只接受一个参数：可能出现的异常信息。
<code>type</code> 可以是 <code>'dir'</code>, <code>'file'</code>, 或者<code>'junction'</code> (默认是 <code>'file'</code>)，此参数仅用于
Windows 系统（其他系统平台会被忽略）。
注意： Windows 系统要求目标路径（译者注：即 <code>dstpath</code> 参数）必须是一个绝对路径，当使用
<code>'junction'</code> 时，<code>dstpath</code> 参数会自动转换为绝对路径。

</p>
</div>

<div class="translate-section" data-hash="64c8d27e5408c74e4313c684da25ab91"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.symlinkSync(srcpath, dstpath, [type])<span><a href="#all_fs_symlinksync_srcpath_dstpath_type_1408" id="all_fs_symlinksync_srcpath_dstpath_type_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="d40e247044e891a56c046cb22dd72e96"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版的 symlink(2).

</p>
</div>

<div class="translate-section" data-hash="13df0ad87ff923b36d3ab14f4ea145f3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.readlink(path, callback)<span><a href="#all_fs_readlink_path_callback_1408" id="all_fs_readlink_path_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ea0d181108312c5707e2b16ad51095ca"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的 readlink(2). 回调函数（callback）接收两个参数： <code>(err,
linkString)</code>.

</p>
</div>

<div class="translate-section" data-hash="fbe9d58ae7e18db0b9e8ffa56ac5637a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.readlinkSync(path)<span><a href="#all_fs_readlinksync_path_1408" id="all_fs_readlinksync_path_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ac3b488215d0b1a5fa6593b3874a73e0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版的 readlink(2). 返回符号链接（symbolic link）的字符串值。

</p>
</div>

<div class="translate-section" data-hash="2fd2306dbc910db39fc47afaf539ff8a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.realpath(path, [cache], callback)<span><a href="#all_fs_realpath_path_cache_callback_1408" id="all_fs_realpath_path_cache_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="7db8d5ad90f26fc03e076e3ff31b56fd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的 realpath(2). 回调函数（callback）接收两个参数： <code>(err,
resolvedPath)</code>. May use <code>process.cwd</code> to resolve relative paths. <code>cache</code> is an
object literal of mapped paths that can be used to force a specific path
resolution or avoid additional <code>fs.stat</code> calls for known real paths.

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="02e562a383dcd248f86fba882b8aca2e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> cache <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span><span class="sh_string">'/etc'</span><span class="sh_symbol">:</span><span class="sh_string">'/private/etc'</span><span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
fs<span class="sh_symbol">.</span><span class="sh_function">realpath</span><span class="sh_symbol">(</span><span class="sh_string">'/etc/passwd'</span><span class="sh_symbol">,</span> cache<span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> resolvedPath<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>resolvedPath<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="0bbf47951065d3f25e27c1a2dd029ddb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.realpathSync(path, [cache])<span><a href="#all_fs_realpathsync_path_cache_1408" id="all_fs_realpathsync_path_cache_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="054dac77c765ff1de03ffd9a2a645d05"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>realpath(2) 的同步版本。返回解析出的路径。

</p>
</div>

<div class="translate-section" data-hash="65e50adefb1003767c728c33324383be"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.unlink(path, callback)<span><a href="#all_fs_unlink_path_callback_1408" id="all_fs_unlink_path_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="99d1ba2dfc93cdf91f4f658d67feaa4f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的 unlink(2). 完成时的回调函数（callback）只接受一个参数：可能出现的异常信息.

</p>
</div>

<div class="translate-section" data-hash="ce418ac963ded61433761b493a0bd2b2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.unlinkSync(path)<span><a href="#all_fs_unlinksync_path_1408" id="all_fs_unlinksync_path_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="dfe74f8273efd2d567839b42046bf73d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版的 unlink(2).

</p>
</div>

<div class="translate-section" data-hash="1cee23c84b93db8780fc9da5c0affe16"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.rmdir(path, callback)<span><a href="#all_fs_rmdir_path_callback_1408" id="all_fs_rmdir_path_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="7f6b295c75e4c574f6d827ec56b46530"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的 rmdir(2). 异步版的 link(2). 完成时的回调函数（callback）只接受一个参数：可能出现的异常信息。

</p>
</div>

<div class="translate-section" data-hash="403273a64a085af8038526014b660ae3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.rmdirSync(path)<span><a href="#all_fs_rmdirsync_path_1408" id="all_fs_rmdirsync_path_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="f97b61bbc01b23b3595ed1c934872fbc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版的 rmdir(2).

</p>
</div>

<div class="translate-section" data-hash="85e49bb2871adeca571be97a4d85307a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.mkdir(path, [mode], callback)<span><a href="#all_fs_mkdir_path_mode_callback_1408" id="all_fs_mkdir_path_mode_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="31c463871112fcae6dd7bac622b65e60"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的 mkdir(2)。 异步版的 link(2). 完成时的回调函数（callback）只接受一个参数：可能出现的异常信息。文件 <code>mode</code> 默认为 <code>0777</code>。

</p>
</div>

<div class="translate-section" data-hash="451e96f2d8730f4f755333ef4c483835"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.mkdirSync(path, [mode])<span><a href="#all_fs_mkdirsync_path_mode_1408" id="all_fs_mkdirsync_path_mode_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="88fe2d9d81df655ac9de80f133dcc52a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版的 mkdir(2)。

</p>
</div>

<div class="translate-section" data-hash="10bf1c3479956140e5d6f2bb9217057a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.readdir(path, callback)<span><a href="#all_fs_readdir_path_callback_1408" id="all_fs_readdir_path_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="c1947f4eb6cb451bae482223231e7864"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的 readdir(3)。 读取 path 路径所在目录的内容。 回调函数 (callback) 接受两个参数 <code>(err, files)</code> 其中 <code>files</code> 是一个存储目录中所包含的文件名称的数组，数组中不包括 <code>'.'</code> 和 <code>'..'</code>。

</p>
</div>

<div class="translate-section" data-hash="8687701fc69b07ba79a845b535f0585f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.readdirSync(path)<span><a href="#all_fs_readdirsync_path_1408" id="all_fs_readdirsync_path_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="425e8657e6325d67397b8312a25ec348"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版的 readdir(3). 返回文件名数组，其中不包括 <code>'.'</code> 和 <code>'..'</code> 目录.

</p>
</div>

<div class="translate-section" data-hash="bde3b013e0e2656283f8b99607080f7d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.close(fd, callback)<span><a href="#all_fs_close_fd_callback_1408" id="all_fs_close_fd_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="3616e0cc7dc0c1e0e45af68d09902c45"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版 close(2).  完成时的回调函数(callback)只接受一个参数:可能出现的异常信息.

</p>
</div>

<div class="translate-section" data-hash="865aef8257635404a68c544a9d6265a2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.closeSync(fd)<span><a href="#all_fs_closesync_fd_1408" id="all_fs_closesync_fd_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="62a945a8af1a184d2aa37adcef711d8f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版的 close(2).

</p>
</div>

<div class="translate-section" data-hash="33123c73871dd5f3756c2f2a65f40935"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.open(path, flags, [mode], callback)<span><a href="#all_fs_open_path_flags_mode_callback_1408" id="all_fs_open_path_flags_mode_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="1c8695d02a9374ca77bad2f34831c845"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版的文件打开. 详见 open(2). <code>flags</code> 可以是:

</p>
</div>

<div class="translate-section" data-hash="da1f62854b5b2c4e68dd37ea1ba43ac7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'r'</code>  - 以【只读】的方式打开文件. 当文件不存在时产生异常.</li>
</ul>
</div>

<div class="translate-section" data-hash="adc4c3b527bf81e7dfad2c02a25a49a8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'r+'</code> - 以【读写】的方式打开文件. 当文件不存在时产生异常.</li>
</ul>
</div>

<div class="translate-section" data-hash="9960af8abaf317a1b64f1a8cb1e61881"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'rs'</code> - 同步模式下，以【只读】的方式打开文件. 指令绕过操作系统的本地文件系统缓存.</li>
</ul>
</div>

<div class="translate-section" data-hash="d3821442d33e5d2ad91fcb6a507772e9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该功能主要用于打开 NFS 挂载的文件, 因为它可以让你跳过默认使用的过时本地缓存. 但这实际上非常影响 I/O 操作的性能, 因此除非你确实有这样的需求, 否则请不要使用该标志.

</p>
</div>

<div class="translate-section" data-hash="1e063779669638e5877184fe5eec175a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p> 注意: 这并不意味着 <code>fs.open()</code> 变成了一个同步阻塞的请求. 如果你想要一个同步阻塞的请求你应该使用 <code>fs.openSync()</code>.

</p>
</div>

<div class="translate-section" data-hash="8d6d05ae74955bd06503e01108fd1cef"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'rs+'</code> - 同步模式下, 以【读写】的方式打开文件. 请谨慎使用该方式, 详细请查看 <code>'rs'</code> 的注释.</li>
</ul>
</div>

<div class="translate-section" data-hash="02b3005e3c7cafe44f1e3dd6b17270a3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'w'</code> - 以【只写】的形式打开文件. 文件会被创建 (如果文件不存在) 或者覆盖 (如果存在).</li>
</ul>
</div>

<div class="translate-section" data-hash="0d68bc929a295f73241a63eed0852bec"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'wx'</code> - 类似 <code>'w'</code> 区别是如果文件存在则操作会失败.</li>
</ul>
</div>

<div class="translate-section" data-hash="42fc1c11dbd858a389ef188d701cc8f6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'w+'</code> - 以【读写】的方式打开文件. 文件会被创建 (如果文件不存在) 或者覆盖 (如果存在).</li>
</ul>
</div>

<div class="translate-section" data-hash="672229ee60952a35071709b83d303307"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'wx+'</code> - 类似 <code>'w+'</code> 区别是如果文件存在则操作会失败.</li>
</ul>
</div>

<div class="translate-section" data-hash="4c2126b126848cc93f44098362567030"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'a'</code> - 以【附加】的形式打开文件，即新写入的数据会附加在原来的文件内容之后. 如果文件不存在则会默认创建.</li>
</ul>
</div>

<div class="translate-section" data-hash="54e870727828ed53ea7a889111cf4c08"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'ax'</code> - 类似 <code>'a'</code> 区别是如果文件存在则操作会失败.</li>
</ul>
</div>

<div class="translate-section" data-hash="fc053dd289e87eae9edb570f808d50f7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'a+'</code> - 以【读取】和【附加】的形式打开文件. 如果文件不存在则会默认创建.</li>
</ul>
</div>

<div class="translate-section" data-hash="64527090a302dc16069dc8d573ec5100"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>'ax+'</code> - 类似 <code>'a+'</code> 区别是如果文件存在则操作会失败.</li>
</ul>
</div>

<div class="translate-section" data-hash="c88963fabde6b148d6c927a2da5c2447"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>参数 <code>mode</code> 用于设置文件模式 (permission and sticky bits), 不过前提是这个文件是已存在的. 默认情况下是 <code>0666</code>, 有可读和可写权限.

</p>
</div>

<div class="translate-section" data-hash="980f52fc4a6737fa7098987b84873fde"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该 callback 接收两个参数 <code>(err, fd)</code>.

</p>
</div>

<div class="translate-section" data-hash="e012f81b840ba46245e97e81221e4fb3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>排除 (exclusive) 标识 <code>'x'</code> （对应 open(2) 的 <code>O_EXCL</code> 标识） 保证 <code>path</code> 是一个新建的文件。
POSIX 操作系统上，即使 <code>path</code> 是一个指向不存在位置的符号链接，也会被认定为文件存在。
排除标识在网络文件系统不能确定是否有效。

</p>
</div>

<div class="translate-section" data-hash="009634a22ba1753758cfb9e25d47c417"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在 Linux 上，无法对以追加 (append) 模式打开的文件进行指定位置的写入操作。
内核会忽略位置参数并且总是将数据追加到文件尾部。

</p>
</div>

<div class="translate-section" data-hash="8e3aae7712ad7c2e919d94ba08ae13ad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.openSync(path, flags, [mode])<span><a href="#all_fs_opensync_path_flags_mode_1408" id="all_fs_opensync_path_flags_mode_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="0bf55bb9b27da52b39a00991d16f7935"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>fs.open()</code> 的同步版.

</p>
</div>

<div class="translate-section" data-hash="24f897a280e831127d5457e69c81264e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.utimes(path, atime, mtime, callback)<span><a href="#all_fs_utimes_path_atime_mtime_callback_1408" id="all_fs_utimes_path_atime_mtime_callback_1408">#</a></span></h2>
<h2>fs.utimesSync(path, atime, mtime)<span><a href="#all_fs_utimessync_path_atime_mtime_1408" id="all_fs_utimessync_path_atime_mtime_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="d2b0da3da66f8f494bed74a55bcf5a40"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>更改 path 所指向的文件的时间戳。

</p>
</div>

<div class="translate-section" data-hash="b3d52245b2067b2a16213bb54dda013e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.futimes(fd, atime, mtime, callback)<span><a href="#all_fs_futimes_fd_atime_mtime_callback_1408" id="all_fs_futimes_fd_atime_mtime_callback_1408">#</a></span></h2>
<h2>fs.futimesSync(fd, atime, mtime)<span><a href="#all_fs_futimessync_fd_atime_mtime_1408" id="all_fs_futimessync_fd_atime_mtime_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="046b276d49607bd1adc309dcdc79bca2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>更改文件描述符 (file discriptor) 所指向的文件的时间戳。

</p>
</div>

<div class="translate-section" data-hash="471b8b12b63b54e5853c87e32f1c3b06"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.fsync(fd, callback)<span><a href="#all_fs_fsync_fd_callback_1408" id="all_fs_fsync_fd_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="7698d651fe7a5bc2f424b1789f11f2da"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步版本的 fsync(2)。回调函数仅含有一个异常 (exception) 参数。

</p>
</div>

<div class="translate-section" data-hash="b3162abe36b33b145b71cf780ef3a795"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.fsyncSync(fd)<span><a href="#all_fs_fsyncsync_fd_1408" id="all_fs_fsyncsync_fd_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="d261a414a2d2115a826e2188f67e1ed6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>fsync(2) 的同步版本。

</p>
</div>

<div class="translate-section" data-hash="1cc427b5817af02af5454bb968ee0b69"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.write(fd, buffer, offset, length[, position], callback)<span><a href="#all_fs_write_fd_buffer_offset_length_position_callback_1408" id="all_fs_write_fd_buffer_offset_length_position_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="1448ec274126a3aabfb875d542cbd50a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>通过文件标识<code>fd</code>，向指定的文件中写入<code>buffer</code>。

</p>
</div>

<div class="translate-section" data-hash="23623939f6d3a8ca1ed1413e0533e308"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>offset</code> 和<code>length</code> 可以确定从哪个位置开始写入buffer。

</p>
</div>

<div class="translate-section" data-hash="db1489a3bfa6ad72a24d9119e95ccfc7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>position</code> 是参考当前文档光标的位置，然后从该处写入数据。如果<code>typeof position !== 'number'</code>，那么数据会从当前文档位置写入，请看pwrite(2)。

</p>
</div>

<div class="translate-section" data-hash="c8a3e267422330d1ead3a68b892be933"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>回调中会给出三个参数 <code>(err, written, buffer)</code>，<code>written</code> 说明从<code>buffer</code>写入的字节数。

</p>
</div>

<div class="translate-section" data-hash="8340c818ed316cbc01dc24531055ddee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意，<code>fs.write</code>多次地在同一个文件中使用而没有等待回调是不安全的。在这种情况下，强烈推荐使用<code>fs.createWriteStream</code>。

</p>
</div>

<div class="translate-section" data-hash="009634a22ba1753758cfb9e25d47c417"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在 Linux 上，无法对以追加 (append) 模式打开的文件进行指定位置的写入操作。
内核会忽略位置参数并且总是将数据追加到文件尾部。

</p>
</div>

<div class="translate-section" data-hash="73bac0cc8a3cb4ad3163fb0fd9e86d68"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.write(fd, data[, position[, encoding]], callback)<span><a href="#all_fs_write_fd_data_position_encoding_callback_1408" id="all_fs_write_fd_data_position_encoding_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="593f99a8726a669445140f75fe25c3ee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>把<code>data</code>写入到文档中通过指定的<code>fd</code>,如果<code>data</code>不是buffer对象的实例则会把值强制转化成一个字符串。

</p>
</div>

<div class="translate-section" data-hash="56d79b289bb7d16181fdabfc60af909b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>position</code> 是参考当前文档光标的位置，然后从该处写入数据。如果<code>typeof position !== 'number'</code>，那么数据会从当前文档位置写入，请看pwrite(2)。

</p>
</div>

<div class="translate-section" data-hash="3b17372e761235df363c0d2928a1bff3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>encoding</code> 是预期得到一个字符串编码

</p>
</div>

<div class="translate-section" data-hash="5dcfca58fd1e32216e6f13e1d02f3f2f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>回调会得到这些参数 <code>(err, written, string)</code>，<code>written</code>表明传入的<code>string</code>需要写入的字符串长度。注意字节的写入跟字符串写入是不一样的。请看<a href="http://nodeapi.ucdok.com/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding">Buffer.byteLength</a>.

</p>
</div>

<div class="translate-section" data-hash="778dad350a2693faf1e7bf62e5d089cd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>与写入<code>buffer</code>不同，必须写入完整的字符串，截取字符串不是符合规定的。这是因为返回的字节的位移跟字符串的位移是不一样的。

</p>
</div>

<div class="translate-section" data-hash="8340c818ed316cbc01dc24531055ddee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意，<code>fs.write</code>多次地在同一个文件中使用而没有等待回调是不安全的。在这种情况下，强烈推荐使用<code>fs.createWriteStream</code>。

</p>
</div>

<div class="translate-section" data-hash="009634a22ba1753758cfb9e25d47c417"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在 Linux 上，无法对以追加 (append) 模式打开的文件进行指定位置的写入操作。
内核会忽略位置参数并且总是将数据追加到文件尾部。

</p>
</div>

<div class="translate-section" data-hash="0c29113de3a8ad459c966b12d2c0ac93"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.writeSync(fd, buffer, offset, length[, position])<span><a href="#all_fs_writesync_fd_buffer_offset_length_position_1408" id="all_fs_writesync_fd_buffer_offset_length_position_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="985aed5517e5a09afaa0af11d95fd700"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.writeSync(fd, data[, position[, encoding]])<span><a href="#all_fs_writesync_fd_data_position_encoding_1408" id="all_fs_writesync_fd_data_position_encoding_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="729e18aa49f6e324175eab821b867d81"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同步版本的<code>fs.write()</code>。返回写入的字节数。

</p>
</div>

<div class="translate-section" data-hash="261dfe6f0ed88d17b2c1f0f6e64fef6e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.read(fd, buffer, offset, length, position, callback)<span><a href="#all_fs_read_fd_buffer_offset_length_position_callback_1408" id="all_fs_read_fd_buffer_offset_length_position_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="65c4061a9e558f92ec8b8a9bb4f4e482"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>从指定的文档标识符<code>fd</code>读取文件数据。

</p>
</div>

<div class="translate-section" data-hash="b5d826d136c02a1141184b492b557062"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>buffer</code> 是缓冲区，数据将会写入这里。

</p>
</div>

<div class="translate-section" data-hash="02f983f450f966340b82ae594476e892"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>offset</code> 是开始向缓冲区 <code>buffer</code> 写入的偏移量。

</p>
</div>

<div class="translate-section" data-hash="d1ab5881ccbdb0205f083a67338e83ef"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>length</code> 是一个整形值，指定了读取的字节数。

</p>
</div>

<div class="translate-section" data-hash="b5d4a4a18c203682f7fff7b84ed5c16d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>position</code> 是一个整形值，指定了从哪里开始读取文件，如果<code>position</code>为<code>null</code>，将会从文件当前的位置读取数据。

</p>
</div>

<div class="translate-section" data-hash="4d0c436d4116e32fe771ed9b74136a34"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>回调函数给定了三个参数， <code>(err, bytesRead, buffer)</code>， 分别为错误，读取的字节和缓冲区。

</p>
</div>

<div class="translate-section" data-hash="7355edbc502c2ee40376d0ac48107b14"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.readSync(fd, buffer, offset, length, position)<span><a href="#all_fs_readsync_fd_buffer_offset_length_position_1408" id="all_fs_readsync_fd_buffer_offset_length_position_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="5404c3c638e44d893f742d944c32b778"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p> <code>fs.read</code> 函数的同步版本。 返回<code>bytesRead</code>的个数。

</p>
</div>

<div class="translate-section" data-hash="d2481c1c19ca81d38a6db54006a9e962"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.readFile(filename, [options], callback)<span><a href="#all_fs_readfile_filename_options_callback_1408" id="all_fs_readfile_filename_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="c808213781a0fb3c77591df6c5641a3b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>filename</code> {String}</li>
<li><code>options</code> {Object}<ul>
<li><code>encoding</code> {String | Null} default = <code>null</code></li>
<li><code>flag</code> {String} default = <code>'r'</code></li>
</ul>
</li>
<li><code>callback</code> {Function}</li>
</ul>
</div>

<div class="translate-section" data-hash="c2130110fbc20f4d1260eba487781ab1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步读取一个文件的全部内容。举例：

</p>
</div>

<div class="translate-section" data-hash="c789d9960336b3ed1b6a29d7055c815c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>fs<span class="sh_symbol">.</span><span class="sh_function">readFile</span><span class="sh_symbol">(</span><span class="sh_string">'/etc/passwd'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> data<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>data<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="e9dc5c71de45efd0046bcc9444180978"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>回调函数传递了两个参数 <code>(err, data)</code>,  <code>data</code> 就是文件的内容。

</p>
</div>

<div class="translate-section" data-hash="09138469b61e5f4804bd5767a3afac49"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果未指定编码方式，原生buffer就会被返回。

</p>
</div>

<div class="translate-section" data-hash="f7047de3bdbb531d1d225f965e991cb3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.readFileSync(filename, [options])<span><a href="#all_fs_readfilesync_filename_options_1408" id="all_fs_readfilesync_filename_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="95fbfbd7e2b71b3a121682710224bf4a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p> <code>fs.readFile</code>的同步版本。 返回文件名为 <code>filename</code> 的文件内容。

</p>
</div>

<div class="translate-section" data-hash="d71510e45f55a36f42c906385b741aee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果 <code>encoding</code> 选项被指定， 那么这个函数返回一个字符串。如果未指定，则返回一个原生buffer。

</p>
</div>

<div class="translate-section" data-hash="0505a5f039be2ae3291ff3ff3032dbb8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.writeFile(filename, data, [options], callback)<span><a href="#all_fs_writefile_filename_data_options_callback_1408" id="all_fs_writefile_filename_data_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="4896bb1cea36edd8ec35d82c8205d48b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>filename</code> {String}</li>
<li><code>data</code> {String | Buffer}</li>
<li><code>options</code> {Object}<ul>
<li><code>encoding</code> {String | Null} default = <code>'utf8'</code></li>
<li><code>mode</code> {Number} default = <code>438</code> (aka <code>0666</code> in Octal)</li>
<li><code>flag</code> {String} default = <code>'w'</code></li>
</ul>
</li>
<li><code>callback</code> {Function}</li>
</ul>
</div>

<div class="translate-section" data-hash="1460e7fb379c8889a6dc42f548e62446"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步的将数据写入一个文件, 如果文件原先存在，会被替换。
<code>data</code> 可以是一个string，也可以是一个原生buffer。

</p>
</div>

<div class="translate-section" data-hash="21a1e6a29546f5dcbe75b1b49b6664b0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>encoding</code> 选项会被忽视如果 <code>data</code> 不是string而是原生buffer。<code>encoding</code>缺省为 <code>'utf8'</code>。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="d7ccc05e1ccf0e55f61b45d08615c9a6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>fs<span class="sh_symbol">.</span><span class="sh_function">writeFile</span><span class="sh_symbol">(</span><span class="sh_string">'message.txt'</span><span class="sh_symbol">,</span> <span class="sh_string">'Hello Node'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'It</span><span class="sh_specialchar">\'</span><span class="sh_string">s saved!'</span><span class="sh_symbol">);</span> <span class="sh_comment">//文件被保存</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="ca4b91b9dc5f85c71de2dffdd991dede"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.writeFileSync(filename, data, [options])<span><a href="#all_fs_writefilesync_filename_data_options_1408" id="all_fs_writefilesync_filename_data_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="2a8f4573bf0dc7680b740908eb3ed5a6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>fs.writeFile</code>的同步版本。

</p>
</div>

<div class="translate-section" data-hash="3b365083e7f0924418bed28e6264b259"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.appendFile(filename, data, [options], callback)<span><a href="#all_fs_appendfile_filename_data_options_callback_1408" id="all_fs_appendfile_filename_data_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="844608ca003c2d11be6e34da1a702f63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>filename</code> {String}</li>
<li><code>data</code> {String | Buffer}</li>
<li><code>options</code> {Object}<ul>
<li><code>encoding</code> {String | Null} default = <code>'utf8'</code></li>
<li><code>mode</code> {Number} default = <code>438</code> (aka <code>0666</code> in Octal)</li>
<li><code>flag</code> {String} default = <code>'a'</code></li>
</ul>
</li>
<li><code>callback</code> {Function}</li>
</ul>
</div>

<div class="translate-section" data-hash="97cb658ab1c7563344e9206d0bd4773e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步的将数据添加到一个文件的尾部，如果文件不存在，会创建一个新的文件。
<code>data</code> 可以是一个string，也可以是原生buffer。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="05e4eef03e04f2909a54e3dd578cc7d3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>fs<span class="sh_symbol">.</span><span class="sh_function">appendFile</span><span class="sh_symbol">(</span><span class="sh_string">'message.txt'</span><span class="sh_symbol">,</span> <span class="sh_string">'data to append'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_keyword">throw</span> err<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'The "data to append" was appended to file!'</span><span class="sh_symbol">);</span> <span class="sh_comment">//数据被添加到文件的尾部</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="19147fbb7f1b1a3262ee2a063df5a77a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.appendFileSync(filename, data, [options])<span><a href="#all_fs_appendfilesync_filename_data_options_1408" id="all_fs_appendfilesync_filename_data_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="41cb14a95d922d5a0ad5ed466194f3df"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>fs.appendFile</code>的同步版本。

</p>
</div>

<div class="translate-section" data-hash="30598829e6662d6aa03dc6ec6d792b04"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.watchFile(filename, [options], listener)<span><a href="#all_fs_watchfile_filename_options_listener_1408" id="all_fs_watchfile_filename_options_listener_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="64a0b650c89c51a38fd1c716993702df"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定性<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> 不稳定<span class="sh_symbol">.</span>   尽可能的话推荐使用 fs<span class="sh_symbol">.</span>watch 来代替。</code></pre>
</div>

<div class="translate-section" data-hash="611cd21053d9bcb6c94223627dc51a89"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>监视<code>filename</code>指定的文件的改变. 回调函数 <code>listener</code> 会在文件每一次被访问时被调用。

</p>
</div>

<div class="translate-section" data-hash="dd9229f24c304083019ad8ab9fe58a22"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>第二个参数是可选的。 如果提供此参数，<code>options</code> 应该是包含两个成员<code>persistent</code>和<code>interval</code>的对象，其中<code>persistent</code>值为boolean类型。<code>persistent</code>指定进程是否应该在文件被监视（watch）时继续运行，<code>interval</code>指定了目标文件被查询的间隔，以毫秒为单位。缺省值为<code>{ persistent: true, interval: 5007 }</code>。

</p>
</div>

<div class="translate-section" data-hash="1dafbcf11f1afa7ef5823b69cd4ad62f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>listener</code> 有两个参数，第一个为文件现在的状态，第二个为文件的前一个状态。

</p>
</div>

<div class="translate-section" data-hash="2118c92c108f327075ae3753fde53b18"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>fs<span class="sh_symbol">.</span><span class="sh_function">watchFile</span><span class="sh_symbol">(</span><span class="sh_string">'message.text'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>curr<span class="sh_symbol">,</span> prev<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'the current mtime is: '</span> <span class="sh_symbol">+</span> curr<span class="sh_symbol">.</span>mtime<span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'the previous mtime was: '</span> <span class="sh_symbol">+</span> prev<span class="sh_symbol">.</span>mtime<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="8da7249e2de2e67ec87574e5e2902791"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>listener</code>中的文件状态对象类型为<code>fs.Stat</code>。

</p>
</div>

<div class="translate-section" data-hash="dc97f645ff7a2dd517f99691337cf07c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果你只想在文件被修改时被告知，而不是仅仅在被访问时就告知，你应当在<code>listener</code>回调函数中比较下两个状态对象的<code>mtime</code>属性。即<code>curr.mtime</code> 和 <code>prev.mtime</code>.

</p>
</div>

<div class="translate-section" data-hash="292641cf7374a6e6ad15e6f6ff98b16d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.unwatchFile(filename, [listener])<span><a href="#all_fs_unwatchfile_filename_listener_1408" id="all_fs_unwatchfile_filename_listener_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="64a0b650c89c51a38fd1c716993702df"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定性<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> 不稳定<span class="sh_symbol">.</span>   尽可能的话推荐使用 fs<span class="sh_symbol">.</span>watch 来代替。</code></pre>
</div>

<div class="translate-section" data-hash="14893e51ca54155f24a4246522a976f8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>停止监视文件名为 <code>filename</code>的文件. 如果 <code>listener</code> 参数被指定, 会移除在<code>fs.watchFile</code>函数中指定的那一个listener回调函数。 否则, <em>所有的</em> 回调函数都会被移除，你将彻底停止监视<code>filename</code>文件。

</p>
</div>

<div class="translate-section" data-hash="24f60da099d1e771563cf8f4d1dfbe11"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>调用 <code>fs.unwatchFile()</code> 时，传递的文件名为未被监视的文件时，不会发生错误，而会发生一个no-op。

</p>
</div>

<div class="translate-section" data-hash="ed6b5b8da8d263897559886c210269bc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.watch(filename, [options], [listener])<span><a href="#all_fs_watch_filename_options_listener_1408" id="all_fs_watch_filename_options_listener_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="d96e284e30d4f281e8e2b8fc688e9023"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定性<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> 不稳定的</code></pre>
</div>

<div class="translate-section" data-hash="e9ec341cb3751326498cc25e14af64cf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>观察指定路径的改变，<code>filename</code> 路径可以是文件或者目录。改函数返回的对象是 <a href="#fs_class_fs_fswatcher">fs.FSWatcher</a>。

</p>
</div>

<div class="translate-section" data-hash="f12e5c42be813e5eb36b89a7e0116c6a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>第二个参数是可选的. 如果 <code>options</code> 选项被提供那么它应当是一个只包含成员<code>persistent</code>得对象，
<code>persistent</code>为boolean类型。<code>persistent</code>指定了进程是否“只要文件被监视就继续执行”缺省值为
<code>{ persistent: true }</code>.

</p>
</div>

<div class="translate-section" data-hash="2bc4cd6ff2f986dab7209cdc7b96b3ad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>监听器的回调函数得到两个参数 <code>(event, filename)</code>。其中 <code>event</code> 是 'rename'（重命名）或者 'change'（改变），而 <code>filename</code> 则是触发事件的文件名。

</p>
</div>

<div class="translate-section" data-hash="1078984dc69ddba1ccac792621503bb9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>注意事项<span><a href="#all_70419" id="all_70419">#</a></span></h3>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="be7c64a101ff734868e90a40308f5e06"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>fs.watch</code> 不是完全跨平台的，且在某些情况下不可用。

</p>
</div>

<div class="translate-section" data-hash="21a3bcd63fb2a4076159c085bc2e33ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>可用性<span><a href="#all_70420" id="all_70420">#</a></span></h4>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="4837325ffcc6d8d629efa1c7ee25a33a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>此功能依赖于操作系统底层提供的方法来监视文件系统的变化。

</p>
</div>

<div class="translate-section" data-hash="d482508ec68015ee333692cd47978d0f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>在 Linux 操作系统上，使用 <code>inotify</code>。</li>
<li>在 BSD 操作系统上 (包括 OS X)，使用 <code>kqueue</code>。</li>
<li>在 SunOS 操作系统上 (包括 Solaris 和 SmartOS)，使用 <code>event ports</code>。</li>
<li>在 Windows 操作系统上，该特性依赖于 <code>ReadDirectoryChangesW</code>。</li>
</ul>
</div>

<div class="translate-section" data-hash="55630550ec03525ff65672a4b34e648b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果系统底层函数出于某些原因不可用，那么 <code>fs.watch</code> 也就无法工作。例如，监视网络文件系统(如 NFS, SMB 等)的文件或者目录，就时常不能稳定的工作，有时甚至完全不起作用。

</p>
</div>

<div class="translate-section" data-hash="8a6e941b8652777d19b4ec704a8f3671"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>你仍然可以调用使用了文件状态调查的 <code>fs.watchFile</code>，但是会比较慢而且比较不可靠。

</p>
</div>

<div class="translate-section" data-hash="93e5e45fa5f884b7d4ce6a8ee5cbd6c3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>文件名参数<span><a href="#all_70421" id="all_70421">#</a></span></h4>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="b6c3da077b53d62bada1061ea2cd54f5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在回调函数中提供的 <code>filename</code> 参数不是在每一个操作系统中都被支持（当下仅在Linux和Windows上支持）。
即便是在支持的系统中，<code>filename</code>也不能保证在每一次回调都被提供。因此，不要假设<code>filename</code>参数总会会在
回调函数中提供，在回调函数中添加检测<code>filename</code>是否为null的if判断语句。

</p>
</div>

<div class="translate-section" data-hash="966a15a07694d9647fc6b1f9e472476a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>fs<span class="sh_symbol">.</span><span class="sh_function">watch</span><span class="sh_symbol">(</span><span class="sh_string">'somedir'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>event<span class="sh_symbol">,</span> filename<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'event is: '</span> <span class="sh_symbol">+</span> event<span class="sh_symbol">);</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>filename<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'filename provided: '</span> <span class="sh_symbol">+</span> filename<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'filename not provided'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="5effed23604d546d9c1d0d1ec22026dd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.exists(path, callback)<span><a href="#all_fs_exists_path_callback_1408" id="all_fs_exists_path_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="fd7bbbfa9cb2625cd93cf437564b9314"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>检查指定路径的文件或者目录是否存在。接着通过 <code>callback</code> 传入的参数指明存在 (true) 或者不存在 (false)。示例:

</p>
</div>

<div class="translate-section" data-hash="7aa0ccc97f6b0acba30410de865d4ad9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>fs<span class="sh_symbol">.</span><span class="sh_function">exists</span><span class="sh_symbol">(</span><span class="sh_string">'/etc/passwd'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>exists<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  util<span class="sh_symbol">.</span><span class="sh_function">debug</span><span class="sh_symbol">(</span>exists <span class="sh_symbol">?</span> <span class="sh_string">"存在"</span> <span class="sh_symbol">:</span> <span class="sh_string">"不存在!"</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="0cc7ded13754bbc516c7fbfe9aeb784c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.existsSync(path)<span><a href="#all_fs_existssync_path_1408" id="all_fs_existssync_path_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="0968b772898ef7851eec33676a8d096d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>fs.exists</code> 函数的同步版。

</p>
</div>

<div class="translate-section" data-hash="8dc21ad1e0b0d3d51c077f66613fcb4c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Class: fs.Stats<span><a href="#all_class_fs_stats_1408" id="all_class_fs_stats_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="69d37ff4473c31da79cea3b2650ef7fe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>fs.stat()</code>, <code>fs.lstat()</code> 和 <code>fs.fstat()</code> 以及他们对应的同步版本返回的对象。

</p>
</div>

<div class="translate-section" data-hash="60c8a3a19e0848c7de61db6119ec9757"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>stats.isFile()</code></li>
<li><code>stats.isDirectory()</code></li>
<li><code>stats.isBlockDevice()</code></li>
<li><code>stats.isCharacterDevice()</code></li>
<li><code>stats.isSymbolicLink()</code> (仅在与 <code>fs.lstat()</code>一起使用时合法)</li>
<li><code>stats.isFIFO()</code></li>
<li><code>stats.isSocket()</code></li>
</ul>
</div>

<div class="translate-section" data-hash="5473721396b307d3a0de0e7355e8dad9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>对于一个普通文件使用 <code>util.inspect(stats)</code> 将会返回一个类似如下输出的字符串：

</p>
</div>

<div class="translate-section" data-hash="8556d734af3d82ac511557d2687f9336"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> dev<span class="sh_symbol">:</span> <span class="sh_number">2114</span><span class="sh_symbol">,</span>
  ino<span class="sh_symbol">:</span> <span class="sh_number">48064969</span><span class="sh_symbol">,</span>
  mode<span class="sh_symbol">:</span> <span class="sh_number">33188</span><span class="sh_symbol">,</span>
  nlink<span class="sh_symbol">:</span> <span class="sh_number">1</span><span class="sh_symbol">,</span>
  uid<span class="sh_symbol">:</span> <span class="sh_number">85</span><span class="sh_symbol">,</span>
  gid<span class="sh_symbol">:</span> <span class="sh_number">100</span><span class="sh_symbol">,</span>
  rdev<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
  size<span class="sh_symbol">:</span> <span class="sh_number">527</span><span class="sh_symbol">,</span>
  blksize<span class="sh_symbol">:</span> <span class="sh_number">4096</span><span class="sh_symbol">,</span>
  blocks<span class="sh_symbol">:</span> <span class="sh_number">8</span><span class="sh_symbol">,</span>
  atime<span class="sh_symbol">:</span> Mon<span class="sh_symbol">,</span> <span class="sh_number">10</span> Oct <span class="sh_number">2011</span> <span class="sh_number">23</span><span class="sh_symbol">:</span><span class="sh_number">24</span><span class="sh_symbol">:</span><span class="sh_number">11</span> GMT<span class="sh_symbol">,</span>
  mtime<span class="sh_symbol">:</span> Mon<span class="sh_symbol">,</span> <span class="sh_number">10</span> Oct <span class="sh_number">2011</span> <span class="sh_number">23</span><span class="sh_symbol">:</span><span class="sh_number">24</span><span class="sh_symbol">:</span><span class="sh_number">11</span> GMT<span class="sh_symbol">,</span>
  ctime<span class="sh_symbol">:</span> Mon<span class="sh_symbol">,</span> <span class="sh_number">10</span> Oct <span class="sh_number">2011</span> <span class="sh_number">23</span><span class="sh_symbol">:</span><span class="sh_number">24</span><span class="sh_symbol">:</span><span class="sh_number">11</span> GMT<span class="sh_symbol">,</span>
  birthtime<span class="sh_symbol">:</span> Mon<span class="sh_symbol">,</span> <span class="sh_number">10</span> Oct <span class="sh_number">2011</span> <span class="sh_number">23</span><span class="sh_symbol">:</span><span class="sh_number">24</span><span class="sh_symbol">:</span><span class="sh_number">11</span> GMT <span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="57286d43052561738e4d4d3d46545a23"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请注意 <code>atime</code>, <code>mtime</code>, <code>birthtime</code>, and <code>ctime</code> 是
 <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date">Date</a> 对象的实例。而且在比较这些对象的值时你应当使用合适的方法。
大部分情况下，使用 <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/getTime">getTime()</a> 将会返回自 <em>1 January 1970 00:00:00 UTC</em> 以来逝去的毫秒数，
而且这个整形值应该能满足任何比较的使用条件。但是仍然还有一些额外的方法可以用来显示一些模糊的信息。更多细节请查看
 <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date">MDN JavaScript Reference</a> 页面。

</p>
</div>

<div class="translate-section" data-hash="f490e10f3422bfeeba578e575b8da98b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

</div>

<div class="translate-section" data-hash="bbbe4c78a199320b974f5fef01466560"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Stat Time Values<span><a href="#all_stat_time_values_1408" id="all_stat_time_values_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="f859a52f979a031b0ae53d7b589b61b3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在状态对象（stat object）中的时间有以下语义：

</p>
</div>

<div class="translate-section" data-hash="bab180fe58b7a7ed2f21cd3d4b9e1851"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>atime</code> "Access Time" - 文件数据上次被访问的时间.<br>会被 <code>mknod(2)</code>, <code>utimes(2)</code>, and <code>read(2)</code> 等系统调用改变。</li>
<li><code>mtime</code> "Modified Time" - 文件上次被修改的时间。
会被 <code>mknod(2)</code>, <code>utimes(2)</code>, and <code>write(2)</code> 等系统调用改变。</li>
<li><code>ctime</code> "Change Time" - 文件状态上次改变的时间。
(inode data modification).  会被 <code>chmod(2)</code>, <code>chown(2)</code>,
<code>link(2)</code>, <code>mknod(2)</code>, <code>rename(2)</code>, <code>unlink(2)</code>, <code>utimes(2)</code>,
<code>read(2)</code>, and <code>write(2)</code> 等系统调用改变。</li>
<li><code>birthtime</code> "Birth Time" -  文件被创建的时间。 会在文件被创建时生成。
在一些不提供文件<code>birthtime</code>的文件系统中,
这个字段会被 <code>ctime</code> 或
<code>1970-01-01T00:00Z</code> (ie, unix epoch timestamp <code>0</code>)来填充。  在 Darwin 和其他
 FreeBSD 系统变体中, 也将 <code>atime</code> 显式地设置成比它现在的 <code>birthtime</code> 更早的一个时间值，这个过程使用了<code>utimes(2)</code>系统调用。</li>
</ul>
</div>

<div class="translate-section" data-hash="9ef2aee793403cc38f0136077ef0c066"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在Node v0.12版本之前, <code>ctime</code> 持有Windows系统的 <code>birthtime</code> 值. 注意在v.0.12版本中, <code>ctime</code> 不再是"creation time", 而且在Unix系统中，他从来都不是。

</p>
</div>

<div class="translate-section" data-hash="610aa919e323f0ef8e232676616b152c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.createReadStream(path, [options])<span><a href="#all_fs_createreadstream_path_options_1408" id="all_fs_createreadstream_path_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="7d16c56607f5eec8caf6cd315a9c5d6b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个新的 ReadStream 对象 (详见 <code>Readable Stream</code>).

</p>
</div>

<div class="translate-section" data-hash="949235f6a1e907b55db2ca4fc86f993f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>options</code> 是一个包含下列缺省值的对象：

</p>
</div>

<div class="translate-section" data-hash="38d05056b66397e2845cc428a391e0e8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> flags<span class="sh_symbol">:</span> <span class="sh_string">'r'</span><span class="sh_symbol">,</span>
  encoding<span class="sh_symbol">:</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span>
  fd<span class="sh_symbol">:</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span>
  mode<span class="sh_symbol">:</span> <span class="sh_number">0666</span><span class="sh_symbol">,</span>
  autoClose<span class="sh_symbol">:</span> <span class="sh_keyword">true</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="ecb1ef4c2e11b21db49c4434184119d9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>options</code> 可以提供 <code>start</code> 和 <code>end</code> 值用于读取文件内的特定范围而非整个文件。
<code>start</code> 和 <code>end</code> 都是包含在范围内的（inclusive, 可理解为闭区间）并且以 0 开始。
<code>encoding</code> 可选为 <code>'utf8'</code>, <code>'ascii'</code> 或者 <code>'base64'</code>。

</p>
</div>

<div class="translate-section" data-hash="2882bbceaf1d6e976d8e18acbe167866"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果 <code>autoClose</code> 为 false 则即使在发生错误时也不会关闭文件描述符 (file descriptor)。
此时你需要负责关闭文件，避免文件描述符泄露 (leak)。
如果 <code>autoClose</code> 为 true （缺省值），
当发生 <code>error</code> 或者 <code>end</code> 事件时，文件描述符会被自动释放。

</p>
</div>

<div class="translate-section" data-hash="4537f544b58758ce936f96c49d77d0a8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个从100字节的文件中读取最后10字节的例子：

</p>
</div>

<div class="translate-section" data-hash="c9096ca4e27e2668422312c4835921c0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>fs<span class="sh_symbol">.</span><span class="sh_function">createReadStream</span><span class="sh_symbol">(</span><span class="sh_string">'sample.txt'</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>start<span class="sh_symbol">:</span> <span class="sh_number">90</span><span class="sh_symbol">,</span> end<span class="sh_symbol">:</span> <span class="sh_number">99</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="ae169251ad5005fd481ac3750fb29962"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Class: fs.ReadStream<span><a href="#all_class_fs_readstream_1408" id="all_class_fs_readstream_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="fcaeba06feb6767c6e875058c9146061"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>ReadStream</code> 是一个可读的流<a href="http://nodeapi.ucdok.com/api/stream.html#stream_class_stream_readable">(Readable Stream)</a>.

</p>
</div>

<div class="translate-section" data-hash="b4484f565ca6550e888df5dbc5a6a8a3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'open'<span><a href="#all_open_2816" id="all_open_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="1775492e5ed515e163082952d1350920"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>fd</code> {整形} ReadStream 所使用的文件描述符。</li>
</ul>
</div>

<div class="translate-section" data-hash="cb22935fdd64c939b74b9e74b43d456a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当文件的 ReadStream 被创建时触发。

</p>
</div>

<div class="translate-section" data-hash="ad6cc3990d4a5c71d6a98fb51fcc2cbe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>fs.createWriteStream(path, [options])<span><a href="#all_fs_createwritestream_path_options_1408" id="all_fs_createwritestream_path_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ae597109dbdb5fbe4db42c84c8c6df87"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个新的 WriteStream 对象 (详见 <code>Writable Stream</code>).

</p>
</div>

<div class="translate-section" data-hash="949235f6a1e907b55db2ca4fc86f993f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>options</code> 是一个包含下列缺省值的对象：

</p>
</div>

<div class="translate-section" data-hash="665e64c86076cab8aed981bfbcad9f08"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> flags<span class="sh_symbol">:</span> <span class="sh_string">'w'</span><span class="sh_symbol">,</span>
  encoding<span class="sh_symbol">:</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span>
  mode<span class="sh_symbol">:</span> <span class="sh_number">0666</span> <span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="318a906ac565d0ba8954b978e0eceb21"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>options</code> 也可以包含一个 <code>start</code> 选项用于指定在文件中开始写入数据的位置。
修改而不替换文件需要 <code>flags</code> 的模式指定为 <code>r+</code> 而不是默值的 <code>w</code>.

</p>
</div>

<div class="translate-section" data-hash="be60edda2030c2ad8c1daa4a19f2b76c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Class: fs.WriteStream<span><a href="#all_class_fs_writestream_1408" id="all_class_fs_writestream_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="2fac0fd4baaacc7939981f8b8812305f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>WriteStream</code> 是一个可写的流<a href="http://nodeapi.ucdok.com/api/stream.html#stream_class_stream_writable">(Writable Stream)</a>.

</p>
</div>

<div class="translate-section" data-hash="b4484f565ca6550e888df5dbc5a6a8a3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'open'<span><a href="#all_open_2817" id="all_open_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="cdd05a8dc27983dee7cd9ac02eb44190"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>fd</code> {整形} WriteStream 所使用的文件描述符。</li>
</ul>
</div>

<div class="translate-section" data-hash="8c0b9dec92aec2cc9e5bf8dd56f947fe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当 WriteStream 创建时触发。

</p>
</div>

<div class="translate-section" data-hash="3d066864fcf414a8a629d55f7db867a6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>file.bytesWritten<span><a href="#all_file_byteswritten_1408" id="all_file_byteswritten_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="b378c659a45cd408016483887f9a3e2d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>已写的字节数。不包含仍在队列中准备写入的数据。

</p>
</div>

<div class="translate-section" data-hash="754e81d41901571ef47c005d8e7ed720"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Class: fs.FSWatcher<span><a href="#all_class_fs_fswatcher_1408" id="all_class_fs_fswatcher_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="aef0f7dcc908859a7c2ae326812c4ecc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>fs.watch()</code> 返回的对象类型。

</p>
</div>

<div class="translate-section" data-hash="847e4a6d4a72c54efc554ddfeb0ff24b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>watcher.close()<span><a href="#all_watcher_close_1408" id="all_watcher_close_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="6637b99814a96b3807c1148c808ce308"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>停止观察 <code>fs.FSWatcher</code> 对象中的更改。

</p>
</div>

<div class="translate-section" data-hash="27978256e421f601d1f3d21ff466f932"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'change'<span><a href="#all_change_1408" id="all_change_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="03865db14ed2944f46ba768292ed5479"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>event</code> {字符串} fs 改变的类型</li>
<li><code>filename</code> {字符串} 改变的文件名 (if relevant/available)</li>
</ul>
</div>

<div class="translate-section" data-hash="bc7d3f73310635ec0753c49796acb92f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当正在观察的目录或文件发生变动时触发。更多细节，详见 <a href="#fs_fs_watch_filename_options_listener">fs.watch</a>。

</p>
</div>

<div class="translate-section" data-hash="64e904775a6e7456b0a8274a22954209"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'error'<span><a href="#all_error_9858" id="all_error_9858">#</a></span></h3>
</div>

<div class="translate-section" data-hash="1f9a142875c867d9fdbeff74a7a854ef"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>error</code> {Error 对象}</li>
</ul>
</div>

<div class="translate-section" data-hash="90921257b950f29843a79883ee75cd7b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当产生错误时触发

</p>
</div>
<div class="translate-section" data-hash="d2b2d157862c44d6de70ad4960129684"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>路径 (Path)<span><a href="#all_path_1408" id="all_path_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<div class="translate-section" data-hash="90a6d1cb7d27d9e1a0cedcd13d9dfc26"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>本模块包含一套用于处理和转换文件路径的工具集。几乎所有的方法仅对字符串进行转换，
文件系统是不会检查路径是否真实有效的。

</p>
</div>

<div class="translate-section" data-hash="9525e484bf031c68a2f07b25bcb93de0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>通过 <code>require('path')</code> 来加载此模块。以下是本模块所提供的方法：

</p>
</div>

<div class="translate-section" data-hash="1139f7f0b81c7db2040c5e33b96abaca"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>path.normalize(p)<span><a href="#all_path_normalize_p_1408" id="all_path_normalize_p_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="f0be7e00794213a615d82738cbac6ae4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>规范化字符串路径，注意 <code>'..'</code> 和 `'.' 部分

</p>
</div>

<div class="translate-section" data-hash="fd24fd8355c42bef572678a3a4677506"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当发现有多个连续的斜杠时，会替换成一个；
当路径末尾包含斜杠时，会保留；
在 Windows 系统会使用反斜杠。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="e76eac10741e6d5f655708f882644904"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>path<span class="sh_symbol">.</span><span class="sh_function">normalize</span><span class="sh_symbol">(</span><span class="sh_string">'/foo/bar//baz/asdf/quux/..'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns</span>
<span class="sh_string">'/foo/bar/baz/asdf'</span></code></pre>
</div>

<div class="translate-section" data-hash="035a136326902cc99f01e2647f72cd5f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>path.join([path1], [path2], [...])<span><a href="#all_path_join_path1_path2_1408" id="all_path_join_path1_path2_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b35b36b13787799f771577132c53a194"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>组合参数中的所有路径，返回规范化后的路径。

</p>
</div>

<div class="translate-section" data-hash="1a59c94acc454262fec6390695b0fb32"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>参数必须是字符串。在 v0.8 版本非字符串参数会被悄悄忽略。
在 v0.10 及以后版本将会抛出一个异常。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="bd0d92821c64149b920be443fab3c031"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>path<span class="sh_symbol">.</span><span class="sh_function">join</span><span class="sh_symbol">(</span><span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">,</span> <span class="sh_string">'bar'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// 抛出异常</span>
<span class="sh_predef_func">TypeError</span><span class="sh_symbol">:</span> Arguments to path<span class="sh_symbol">.</span>join must be strings</code></pre>
</div>

<div class="translate-section" data-hash="6e3df22db88a9ad0059f02bb7b7a5a6c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>path.resolve([from ...], to)<span><a href="#all_path_resolve_from_to_1408" id="all_path_resolve_from_to_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="4304abd87ee407676d4adbbcae222002"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>将 <code>to</code> 参数解析为一个绝对路径。

</p>
</div>

<div class="translate-section" data-hash="d2bb1882a4a149c931bb06786dc41dc8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果<code>to</code>不是一个相对于<code>from</code> 参数的绝对路径，<code>to</code>会被添加到<code>from</code>的右边，直到找出一个绝对路径为止。如果使用<code>from</code>路径且仍没有找到绝对路径时，使用当时路径作为目录。返回的结果已经规范化，得到的路径会去掉结尾的斜杠，除非得到的当前路径为root目录。非字符串参数将被忽略。

</p>
</div>

<div class="translate-section" data-hash="bda6bdd9d9024de64704df368a99b266"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>另一种思考方式就是像在shell里面用一系列的‘cd’命令一样.

</p>
</div>

<div class="translate-section" data-hash="a76915a2070d5bb1e7f0d1705e2a2bf3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>path<span class="sh_symbol">.</span><span class="sh_function">resolve</span><span class="sh_symbol">(</span><span class="sh_string">'foo/bar'</span><span class="sh_symbol">,</span> <span class="sh_string">'/tmp/file/'</span><span class="sh_symbol">,</span> <span class="sh_string">'..'</span><span class="sh_symbol">,</span> <span class="sh_string">'a/../subfile'</span><span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="2697e2ebca47c97e2683b923a7d1e181"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>相当于:

</p>
</div>

<div class="translate-section" data-hash="fbde0e402e1f2cbee737ad86720dbb43"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>cd <span class="sh_normal">foo</span><span class="sh_symbol">/</span>bar
<span class="sh_normal">cd </span><span class="sh_symbol">/</span><span class="sh_normal">tmp</span><span class="sh_symbol">/</span><span class="sh_normal">file</span><span class="sh_symbol">/</span>
cd <span class="sh_symbol">..</span>
cd <span class="sh_normal">a</span><span class="sh_symbol">/../</span>subfile
pwd</code></pre>
</div>

<div class="translate-section" data-hash="7b84905812d21464a74655d96253cd4d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>不同的是，不同的路径不需要存在的，也可能是文件。

</p>
</div>

<div class="translate-section" data-hash="fd05d7f6bfc90e815087880e8e915b43"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例:

</p>
</div>

<div class="translate-section" data-hash="c4074e1fba9c8c2f3284c82b38b4c9a2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>path<span class="sh_symbol">.</span><span class="sh_function">resolve</span><span class="sh_symbol">(</span><span class="sh_string">'wwwroot'</span><span class="sh_symbol">,</span> <span class="sh_string">'static_files/png/'</span><span class="sh_symbol">,</span> <span class="sh_string">'../gif/image.gif'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// 如果当前工作目录为 /home/myself/node，它返回：</span>
<span class="sh_string">'/home/myself/node/wwwroot/static_files/gif/image.gif'</span></code></pre>
</div>

<div class="translate-section" data-hash="cc1c3547f6178d7e6bc49e57f939c84c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>path.isAbsolute(path)<span><a href="#all_path_isabsolute_path_1408" id="all_path_isabsolute_path_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="2ace2bd0fa87ac468c3bc9537a80a293"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>判定<code>path</code>是否为绝对路径。一个绝对路径总是指向一个相同的位置，无论当前工作目录是在哪里。

</p>
</div>

<div class="translate-section" data-hash="08e387b535fdce53e13969224f9465fb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Posix 示例:

</p>
</div>

<div class="translate-section" data-hash="fc41c7000c41aa0bf481d913bf63a8c8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'/foo/bar'</span><span class="sh_symbol">)</span> <span class="sh_comment">// true</span>
path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'/baz/..'</span><span class="sh_symbol">)</span>  <span class="sh_comment">// true</span>
path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'qux/'</span><span class="sh_symbol">)</span>     <span class="sh_comment">// false</span>
path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'.'</span><span class="sh_symbol">)</span>        <span class="sh_comment">// false</span></code></pre>
</div>

<div class="translate-section" data-hash="15eb7516b1374a9bd1a4a62a2ad77393"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Windows 示例:

</p>
</div>

<div class="translate-section" data-hash="3ed1a2fec784a2a26a1579878398c331"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'//server'</span><span class="sh_symbol">)</span>  <span class="sh_comment">// true</span>
path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'C:/foo/..'</span><span class="sh_symbol">)</span> <span class="sh_comment">// true</span>
path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'bar</span><span class="sh_specialchar">\\</span><span class="sh_string">baz'</span><span class="sh_symbol">)</span>   <span class="sh_comment">// false</span>
path<span class="sh_symbol">.</span><span class="sh_function">isAbsolute</span><span class="sh_symbol">(</span><span class="sh_string">'.'</span><span class="sh_symbol">)</span>         <span class="sh_comment">// false</span></code></pre>
</div>

<div class="translate-section" data-hash="0b6a7e3369acf0d7e9e8a1efe89bb215"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>path.relative(from, to)<span><a href="#all_path_relative_from_to_1408" id="all_path_relative_from_to_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="dd37749b7f72bee314dc17d21277081c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>解决从<code>from</code>到<code>to</code>的相对路径。

</p>
</div>

<div class="translate-section" data-hash="df2fc3075fa236546e2e9f53abe9dbab"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>有时我们有2个绝对路径, 我们需要从中找出相对目录的起源目录。这完全是<code>path.resolve</code>的相反实现,我们可以看看是什么意思:

</p>
</div>

<div class="translate-section" data-hash="72fb2f724ceb1f44b3e769b4d8a16eb7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>path<span class="sh_symbol">.</span><span class="sh_function">resolve</span><span class="sh_symbol">(</span>from<span class="sh_symbol">,</span> path<span class="sh_symbol">.</span><span class="sh_function">relative</span><span class="sh_symbol">(</span>from<span class="sh_symbol">,</span> to<span class="sh_symbol">))</span> <span class="sh_symbol">==</span> path<span class="sh_symbol">.</span><span class="sh_function">resolve</span><span class="sh_symbol">(</span>to<span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="fd05d7f6bfc90e815087880e8e915b43"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例:

</p>
</div>

<div class="translate-section" data-hash="b50082bdf612871222a04c2842037d8c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>path<span class="sh_symbol">.</span><span class="sh_function">relative</span><span class="sh_symbol">(</span><span class="sh_string">'/data/orandea/test/aaa'</span><span class="sh_symbol">,</span> <span class="sh_string">'/data/orandea/impl/bbb'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// 返回</span>
<span class="sh_string">'../../impl/bbb'</span></code></pre>
</div>

<div class="translate-section" data-hash="418da72257679d7fe43d2410cd3d425b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>path.dirname(p)<span><a href="#all_path_dirname_p_1408" id="all_path_dirname_p_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="9619253f11ea48e59433d5feedc47027"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回路径中文件夹的名称.  类似于Unix的<code>dirname</code> 命令.

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="ec24091367e74246760496a5a428263f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>path<span class="sh_symbol">.</span><span class="sh_function">dirname</span><span class="sh_symbol">(</span><span class="sh_string">'/foo/bar/baz/asdf/quux'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns</span>
<span class="sh_string">'/foo/bar/baz/asdf'</span></code></pre>
</div>

<div class="translate-section" data-hash="728ba38b599926b2032ee5aca619da54"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>path.basename(p, [ext])<span><a href="#all_path_basename_p_ext_1408" id="all_path_basename_p_ext_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="fd1c053ef0847bc88b63a74dcc29c2dd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回路径中的最后哦一部分.  类似于Unix 的 <code>basename</code> 命令.

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="7ad24dd30accfa25803f013e0c774a19"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>path<span class="sh_symbol">.</span><span class="sh_function">basename</span><span class="sh_symbol">(</span><span class="sh_string">'/foo/bar/baz/asdf/quux.html'</span><span class="sh_symbol">,</span> <span class="sh_string">'.html'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns</span>
<span class="sh_string">'quux'</span></code></pre>
</div>

<div class="translate-section" data-hash="3b8215556e331aebb8f5c86c25d91bf8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>path.extname(p)<span><a href="#all_path_extname_p_1408" id="all_path_extname_p_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="4cbc0f0bc97fb3a9a4e51eca50fb9069"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回路径中文件的扩展名, 在从最后一部分中的最后一个'.'到字符串的末尾。
如果在路径的最后一部分没有'.'，或者第一个字符是'.'，就返回一个
空字符串。 例子：

</p>
</div>

<div class="translate-section" data-hash="bdadac5885a7a580b8d58526a6a27e41"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>path<span class="sh_symbol">.</span><span class="sh_function">extname</span><span class="sh_symbol">(</span><span class="sh_string">'index'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns</span>
<span class="sh_string">''</span></code></pre>
</div>

<div class="translate-section" data-hash="06ea66b43bae9ae7a51ae1b41e5c8889"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>path.sep<span><a href="#all_path_sep_1408" id="all_path_sep_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="c22c3c5cf90b46e29176b6a41a0009df"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>特定平台的文件分隔工具. <code>'\\'</code> 或者 <code>'/'</code>.

</p>
</div>

<div class="translate-section" data-hash="81ac465d53ea2880b60c7baf44265d5a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>*nix 上的例子:

</p>
</div>

<div class="translate-section" data-hash="6faea28a941ecc9cc2ac83d691baf72d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_string">'foo/bar/baz'</span><span class="sh_symbol">.</span><span class="sh_function">split</span><span class="sh_symbol">(</span>path<span class="sh_symbol">.</span>sep<span class="sh_symbol">)</span>
<span class="sh_comment">// returns</span>
<span class="sh_symbol">[</span><span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_string">'bar'</span><span class="sh_symbol">,</span> <span class="sh_string">'baz'</span><span class="sh_symbol">]</span></code></pre>
</div>

<div class="translate-section" data-hash="9e1a4994b7d7e6ce52033aa3f8b5930d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Windows 上的例子:

</p>
</div>

<div class="translate-section" data-hash="aaa81f8a5d8f11162a2dd0ffc48c28fd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_string">'foo</span><span class="sh_specialchar">\\</span><span class="sh_string">bar</span><span class="sh_specialchar">\\</span><span class="sh_string">baz'</span><span class="sh_symbol">.</span><span class="sh_function">split</span><span class="sh_symbol">(</span>path<span class="sh_symbol">.</span>sep<span class="sh_symbol">)</span>
<span class="sh_comment">// returns</span>
<span class="sh_symbol">[</span><span class="sh_string">'foo'</span><span class="sh_symbol">,</span> <span class="sh_string">'bar'</span><span class="sh_symbol">,</span> <span class="sh_string">'baz'</span><span class="sh_symbol">]</span></code></pre>
</div>

<div class="translate-section" data-hash="e68eff1a9560918e05a2e819916a7c42"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>path.delimiter<span><a href="#all_path_delimiter_1408" id="all_path_delimiter_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="39444af0792ad1ecb5884b2f540d40b5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>特定平台的路径分隔符, <code>;</code> 或者 <code>':'</code>.

</p>
</div>

<div class="translate-section" data-hash="81ac465d53ea2880b60c7baf44265d5a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>*nix 上的例子:

</p>
</div>

<div class="translate-section" data-hash="15b9c5a114461679312fc3c625d620ef"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>PATH<span class="sh_symbol">.</span><span class="sh_function">split</span><span class="sh_symbol">(</span>path<span class="sh_symbol">.</span>delimiter<span class="sh_symbol">)</span>
<span class="sh_comment">// returns</span>
<span class="sh_symbol">[</span><span class="sh_string">'/usr/bin'</span><span class="sh_symbol">,</span> <span class="sh_string">'/bin'</span><span class="sh_symbol">,</span> <span class="sh_string">'/usr/sbin'</span><span class="sh_symbol">,</span> <span class="sh_string">'/sbin'</span><span class="sh_symbol">,</span> <span class="sh_string">'/usr/local/bin'</span><span class="sh_symbol">]</span></code></pre>
</div>

<div class="translate-section" data-hash="9e1a4994b7d7e6ce52033aa3f8b5930d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Windows 上的例子:

</p>
</div>

<div class="translate-section" data-hash="c1f5f72de6df3890500a25110308f1f7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>PATH<span class="sh_symbol">)</span>
<span class="sh_comment">// 'C:\Windows\system32;C:\Windows;C:\Program Files\nodejs\'</span></code></pre>
</div>

<div class="translate-section" data-hash="65e9cab8836f77236ecd5ec67c8238c8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>process<span class="sh_symbol">.</span>env<span class="sh_symbol">.</span>PATH<span class="sh_symbol">.</span><span class="sh_function">split</span><span class="sh_symbol">(</span>path<span class="sh_symbol">.</span>delimiter<span class="sh_symbol">)</span>
<span class="sh_comment">// returns</span>
<span class="sh_symbol">[</span><span class="sh_string">'C:</span><span class="sh_specialchar">\W</span><span class="sh_string">indows</span><span class="sh_specialchar">\s</span><span class="sh_string">ystem32'</span><span class="sh_symbol">,</span> <span class="sh_string">'C:</span><span class="sh_specialchar">\W</span><span class="sh_string">indows'</span><span class="sh_symbol">,</span> <span class="sh_string">'C:</span><span class="sh_specialchar">\P</span><span class="sh_string">rogram Files</span><span class="sh_specialchar">\n</span><span class="sh_string">odejs</span><span class="sh_specialchar">\'</span><span class="sh_string">]</span></code></pre>
</div>
<div class="translate-section" data-hash="7a00dac33e16b5d50eb0c5eaae7170e5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>网络<span><a href="#all_70422" id="all_70422">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<div class="translate-section" data-hash="2146b4515b50f6aabc2d4de5d95a16d9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>net</code> 模块封装了异步网络功能，提供了一些方法来创建服务器和客户端（称之为流）。您可以用 <code>require('net')</code> 来引入这个模块。

</p>
</div>

<div class="translate-section" data-hash="a5319b0bcc98e7e100e007e1a17d38f1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>net.createServer([options], [connectionListener])<span><a href="#all_net_createserver_options_connectionlistener_1408" id="all_net_createserver_options_connectionlistener_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="c1d9d440401009e626ef2eabc5fd5bb8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建一个新的 TCP 服务器。参数 <code>connectionListener</code> 会被自动作为 <a href="#net_event_connection">'connection'</a> 事件的监听器。

</p>
</div>

<div class="translate-section" data-hash="949235f6a1e907b55db2ca4fc86f993f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>options</code> 是一个包含下列缺省值的对象：

</p>
</div>

<div class="translate-section" data-hash="6ac9ebaa90e9a3d3bee4fc74e07e9795"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> allowHalfOpen<span class="sh_symbol">:</span> <span class="sh_keyword">false</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="c8a487bcdec14d98f1c1e355a797cc93"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果允许半开连接 <code>allowHalfOpen</code> 被设置为 <code>true</code>，则当另一端的套接字发送 FIN 报文时套接字并不会自动发送 FIN 报文。套接字会变为不可读，但仍然可写。您应当明确地调用 <code>end()</code> 方法。详见 <a href="#net_event_end">'end'</a> 事件。

</p>
</div>

<div class="translate-section" data-hash="121b97c55405a492d16bd59a95cb6fa8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>下面是一个监听 8124 端口连接的应答服务器的例子：

</p>
</div>

<div class="translate-section" data-hash="e205a03394d20d2808aa04763ec873ee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> net <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'net'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> server <span class="sh_symbol">=</span> net<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">(</span>c<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span> <span class="sh_comment">// 'connection' 监听器</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'服务器已连接'</span><span class="sh_symbol">);</span>
  c<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'服务器已断开'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  c<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'hello</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
  c<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>c<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8124</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span> <span class="sh_comment">// 'listening' 监听器</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'服务器已绑定'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="42c50846605f66de004784e7b672d8d9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 <code>telnet</code> 测试：

</p>
</div>

<div class="translate-section" data-hash="54530fdc441b15a703ac83a66b4f3068"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>telnet localhost <span class="sh_number">8124</span></code></pre>
</div>

<div class="translate-section" data-hash="f198dcefed4b7a230565215b79b9cb1b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>要监听套接字 <code>/tmp/echo.sock</code> 仅需更改倒数第三行代码：

</p>
</div>

<div class="translate-section" data-hash="35953f26fb968b1033723c07a0da8057"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_string">'/tmp/echo.sock'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span> <span class="sh_comment">// 'listening' 监听器</span></code></pre>
</div>

<div class="translate-section" data-hash="8ab57e372b3d7b99164bcb61476fc196"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 <code>nc</code> 连接到一个 UNIX domain 套接字服务器：

</p>
</div>

<div class="translate-section" data-hash="df1d3bb538dd0022dfb3bb6fd9ec4c95"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>nc <span class="sh_symbol">-</span><span class="sh_normal">U </span><span class="sh_symbol">/</span><span class="sh_normal">tmp</span><span class="sh_symbol">/</span>echo<span class="sh_symbol">.</span>sock</code></pre>
</div>

<div class="translate-section" data-hash="f5ef859be70ca15c0737a7b2292c10d5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>net.connect(options, [connectionListener])<span><a href="#all_net_connect_options_connectionlistener_1408" id="all_net_connect_options_connectionlistener_1408">#</a></span></h2>
<h2>net.createConnection(options, [connectionListener])<span><a href="#all_net_createconnection_options_connectionlistener_1408" id="all_net_createconnection_options_connectionlistener_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="76341fdf64f394d9c79851bfb9015e3f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>构建一个新的套接字对象并打开所给位置的套接字。当套接字就绪时会触发 <a href="#net_event_connect">'connect'</a> 事件。

</p>
</div>

<div class="translate-section" data-hash="7c7506420221c6e306d80ab253079471"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>对于 TCP 套接字，选项 <code>options</code> 参数应为一个指定下列参数的对象：

</p>
</div>

<div class="translate-section" data-hash="49ec96ea21e673d45ca1239560e5eee9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>port</code>：客户端连接到的端口（必须）</li>
</ul>
</div>

<div class="translate-section" data-hash="7db961144b4fdfbf56067bc402a63887"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>host</code>：客户端连接到的主机，缺省为 <code>'localhost'</code></li>
</ul>
</div>

<div class="translate-section" data-hash="f6f82bb16c9a53d4b19068d81d345384"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>localAddress</code>：网络连接绑定的本地接口</li>
</ul>
</div>

<div class="translate-section" data-hash="916e9486bac576f09c4ae24734018d68"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>family</code>：IP 栈版本，缺省为 <code>4</code></li>
</ul>
</div>

<div class="translate-section" data-hash="4a7043aef17be8a24f053c5627adbdaf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>对于 UNIX domain 套接字，选项 <code>options</code> 参数应当为一个指定下列参数的对象：

</p>
</div>

<div class="translate-section" data-hash="bf50561ae5f562a6b7e9c57a635e47a0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>path</code>：客户端连接到的路径（必须）</li>
</ul>
</div>

<div class="translate-section" data-hash="7b98c68b42a7040780d152f4f50e0e63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>通用选项：

</p>
</div>

<div class="translate-section" data-hash="42112f5246ba3c1264c46de308a25f1a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>allowHalfOpen</code>：允许半开连接，如果被设置为 <code>true</code>，则当另一端的套接字发送 FIN 报文时套接字并不会自动发送 FIN 报文。缺省为 <code>false</code>。详见 <a href="#net_event_end">'end'</a> 事件。</li>
</ul>
</div>

<div class="translate-section" data-hash="b795f7662b35ba54af936f037171fc71"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p> <code>connectListener</code> 用于 <a href="#net_event_connect">'connect'</a> 事件的监听器

</p>
</div>

<div class="translate-section" data-hash="75d03e8caa718d3ba0ed7357f93fb3d3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>下面是一个上述应答服务器的客户端的例子：

</p>
</div>

<div class="translate-section" data-hash="dd97df27d7170e5ddb7f3222ff110a9a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> net <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'net'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> client <span class="sh_symbol">=</span> net<span class="sh_symbol">.</span><span class="sh_function">connect</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>port<span class="sh_symbol">:</span> <span class="sh_number">8124</span><span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
    <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span> <span class="sh_comment">//'connect' 监听器</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'client connected'</span><span class="sh_symbol">);</span>
  client<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'world!</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
client<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>data<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  client<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
client<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'客户端断开连接'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="451271b9f12588f4738afd8a8677b5f1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>要连接到套接字 <code>/tmp/echo.sock</code>，仅需将第二行改为

</p>
</div>

<div class="translate-section" data-hash="78bc78c4a6d89655786bba2b65a3445f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> client <span class="sh_symbol">=</span> net<span class="sh_symbol">.</span><span class="sh_function">connect</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>path<span class="sh_symbol">:</span> <span class="sh_string">'/tmp/echo.sock'</span><span class="sh_cbracket">}</span><span class="sh_symbol">,</span></code></pre>
</div>

<div class="translate-section" data-hash="93e24816f7be478b2905e58b1e6c2498"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>net.connect(port, [host], [connectListener])<span><a href="#all_net_connect_port_host_connectlistener_1408" id="all_net_connect_port_host_connectlistener_1408">#</a></span></h2>
<h2>net.createConnection(port, [host], [connectListener])<span><a href="#all_net_createconnection_port_host_connectlistener_1408" id="all_net_createconnection_port_host_connectlistener_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="e33ba1a913d2eae1ebf187d32687ff9d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建一个 <code>host</code> 主机 <code>port</code> 端口的 TCP 连接。如果省略 <code>host</code> 则假定为 <code>'localhost'</code>。<code>connectListener</code> 参数会被用作 <a href="#net_event_connect">'connect'</a> 事件的监听器。

</p>
</div>

<div class="translate-section" data-hash="08b57c5bb469e567f544cb0d4968a61b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>net.connect(path, [connectListener])<span><a href="#all_net_connect_path_connectlistener_1408" id="all_net_connect_path_connectlistener_1408">#</a></span></h2>
<h2>net.createConnection(path, [connectListener])<span><a href="#all_net_createconnection_path_connectlistener_1408" id="all_net_createconnection_path_connectlistener_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="f08cd23a1dc041282baa274534a5504e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建一个到路径 <code>path</code> 的 UNIX 套接字连接。<code>connectListener</code> 参数会被用作 <a href="#net_event_connect">'connect'</a> 事件的监听器。

</p>
</div>

<div class="translate-section" data-hash="e9de0b0e617535aefeca97161b198394"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: net.Server<span><a href="#all_net_server_1408" id="all_net_server_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="3047c9abd019bd60320dffa2beb0575f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该类用于创建一个 TCP 或 UNIX 服务器。服务器本质上是一个可监听传入连接的 <code>net.Socket</code>。

</p>
</div>

<div class="translate-section" data-hash="72d2be493160e3f795fefde4579eb6d8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.listen(port, [host], [backlog], [callback])<span><a href="#all_server_listen_port_host_backlog_callback_2816" id="all_server_listen_port_host_backlog_callback_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="caf2269f9377db2563f4a84e7c82def8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在指定端口 <code>port</code> 和主机 <code>host</code> 上开始接受连接。如果省略 <code>host</code> 则服务器会接受来自所有 IPv4 地址（<code>INADDR_ANY</code>）的连接；端口为 0 则会使用分随机分配的端口。

</p>
</div>

<div class="translate-section" data-hash="bed0b4a9d97d9c397f601f6d6aa0fe48"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>积压量 <code>backlog</code> 为连接等待队列的最大长度。实际长度由您的操作系统通过 sysctl 设置决定，比如 Linux 上的 <code>tcp_max_syn_backlog</code> 和 <code>somaxconn</code>。该参数缺省值为 511（不是 512）。

</p>
</div>

<div class="translate-section" data-hash="c97627cf6e66ffb09461eb9a1fe3ce90"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是一个异步函数。当服务器已被绑定时会触发 <a href="http://nodeapi.ucdok.com/api/net.html#net_event_listening">'listening'</a> 事件。最后一个参数 <code>callback</code> 会被用作 <a href="http://nodeapi.ucdok.com/api/net.html#net_event_listening">'listening'</a> 事件的监听器。

</p>
</div>

<div class="translate-section" data-hash="72de287b1b407aef3074f1d150143b5a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>有些用户会遇到的情况是遇到 'EADDINUSE' 错误。这表示另一个服务器已经运行在所请求的端口上。一个处理这种情况的方法是等待一段时间再重试

</p>
</div>

<div class="translate-section" data-hash="2dba15a04cd690ab4f9457824b9f56d3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>e<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>e<span class="sh_symbol">.</span>code <span class="sh_symbol">==</span> <span class="sh_string">'EADDRINUSE'</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'地址被占用，重试中...'</span><span class="sh_symbol">);</span>
    <span class="sh_function">setTimeout</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span> <span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
      server<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
      server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span>PORT<span class="sh_symbol">,</span> HOST<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="f9604840df95ac404bcc3aee5f674764"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>（注意：Node 中的所有套接字已设置了 <code>SO_REUSEADDR</code>）

</p>
</div>

<div class="translate-section" data-hash="ea96ac8cfe7103bc7860faeff6c13809"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.listen(path, [callback])<span><a href="#all_server_listen_path_callback_4224" id="all_server_listen_path_callback_4224">#</a></span></h3>
</div>

<div class="translate-section" data-hash="0e97c81434ca640c24289a87e35fa4ad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>启动一个 UNIX 套接字服务器在所给路径 <code>path</code> 上监听连接。

</p>
</div>

<div class="translate-section" data-hash="c97627cf6e66ffb09461eb9a1fe3ce90"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是一个异步函数。当服务器已被绑定时会触发 <a href="http://nodeapi.ucdok.com/api/net.html#net_event_listening">'listening'</a> 事件。最后一个参数 <code>callback</code> 会被用作 <a href="http://nodeapi.ucdok.com/api/net.html#net_event_listening">'listening'</a> 事件的监听器。

</p>
</div>

<div class="translate-section" data-hash="38791e5df388e8941cc5952b18405806"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.listen(handle, [callback])<span><a href="#all_server_listen_handle_callback_4224" id="all_server_listen_handle_callback_4224">#</a></span></h3>
</div>

<div class="translate-section" data-hash="77243d535077126c3d70fb90b3f59de4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>handle</code>处理器 {Object}</li>
<li><code>callback</code>回调函数 {Function}</li>
</ul>
</div>

<div class="translate-section" data-hash="c2a75ad83b4c9c7db282f7ef55a7a7d7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>handle</code> 变量可以被设置为server 或者 socket(任一以下划线开头的成员 <code>_handle</code>), 或者一个 <code>{fd: &lt;n&gt;}</code> 对象

</p>
</div>

<div class="translate-section" data-hash="b7aee7b7633990f2c8b6a0a271e8b226"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这将使服务器用指定的句柄接受连接，但它假设文件描述符或者句柄已经被绑定在特定的端口或者域名套接字。

</p>
</div>

<div class="translate-section" data-hash="ac30103f7bf2cc030495bb3d55e50465"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Windows 不支持监听一个文件描述符。

</p>
</div>

<div class="translate-section" data-hash="2e70cead120b4500bbf07d2734f7dd46"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是一个异步函数。当服务器已被绑定时会触发 <a href="#event_listening_">'listening'</a> 事件。最后一个参数 <code>callback</code> 会被用作 <a href="#event_listening_">'listening'</a> 事件的监听器。

</p>
</div>

<div class="translate-section" data-hash="f7907ff9a0ecbf199c48b188bc048cb4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.close([callback])<span><a href="#all_server_close_callback_4224" id="all_server_close_callback_4224">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d3eb248066be4ce18df4b9fa5f3b3e13"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用于停止服务器接受新连接，但保持已存在的连接。这是一个异步函数，
服务器将在所有的连接都结束后关闭，并且服务器发送 <code>'close'</code>事件
你可以有选择的传入回调函数来监听 <code>'close'</code>事件。

</p>
</div>

<div class="translate-section" data-hash="384a0012bb072a9b692a19e31455fc8f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.address()<span><a href="#all_server_address_2817" id="all_server_address_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="64483b692256015e812c052480896f33"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回操作系统报告的绑定的地址，协议族和端口。
对查找操作系统分配的地址哪个端口已被分配非常有用， 如.
<code>{ port: 12346, family: 'IPv4', address: '127.0.0.1' }</code>

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="802c9f194abb6ce2876c6e51b73023a7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 获得随机端口</span>
server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  address <span class="sh_symbol">=</span> server<span class="sh_symbol">.</span><span class="sh_function">address</span><span class="sh_symbol">();</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"opened server on %j"</span><span class="sh_symbol">,</span> address<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="4ebeffd5e25f3675c16b8789e8191466"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在 <code>'listening'</code> 事件发生前请勿调用 <code>server.address()</code>。

</p>
</div>

<div class="translate-section" data-hash="c65f92bd5dde832382c586a89de6e926"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.unref()<span><a href="#all_server_unref_1408" id="all_server_unref_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="ed31395b96825d0e6640a6be8b989dc6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果这是事件系统中唯一一个活动的服务器，调用 <code>unref</code> 将允许程序退出。如果服务器已被 <code>unref</code>，则再次调用 <code>unref</code> 并不会产生影响。

</p>
</div>

<div class="translate-section" data-hash="aa7d65bee278e99af3f47a987f50b29b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.ref()<span><a href="#all_server_ref_1408" id="all_server_ref_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="66092bb7334e7052e18b5ca9bfdffc49"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>与 <code>unref</code> 相反，如果这是仅剩的服务器，在一个之前被 <code>unref</code> 了的服务器上调用 <code>ref</code> 将不会让程序退出（缺省行为）。如果服务器已经被 <code>ref</code>，则再次调用 <code>ref</code> 并不会产生影响。

</p>
</div>

<div class="translate-section" data-hash="a1729ebb5af5ad68678ff775c92a05de"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.maxConnections<span><a href="#all_server_maxconnections_2817" id="all_server_maxconnections_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="222d03c61c54cc63fcc23397847ef925"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置这个选项能在当服务器连接数超过数量时拒绝连接。

</p>
</div>

<div class="translate-section" data-hash="b7ff0bc148f6bcd5ef9dab3a6bd0bfcf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个选项不推荐使用在套接字已经用 <code>child_process.fork()</code>发送给子进程。

</p>
</div>

<div class="translate-section" data-hash="49db72aa1abba4986962d84adecdf2e4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.connections<span><a href="#all_server_connections_2817" id="all_server_connections_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="2bcbaee3631f855008295f31e4c168a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个函数已被 <strong>废弃</strong>; 请用 [server.getConnections()][] 代替.
服务器的当前活动连接的数量。

</p>
</div>

<div class="translate-section" data-hash="b2b7f8d4512ae8c60af9f0457bc434d2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当用<code>child_process.fork()</code>发送一个套接字给子进程时，它将是 <code>null</code> 。
要轮询子进程来获取当前活动的连接请用 <code>server.getConnections</code> 代替.

</p>
</div>

<div class="translate-section" data-hash="3bc7e5df028087f5df731fa2fe85af78"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>net.Server</code> 是一个包含下列事件的 <a href="http://nodeapi.ucdok.com/api/events.html#events_class_events_eventemitter">EventEmitter</a> :

</p>
</div>

<div class="translate-section" data-hash="184f11efcd6285001ae5a36b76851b0c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.getConnections(callback)<span><a href="#all_server_getconnections_callback_1408" id="all_server_getconnections_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="90d54a808579094f30a0abc2cbc863d9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>异步获取服务器当前活跃的连接数. 
用于套接字呗发送给子进程。

</p>
</div>

<div class="translate-section" data-hash="ff50cc3324e74d9d6ec867fe98493e8f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>回调函数需要两个参数 <code>err</code> 和 <code>count</code>.

</p>
</div>

<div class="translate-section" data-hash="b7a4250e71d753dcfb6d653622e1d8c3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'listening'<span><a href="#all_listening_5632" id="all_listening_5632">#</a></span></h3>
</div>

<div class="translate-section" data-hash="0fb825da121e5a33fdd03b306665bdac"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在服务器调用 <code>server.listen</code>绑定后触发。

</p>
</div>

<div class="translate-section" data-hash="6f49e683b9234449060f0beee3592dc2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'connection'<span><a href="#all_connection_2816" id="all_connection_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="db7ad6a0fb95416c37255616d57eef23"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Socket object} 连接对象</li>
</ul>
</div>

<div class="translate-section" data-hash="da2616371a9065147105b4c620fd2964"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在一个新连接被创建时触发。 <code>socket</code> 是一个<code>net.Socket</code>的实例。

</p>
</div>

<div class="translate-section" data-hash="d2b8af4d8afc211663a4341cca53b503"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'close'<span><a href="#all_close_12673" id="all_close_12673">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d19b132c91967bce63048e15ff118496"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当服务被关闭时触发. 注意：如果当前仍有活动连接，他个事件将等到所有连接都结束后才触发。

</p>
</div>

<div class="translate-section" data-hash="64e904775a6e7456b0a8274a22954209"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'error'<span><a href="#all_error_9859" id="all_error_9859">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d2ccdaeacf430a4faf720ded972dc739"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Error Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="62942044cd45c7ab73c7b59883b2438a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当一个错误发生时触发。  <code>'close'</code> 事件将直接被下列时间调用。
请查看讨论 <code>server.listen</code>的例子。

</p>
</div>

<div class="translate-section" data-hash="9647d35f9acaeecd200f70fea86ad3c3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: net.Socket<span><a href="#all_net_socket_1408" id="all_net_socket_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b0ac7c7961cf90148ead9db10b3799f0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个对象是一个TCP或UNIX套接字的抽象。  <code>net.Socket</code>
实例实现了一个双工流接口。 他们可以被用户使用在客户端(使用 <code>connect()</code>) 
或者它们可以由 Node创建，并通过 <code>'connection'</code>服务器事件传递给用户。

</p>
</div>

<div class="translate-section" data-hash="1bf35c6b41551a70954c3edfb53c2ce5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>new net.Socket([options])<span><a href="#all_new_net_socket_options_1408" id="all_new_net_socket_options_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="41edcef6d6f9c38fd0beea92c5c06bf3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>构造一个新的套接字对象。

</p>
</div>

<div class="translate-section" data-hash="949235f6a1e907b55db2ca4fc86f993f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>options</code> 是一个包含下列缺省值的对象：

</p>
</div>

<div class="translate-section" data-hash="1d2eeadc7d261a3830b0d83f268a2c87"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> fd<span class="sh_symbol">:</span> <span class="sh_keyword">null</span>
  type<span class="sh_symbol">:</span> <span class="sh_keyword">null</span>
  allowHalfOpen<span class="sh_symbol">:</span> <span class="sh_keyword">false</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="a968e163e673a9b0684a5b9b121bb5f7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>fd</code> 允许你指定一个存在的文件描述符和套接字。
 <code>type</code> 指定一个优先的协议。 他可以是 <code>'tcp4'</code>, <code>'tcp6'</code>, 或 <code>'unix'</code>.
关于 <code>allowHalfOpen</code>, 参见 <code>createServer()</code> 和 <code>'end'</code> 事件。

</p>
</div>

<div class="translate-section" data-hash="2f3253549bf031b9814681abf008ddae"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.connect(port, [host], [connectListener])<span><a href="#all_socket_connect_port_host_connectlistener_1408" id="all_socket_connect_port_host_connectlistener_1408">#</a></span></h3>
<h3>socket.connect(path, [connectListener])<span><a href="#all_socket_connect_path_connectlistener_1408" id="all_socket_connect_path_connectlistener_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="5dc78dce7c96c28668a22ed82ac6b804"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用传入的套接字打开一个连接 如果 <code>port</code> 和 <code>host</code> 都被传入，
那么套接字将会被已TCP套接字打开，如果 <code>host</code> 被省略,
默认为<code>localhost</code> . 如果 <code>path</code> 被传入,
套接字将会被已指定路径UNIX套接字打开。

</p>
</div>

<div class="translate-section" data-hash="e011cb5ccbb3073742048c463b02edcf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一般情况下这个函数是不需要使用, 比如用 <code>net.createConnection</code> 打开套接字.
只有在您实现了自定义套接字时候才需要。

</p>
</div>

<div class="translate-section" data-hash="3f4a831412af1b278011776adf7cb49b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是一个异步函数。 当 <a href="#net_event_connect">'connect'</a> 触发了的套接字是established状态
.或者在连接的时候出现了一个问题, <code>'connect'</code> 事件不会被触发，
而 <code>'error'</code> 事件会触发并发送异常信息。

</p>
</div>

<div class="translate-section" data-hash="b795f7662b35ba54af936f037171fc71"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p> <code>connectListener</code> 用于 <a href="#net_event_connect">'connect'</a> 事件的监听器

</p>
</div>

<div class="translate-section" data-hash="1bd2b64d3ddc61815f4dbf22ad9f5a4f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.bufferSize<span><a href="#all_socket_buffersize_1408" id="all_socket_buffersize_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="4f97d047484177ed35ec655a1e3c005e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>是一个<code>net.Socket</code> 的属性，用于 <code>socket.write()</code> . 
用于帮助用户获取更快的运行速度。 计算机不能一直处于大量数据被写入状态 ——
网络链接可能会变得过慢。 Node 在内部会排队等候数据被写入套接字并确保传输连接上的数据完好。
(内部实现为：轮询套接字的文件描述符等待它为可写).

</p>
</div>

<div class="translate-section" data-hash="4014a77b4500dbaccac02cbd12b71884"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>内部缓冲的可能后果是内存使用会增加。这个属性表示了现在处于缓冲区等待被写入的字符数。（字符的数目约等于要被写入的字节数，但是缓冲区可能包含字符串，而字符串是惰性编码的，所以确切的字节数是未知的。）

</p>
</div>

<div class="translate-section" data-hash="3336e399ff664bc0292f775be9239c09"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>遇到数值很大或者增长很快的<code>bufferSize</code>的时候，用户应该尝试用<code>pause()</code>和<code>resume()</code>来控制数据流。

</p>
</div>

<div class="translate-section" data-hash="434a80f5976a82bf9de029af11c102b5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.setEncoding([encoding])<span><a href="#all_socket_setencoding_encoding_1408" id="all_socket_setencoding_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="1b81b4a9dd008088cba2534f57d0cfba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置套接字的编码为一个可读流. 
更多信息请查看 <a href="http://nodeapi.ucdok.com/api/stream.html#stream_stream_setencoding_encoding">stream.setEncoding()</a> 

</p>
</div>

<div class="translate-section" data-hash="b2c44f30146f839c89a3567c8c18217a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.write(data, [encoding], [callback])<span><a href="#all_socket_write_data_encoding_callback_1408" id="all_socket_write_data_encoding_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="dc6c6c5c2f1e699049b06ab1f615db78"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在套接字上发送数据。第二参数指明了使用字符串时的编码方式-默认为UTF8编码。

</p>
</div>

<div class="translate-section" data-hash="662e9ecf9ba2783888e8cd306c0b1a4a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果所有数据被成功刷新到内核缓冲区，则返回<code>true</code>。如果所有或部分数据在用户内存里还处于队列中，则返回<code>false</code>。当缓冲区再次被释放时，<code>'drain'</code>事件会被分发。
<code>'drain'</code> will be emitted when the buffer is again free.

</p>
</div>

<div class="translate-section" data-hash="565de442678ab32ed84ea26de81069f9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当数据最终被完整写入时，可选的<code>callback</code>参数会被执行 - 但不一定是马上执行。

</p>
</div>

<div class="translate-section" data-hash="07639ae3df64699d52bc33643b284226"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.end([data], [encoding])<span><a href="#all_socket_end_data_encoding_1408" id="all_socket_end_data_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="692bac3530141c927fa85a7f080e8011"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>半关闭套接字 如., 它发送一个 FIN 包 .可能服务器仍在发送数据。

</p>
</div>

<div class="translate-section" data-hash="df4db0a645429fe3280f24cabe8d56b5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果 <code>data</code>被传入, 等同于调用
<code>socket.write(data, encoding)</code> 然后调用 <code>socket.end()</code>.

</p>
</div>

<div class="translate-section" data-hash="1f792e5f7cc8fbf7c0343015e3a69316"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.destroy()<span><a href="#all_socket_destroy_1408" id="all_socket_destroy_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="f0dfc3acf8bd3c794844b0190143ff70"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>确保没有I/O活动在这个套接字。
只有在错误发生情况下才需要（处理错误等等）。

</p>
</div>

<div class="translate-section" data-hash="81096a96961152340520adf61c52fa38"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.pause()<span><a href="#all_socket_pause_1408" id="all_socket_pause_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3d9049b7b2cc62002ee8c5b34da230b1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>暂停读取数据。 <code>'data'</code> 事件不会被触发。
对于控制上传非常有用。

</p>
</div>

<div class="translate-section" data-hash="72e80ad39be4c84a7ea6744dd0f2e9cd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.resume()<span><a href="#all_socket_resume_1408" id="all_socket_resume_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c2211b0545f065cd9e0eec471078c4ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在调用 <code>pause()</code>后恢复读操作。

</p>
</div>

<div class="translate-section" data-hash="7e2ab4448357a3d37db562766d263df6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.setTimeout(timeout, [callback])<span><a href="#all_socket_settimeout_timeout_callback_1408" id="all_socket_settimeout_timeout_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="4b1fb9c4e672bae2d6479bd7907487ea"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果套接字超过<code>timeout</code>毫秒处于闲置状态，则将套接字设为超时。默认情况下<code>net.Socket</code>不存在超时。

</p>
</div>

<div class="translate-section" data-hash="bb5a2a0bb0597e59ba1b1d7b677cfaab"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当一个闲置超时被触发时，套接字会接收到一个<code>'timeout'</code>事件，但是连接将不会被断开。用户必须手动<code>end()</code>或<code>destroy()</code>这个套接字。

</p>
</div>

<div class="translate-section" data-hash="c6339b14a41777b71b3d3ce068bed766"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果<code>timeout</code>为0，那么现有的闲置超时会被禁用。

</p>
</div>

<div class="translate-section" data-hash="6b8be77074f346907ad2baa98dfa59aa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>可选的<code>callback</code>参数将会被添加成为<code>'timeout'</code>事件的一次性监听器。

</p>
</div>

<div class="translate-section" data-hash="07a0f6be0670190a991542f9c7a339be"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.setNoDelay([noDelay])<span><a href="#all_socket_setnodelay_nodelay_1408" id="all_socket_setnodelay_nodelay_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="f6e50e777a8005772ed5c01202764441"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>禁用纳格（Nagle）算法。默认情况下TCP连接使用纳格算法，这些连接在发送数据之前对数据进行缓冲处理。 将<code>noDelay</code>设成<code>true</code>会在每次<code>socket.write()</code>被调用时立刻发送数据。<code>noDelay</code>默认为<code>true</code>。

</p>
</div>

<div class="translate-section" data-hash="4b4a41779c897f7b0a30a45149165ce9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.setKeepAlive([enable], [initialDelay])<span><a href="#all_socket_setkeepalive_enable_initialdelay_1408" id="all_socket_setkeepalive_enable_initialdelay_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="902a9b7b83139655e63424c7b7673955"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>禁用/启用长连接功能，并在第一个在闲置套接字上的长连接probe被发送之前，可选地设定初始延时。<code>enable</code>默认为<code>false</code>。

</p>
</div>

<div class="translate-section" data-hash="dbf30f8a1d615d1b5e421dcecf4a4691"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设定<code>initialDelay</code> (毫秒)，来设定在收到的最后一个数据包和第一个长连接probe之间的延时。将initialDelay设成0会让值保持不变(默认值或之前所设的值)。默认为<code>0</code>。

</p>
</div>

<div class="translate-section" data-hash="14cbd9b3098686d28261c10238ff6ad0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.address()<span><a href="#all_socket_address_2816" id="all_socket_address_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="ecfee842e55575beb7b7a779512fba77"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回 socket 绑定的IP地址, 协议类型 (family name) 以及 端口号 (port). 具体是一个包含三个属性的对象, 形如 <code>{ port: 12346, family: 'IPv4', address: '127.0.0.1' }</code>

</p>
</div>

<div class="translate-section" data-hash="b6f418bf829edeb8395c45df3cca6208"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.unref()<span><a href="#all_socket_unref_2816" id="all_socket_unref_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="6ecc35ad7499415dc9b05d0d391e3777"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果这是事件系统中唯一一个活动的套接字，调用 <code>unref</code> 将允许程序退出。如果套接字已被 <code>unref</code>，则再次调用 <code>unref</code> 并不会产生影响。

</p>
</div>

<div class="translate-section" data-hash="bac28d98f9e58b0d01dde6f57b0e6e86"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.ref()<span><a href="#all_socket_ref_2816" id="all_socket_ref_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3c231fc5bfbbe5f21b484fb9391db9af"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>与 <code>unref</code> 相反，如果这是仅剩的套接字，在一个之前被 <code>unref</code> 了的套接字上调用 <code>ref</code> 将<em>不会</em>让程序退出（缺省行为）。如果一个套接字已经被 <code>ref</code>，则再次调用 <code>ref</code> 并不会产生影响。

</p>
</div>

<div class="translate-section" data-hash="7c97c90ca53d6fb9f9013f1ca3c2ce0e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.remoteAddress<span><a href="#all_socket_remoteaddress_1408" id="all_socket_remoteaddress_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3875d73c871ccf8b6152db536146f839"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>远程IP地址的字符串表示。例如，<code>'74.125.127.100'</code>或 <code>'2001:4860:a005::68'</code>。

</p>
</div>

<div class="translate-section" data-hash="33ac11c486186499587e232042e6db3c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.remotePort<span><a href="#all_socket_remoteport_1408" id="all_socket_remoteport_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="976968962027461c6731d8ebb1faedfd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>远程端口的数值表示。例如，<code>80</code> 或 <code>21</code>。

</p>
</div>

<div class="translate-section" data-hash="6255100b0444c5ec5f8be39f57356bc9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.localAddress<span><a href="#all_socket_localaddress_1408" id="all_socket_localaddress_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="abff3f8a2f59f6b1b85a46a8c825c9a1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>远程客户端正在连接的本地IP地址的字符串表示。例如，如果你在监听<code>'0.0.0.0'</code>而客户端连接在<code>'192.168.1.1'</code>，这个值就会是 <code>'192.168.1.1'</code>。

</p>
</div>

<div class="translate-section" data-hash="b177b870655122249db58d4540b0b629"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.localPort<span><a href="#all_socket_localport_1408" id="all_socket_localport_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a079615a06a5175268878db61e5b7216"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>本地端口的数值表示。比如<code>80</code> 或 <code>21</code>。

</p>
</div>

<div class="translate-section" data-hash="fd7774413e93f3afd77c890b71bfec8a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.bytesRead<span><a href="#all_socket_bytesread_1408" id="all_socket_bytesread_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="265180e5157775eb209d9419996d1ecb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所接收的字节数。

</p>
</div>

<div class="translate-section" data-hash="2d673df97ecccb74018009cd7118085e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.bytesWritten<span><a href="#all_socket_byteswritten_1408" id="all_socket_byteswritten_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="51e74069ec11bb5abeaa5d07e7564e64"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所发送的字节数。

</p>
</div>

<div class="translate-section" data-hash="d01c1c788d695ea8a11bfc81e85647f5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>net.Socket</code>实例是带有以下事件的<a href="http://nodeapi.ucdok.com/api/events.html#events_class_events_eventemitter">EventEmitter</a>对象：

</p>
</div>

<div class="translate-section" data-hash="ffb96f7871c95ba58881d938fa4ae8a0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'lookup'<span><a href="#all_lookup_1408" id="all_lookup_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="8860d3bb83edd49916d9285a51185d28"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个事件在解析主机名之后，连接主机之前被分发。对UNIX套接字不适用。

</p>
</div>

<div class="translate-section" data-hash="f86664f2a7f396cf1ac84b8af801bc21"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>err</code> {Error | Null} 错误对象。见[dns.lookup()][]。</li>
<li><code>address</code> {String} IP地址。</li>
<li><code>family</code> {String | Null} 得知类型。见[dns.lookup()][]。</li>
</ul>
</div>

<div class="translate-section" data-hash="a385d91c55ee447e6f8bfe2c4698eb4d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'connect'<span><a href="#all_connect_4224" id="all_connect_4224">#</a></span></h3>
</div>

<div class="translate-section" data-hash="7cdf7282b1b380cec45a5bc332772d3b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该事件在一个套接字连接成功建立后被分发。见<code>connect()</code>。

</p>
</div>

<div class="translate-section" data-hash="7eaccedec2e07e15926b9d3bedc571f5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'data'<span><a href="#all_data_2817" id="all_data_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="361e8d24ff97bb482e25572b792a383b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Buffer object}</li>
</ul>
</div>

<div class="translate-section" data-hash="90e55fbbd5c70796220888b8333b083d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当收到数据时被分发。<code>data</code>参数会是一个<code>Buffer</code>或<code>String</code>对象。数据的编码方式由<code>socket.setEncoding()</code>设定。
（详见 [可读流][] 章节）

</p>
</div>

<div class="translate-section" data-hash="3ae76c60e74a50c2f606a251752759e9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请注意，如果一个<code>Socket</code>对象分发一个<code>'data'</code>事件时没有任何监听器存在，则 <strong>数据会丢失</strong>。

</p>
</div>

<div class="translate-section" data-hash="492626ec80519b3adc5a7e73c5cbb314"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'end'<span><a href="#all_end_2817" id="all_end_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="1bdeedeaf87dfd96da0604923cf5f2ea"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当套接字的另一端发送FIN包时，该事件被分发。

</p>
</div>

<div class="translate-section" data-hash="3ea22deb05c7ffe34eb2781376166bde"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>默认情况下 （<code>allowHalfOpen == false</code>），当套接字完成待写入队列中的任务时，它会destroy文件描述符。然而，如果把<code>allowHalfOpen</code>设成<code>true</code>，那么套接字将不会从它这边自动调用<code>end()</code>，使得用户可以随意写入数据，但同时使得用户自己需要调用<code>end()</code>。

</p>
</div>

<div class="translate-section" data-hash="9ea4447c51533949395d9149831c6c43"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'timeout'<span><a href="#all_timeout_1408" id="all_timeout_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c871ea61225110849f33a5e4a873e5f0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当套接字因为非活动状态而超时时该事件被分发。这只是用来表明套接字处于空闲状态。用户必须手动关闭这个连接。

</p>
</div>

<div class="translate-section" data-hash="12c5d8d0a6b726d16d845cb8776f1e39"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>参阅：<code>socket.setTimeout()</code>

</p>
</div>

<div class="translate-section" data-hash="6b3bfbd46663a233236ad6e0c5c88f46"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'drain'<span><a href="#all_drain_2817" id="all_drain_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="341ed7b44a8e5aaf90581dd84414a2fd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当写入缓冲被清空时产生。可被用于控制上传流量。

</p>
</div>

<div class="translate-section" data-hash="a8a0d3064bbcdc0df62785acc7197f5e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>参阅：<code>socket.write()</code> 的返回值

</p>
</div>

<div class="translate-section" data-hash="64e904775a6e7456b0a8274a22954209"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'error'<span><a href="#all_error_9860" id="all_error_9860">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a0014001615e217bd63525e6a176248e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Error object}</li>
</ul>
</div>

<div class="translate-section" data-hash="1bc57b8fde4fdf8f85ba7ca27200fba7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当一个错误发生时产生。<code>'close'</code> 事件会紧接着该事件被触发。

</p>
</div>

<div class="translate-section" data-hash="d2b8af4d8afc211663a4341cca53b503"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'close'<span><a href="#all_close_12674" id="all_close_12674">#</a></span></h3>
</div>

<div class="translate-section" data-hash="f701d38ce2fce0019f2da848be6272ad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>had_error</code> {Boolean} 如果套接字发生了传输错误则此字段为true</li>
</ul>
</div>

<div class="translate-section" data-hash="d35fe25b2cf6d0228d8b34708f0a3c36"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当套接字完全关闭时该事件被分发。参数<code>had_error</code>是一个布尔值，表示了套接字是否因为一个传输错误而被关闭。

</p>
</div>

<div class="translate-section" data-hash="12a94c752135a779c771779aa1ab91b9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>net.isIP(input)<span><a href="#all_net_isip_input_1408" id="all_net_isip_input_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="5992716e0967dfce4e67634312422de0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>测试 input 是否 IP 地址。无效字符串返回 0；IP 版本 4 地址返回 4；IP 版本 6 地址返回 6。

</p>
</div>

<div class="translate-section" data-hash="99a0c12773072279a6ceaa784b05f844"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>net.isIPv4(input)<span><a href="#all_net_isipv4_input_1408" id="all_net_isipv4_input_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="7efeb5eb551a85bf24bac17541480193"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果 input 为版本 4 地址则返回 true，否则返回 false。

</p>
</div>

<div class="translate-section" data-hash="ec17dce719970c14c45a98f32725f011"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>net.isIPv6(input)<span><a href="#all_net_isipv6_input_1408" id="all_net_isipv6_input_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="38c7a97e90d39738d2e5643a5c7168f3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果 input 为版本 6 地址则返回 true，否则返回 false。

</p>
</div>

<div class="translate-section" data-hash="19906b0b363bedecc396236ba1e3dad5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

</div>
<div class="translate-section" data-hash="05355de47a4520d23e59b2aa65612017"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>UDP / 数据报套接字<span><a href="#all_udp_1408" id="all_udp_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<!-- name=dgram -->

<div class="translate-section" data-hash="b14cc2dca85587140815b39a12b6d96b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>数据报套接字通过 <code>require('dgram')</code> 提供。

</p>
</div>

<div class="translate-section" data-hash="8e0f96e0aad0ffbf8bd6a036b0b91968"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>重要提醒：<code>dgram.Socket#bind()</code> 的行为在 v0.10 中已改变，并且现在它总是异步的。如果您的代码看起来像这样：

</p>
</div>

<div class="translate-section" data-hash="a8a24ab7123f4c9d40ed287ab0aa9a7b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> s <span class="sh_symbol">=</span> dgram<span class="sh_symbol">.</span><span class="sh_function">createSocket</span><span class="sh_symbol">(</span><span class="sh_string">'udp4'</span><span class="sh_symbol">);</span>
s<span class="sh_symbol">.</span><span class="sh_function">bind</span><span class="sh_symbol">(</span><span class="sh_number">1234</span><span class="sh_symbol">);</span>
s<span class="sh_symbol">.</span><span class="sh_function">addMembership</span><span class="sh_symbol">(</span><span class="sh_string">'224.0.0.114'</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="de3dece0f8cee943623d938d57dc6d80"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>您需要将它改成这样：

</p>
</div>

<div class="translate-section" data-hash="18ec9d3f380a0ea8bbb55db9e6515763"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> s <span class="sh_symbol">=</span> dgram<span class="sh_symbol">.</span><span class="sh_function">createSocket</span><span class="sh_symbol">(</span><span class="sh_string">'udp4'</span><span class="sh_symbol">);</span>
s<span class="sh_symbol">.</span><span class="sh_function">bind</span><span class="sh_symbol">(</span><span class="sh_number">1234</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  s<span class="sh_symbol">.</span><span class="sh_function">addMembership</span><span class="sh_symbol">(</span><span class="sh_string">'224.0.0.114'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="d679c0d54d1e26845d1002bfd6e1e980"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>dgram.createSocket(type, [callback])<span><a href="#all_dgram_createsocket_type_callback_1408" id="all_dgram_createsocket_type_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="6c402794adddfd92f519962a297f7dc4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>type</code> String 可以是 'udp4' 或 'udp6'</li>
<li><code>callback</code> Function 可选，会被作为 <code>message</code> 事件的监听器。</li>
<li>返回：Socket 对象</li>
</ul>
</div>

<div class="translate-section" data-hash="f44ab887324c977c6c68f0ca8b588f54"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建一个指定类型的数据报 Socket。有效类型包括 <code>udp4</code> 和 <code>udp6</code>。

</p>
</div>

<div class="translate-section" data-hash="bd32a1be2df798926cefd661b425fa8a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>接受一个可选的回调，会被添加为 <code>message</code> 事件的监听器。

</p>
</div>

<div class="translate-section" data-hash="876369457b11ff0d4aa7d5c81dd5b2e2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果您想接收数据报则可调用 <code>socket.bind</code>。<code>socket.bind()</code> 会绑定到“所有网络接口”地址的一个随机端口（<code>udp4</code> 和 <code>udp6</code> 皆是如此）。然后您可以通过 <code>socket.address().address</code> 和 <code>socket.address().port</code> 来取得地址和端口。

</p>
</div>

<div class="translate-section" data-hash="d7925cb1d379816a468cebece5f1a766"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: dgram.Socket<span><a href="#all_dgram_socket_1408" id="all_dgram_socket_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="6a6f8434c0cc2b49542edfccd872c87e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>dgram Socket 类封装了数据报功能，可以通过 <code>dgram.createSocket(type, [callback])</code> 创建。

</p>
</div>

<div class="translate-section" data-hash="7ac73013006024dddcd78e9adef591b1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'message'<span><a href="#all_message_4224" id="all_message_4224">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a03049eaf9f0b057d19a805e05d80209"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>msg</code> Buffer 对象，消息</li>
<li><code>rinfo</code> Object，远程地址信息</li>
</ul>
</div>

<div class="translate-section" data-hash="b1b73ec3b69dfaa22aa1969e32438395"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当套接字中有新的数据报时发生。<code>msg</code> 是一个 <code>Buffer</code>，<code>rinfo</code> 是一个包含了发送者地址信息的对象：

</p>
</div>

<div class="translate-section" data-hash="1d971b2c3fe00bb994454a0c525082ae"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>msg<span class="sh_symbol">,</span> rinfo<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'收到 %d 字节，来自 %s:%d</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">,</span>
              msg<span class="sh_symbol">.</span>length<span class="sh_symbol">,</span> rinfo<span class="sh_symbol">.</span>address<span class="sh_symbol">,</span> rinfo<span class="sh_symbol">.</span>port<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="b7a4250e71d753dcfb6d653622e1d8c3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'listening'<span><a href="#all_listening_5633" id="all_listening_5633">#</a></span></h3>
</div>

<div class="translate-section" data-hash="e5e7a3bd2bb787a3a38403f4523b4d8e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当一个套接字开始监听数据报时产生。它会在 UDP 套接字被创建时发生。

</p>
</div>

<div class="translate-section" data-hash="d2b8af4d8afc211663a4341cca53b503"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'close'<span><a href="#all_close_12675" id="all_close_12675">#</a></span></h3>
</div>

<div class="translate-section" data-hash="670f5e397b8552d294b7583240d6798e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当一个套接字被 <code>close()</code> 关闭时产生。之后这个套接字上不会再有 <code>message</code> 事件发生。

</p>
</div>

<div class="translate-section" data-hash="64e904775a6e7456b0a8274a22954209"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'error'<span><a href="#all_error_9861" id="all_error_9861">#</a></span></h3>
</div>

<div class="translate-section" data-hash="ffb7506a4e9660fd7fda71a3ef982513"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>exception</code> Error 对象</li>
</ul>
</div>

<div class="translate-section" data-hash="81b8c73e3e12d3be6f988baa6f4d077e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当发生错误时产生。

</p>
</div>

<div class="translate-section" data-hash="663d23b9b5fb0984d5941514d0647bd6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.send(buf, offset, length, port, address, [callback])<span><a href="#all_socket_send_buf_offset_length_port_address_callback_1408" id="all_socket_send_buf_offset_length_port_address_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="43c4140475d446ac3eaa08dafee5cb14"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>buf</code> Buffer 对象，要发送的消息</li>
<li><code>offset</code> Integer，Buffer 中消息起始偏移值。</li>
<li><code>length</code> Integer，消息的字节数。</li>
<li><code>port</code> Integer，目标端口</li>
<li><code>address</code> String，目标 IP</li>
<li><code>callback</code> Function，可选，当消息被投递后的回调。</li>
</ul>
</div>

<div class="translate-section" data-hash="7a8aae03cce43a0993bc807082b07bc4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>对于 UDP 套接字，必须指定目标端口和 IP 地址。<code>address</code> 参数可以是一个字符串，它会被 DNS 解析。可选地可以指定一个回调以用于发现任何 DNS 错误或当 <code>buf</code> 可被重用。请注意 DNS 查询会将发送的时间推迟到至少下一个事件循环。确认发送完毕的唯一已知方法是使用回调。

</p>
</div>

<div class="translate-section" data-hash="cf9a7ccb4d6fe1f81377e0c14347aec3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果套接字之前并未被调用 <code>bind</code> 绑定，则它会被分配一个随机端口并绑定到“所有网络接口”地址（<code>udp4</code> 套接字是 0.0.0.0；<code>udp6</code> 套接字是 ::0）。

</p>
</div>

<div class="translate-section" data-hash="0b2415a9fa8fc167c70167a6a35c1ac6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>向 <code>localhost</code> 随机端口发送 UDP 报文的例子：

</p>
</div>

<div class="translate-section" data-hash="f563bad5ea3081496ff2c3b4a9c1b5ec"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> dgram <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'dgram'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> message <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span><span class="sh_string">"Some bytes"</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> client <span class="sh_symbol">=</span> dgram<span class="sh_symbol">.</span><span class="sh_function">createSocket</span><span class="sh_symbol">(</span><span class="sh_string">"udp4"</span><span class="sh_symbol">);</span>
client<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span>message<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> message<span class="sh_symbol">.</span>length<span class="sh_symbol">,</span> <span class="sh_number">41234</span><span class="sh_symbol">,</span> <span class="sh_string">"localhost"</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  client<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="5f309c872ce33511960c089fe223cdc3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><strong>关于 UDP 数据报大小的注意事项</strong>

</p>
</div>

<div class="translate-section" data-hash="4d671724f5237e10c2bc547d858560e1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个 <code>IPv4/v6</code> 数据报的最大大小取决与 <code>MTU</code>（<em>最大传输单位</em>）和 <code>Payload Length</code> 字段大小。

</p>
</div>

<div class="translate-section" data-hash="aa3b060c246bb5a650b69d125fcc0195"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>Payload Length</code> 字段宽 <code>16 bits</code>，意味着正常负载包括网络头和数据不能大于 64K（65,507 字节 = 65,535 − 8 字节 UDP 头 − 20 字节 IP 头）；这对环回接口通常是真的，但如此大的数据报对大多数主机和网络来说是不切实际的。</li>
</ul>
</div>

<div class="translate-section" data-hash="d242f1f2dc8836fe58f472652e759b9c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>MTU</code> 是一个给定的数据链路层技术能为数据报提供支持的最大大小。对于任何连接，<code>IPv4</code> 允许最小 <code>68</code> 字节的 <code>MTU</code>，而 IPv4 所推荐的 <code>MTU</code> 为 <code>576</code>（通常作为拨号类应用的推荐 <code>MTU</code>），无论它们是完整接收还是分片。</li>
</ul>
</div>

<div class="translate-section" data-hash="0a0eedb4a695282c8ebe51c680c1942c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>  对于 <code>IPv6</code>，最小的 <code>MTU</code> 为 <code>1280</code> 字节，但所允许的最小碎片重组缓冲大小为 <code>1500</code> 字节。
  <code>68</code> 的值是非常小的，因为现在大多数数据链路层技术有都具有 <code>1500</code> 的最小 <code>MTU</code>（比如以太网）。

</p>
</div>

<div class="translate-section" data-hash="c41694f4db5f71277049d489bea809b6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请注意我们不可能提前得知一个报文可能经过的每一个连接 MTU，因此通常情况下不能发送一个大于（接收者的）<code>MTU</code> 的数据报（报文会被悄悄地丢掉，而不会将数据没有到达它意图的接收者的消息告知来源）。

</p>
</div>

<div class="translate-section" data-hash="5f29dfe75d6350bd54bedb49225152ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.bind(port, [address], [callback])<span><a href="#all_socket_bind_port_address_callback_1408" id="all_socket_bind_port_address_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="24efa0e9ecfbb75401f5dc87dc9a20b8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>port</code> Integer</li>
<li><code>address</code> String，可选</li>
<li><code>callback</code> 没有参数的 Function，可选，当绑定完成时被调用。</li>
</ul>
</div>

<div class="translate-section" data-hash="685ccaf0a73e4ad124072d63779cf9ce"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>对于 UDP 套接字，在一个具名端口 <code>port</code> 和可选的地址 <code>address</code> 上监听数据报。如果 <code>address</code> 未指定，则操作系统会尝试监听所有地址。当绑定完成后，一个 "listening" 事件会发生，并且回调 <code>callback</code>（如果指定）会被调用。同时指定 "listening" 事件监听器和 <code>callback</code> 并不会产生副作用，但也没什么用。

</p>
</div>

<div class="translate-section" data-hash="a47f851287d04253298425c2472439e2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个绑定了的数据报套接字会保持 node 进程运行来接收数据报。

</p>
</div>

<div class="translate-section" data-hash="5f0525834d60b2cdd0fe3005d309b32b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果绑定失败，则一个 "error" 事件会被产生。在极少情况下（比如绑定一个已关闭的套接字），该方法会抛出一个 <code>Error</code>。

</p>
</div>

<div class="translate-section" data-hash="351b3079c5e233a17afde7c703e6af30"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个监听端口 41234 的 UDP 服务器的例子：

</p>
</div>

<div class="translate-section" data-hash="966609dfadc894693b452cf56be6da2a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>server<span class="sh_symbol">.</span><span class="sh_function">bind</span><span class="sh_symbol">(</span><span class="sh_number">41234</span><span class="sh_symbol">);</span>
<span class="sh_comment">// 服务器正在监听 0.0.0.0:41234</span></code></pre>
</div>

<div class="translate-section" data-hash="19e612b9867764b0dc6881b506ac4a00"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.close()<span><a href="#all_socket_close_1408" id="all_socket_close_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="18d5a8754c4494f478c0d5bbc22de8be"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>关闭底层套接字并停止监听数据。

</p>
</div>

<div class="translate-section" data-hash="14cbd9b3098686d28261c10238ff6ad0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.address()<span><a href="#all_socket_address_2817" id="all_socket_address_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="44bb68f6d81ee35d44cc2e9235f94f88"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个包含了套接字地址信息的对象。对于 UDP 套接字，该对象会包含地址 <code>address</code>、地址族 <code>family</code> 和端口号 <code>port</code>。

</p>
</div>

<div class="translate-section" data-hash="e4831ae56d2f6543c8910201ed61b094"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.setBroadcast(flag)<span><a href="#all_socket_setbroadcast_flag_1408" id="all_socket_setbroadcast_flag_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="1edd076bd41d3decc65df4b0d32d8099"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>flag</code> Boolean</li>
</ul>
</div>

<div class="translate-section" data-hash="42622850e16cbc1b42ef89a1cbd45437"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置或清除 <code>SO_BROADCAST</code> 套接字选项。当该选项被设置，则 UDP 报文可能被发送到一个本地接口的广播地址。

</p>
</div>

<div class="translate-section" data-hash="c76eb3150e4ec431d0c0d1f8c93d89c1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.setTTL(ttl)<span><a href="#all_socket_setttl_ttl_1408" id="all_socket_setttl_ttl_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a9824d43d4b0ce5597c73e55e1a581c3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>ttl</code> Integer</li>
</ul>
</div>

<div class="translate-section" data-hash="aa7bcf6d44b279fe0eec7b9888b213bb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置 <code>IP_TTL</code> 套接字选项。TTL 表示“Time to 
Live”（生存时间），但在此上下文中它指的是报文允许通过的 IP 跃点数。各个转发报文的路由器或网关都会递减 TTL。如果 TTL 
被一个路由器递减到 0，则它将不会被转发。改变 TTL 值通常被用于网络探测器或多播。

</p>
</div>

<div class="translate-section" data-hash="8f17887dc8a2d1fa7c7795e97eb2f2c4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>setTTL()</code> 的参数为介于 1 至 255 的跃点数。在大多数系统上缺省值为 64。

</p>
</div>

<div class="translate-section" data-hash="253065c6c389d00177758bb009175065"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.setMulticastTTL(ttl)<span><a href="#all_socket_setmulticastttl_ttl_1408" id="all_socket_setmulticastttl_ttl_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a9824d43d4b0ce5597c73e55e1a581c3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>ttl</code> Integer</li>
</ul>
</div>

<div class="translate-section" data-hash="15077e3ef7bcce0c509841ae023088f1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置 <code>IP_MULTICAST_TTL</code> 套接字选项。TTL 表示“Time to Live”（生存时间），但在此上下文中它指的是报文允许通过的 IP 跃点数，特别是组播流量。各个转发报文的路由器或网关都会递减 TTL。如果 TTL 被一个路由器递减到 0，则它将不会被转发。

</p>
</div>

<div class="translate-section" data-hash="fffffb68277b5f1ce6581f58b0a62959"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>setMulticastTTL()</code> 的参数为介于 1 至 255 的跃点数。在大多数系统上缺省值为 1。

</p>
</div>

<div class="translate-section" data-hash="1c8e5017218488fc6292881359df0bb0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.setMulticastLoopback(flag)<span><a href="#all_socket_setmulticastloopback_flag_1408" id="all_socket_setmulticastloopback_flag_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="1edd076bd41d3decc65df4b0d32d8099"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>flag</code> Boolean</li>
</ul>
</div>

<div class="translate-section" data-hash="133a632d8740ad655485301ca1f6e12e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置或清除 <code>IP_MULTICAST_LOOP</code> 套接字选项。当该选项被设置时，组播报文也会被本地接口收到。

</p>
</div>

<div class="translate-section" data-hash="17bf1957c4518673ec1f183d72478e6a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.addMembership(multicastAddress, [multicastInterface])<span><a href="#all_socket_addmembership_multicastaddress_multicastinterface_1408" id="all_socket_addmembership_multicastaddress_multicastinterface_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="6d116c6698e145ead58b668df7a74592"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>multicastAddress</code> String</li>
<li><code>multicastInterface</code> String，可选</li>
</ul>
</div>

<div class="translate-section" data-hash="7d602d6d13e9ad48a116788622f21f83"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>以 <code>IP_ADD_MEMBERSHIP</code> 套接字选项告诉内核加入一个组播分组。

</p>
</div>

<div class="translate-section" data-hash="566a1bdf936a56c808c8d027050c4cf5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果未指定 <code>multicastInterface</code>，则操作系统会尝试向所有有效接口添加关系。

</p>
</div>

<div class="translate-section" data-hash="3ce13a2b36194e77f73633dfb9625ee4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.dropMembership(multicastAddress, [multicastInterface])<span><a href="#all_socket_dropmembership_multicastaddress_multicastinterface_1408" id="all_socket_dropmembership_multicastaddress_multicastinterface_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="6d116c6698e145ead58b668df7a74592"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>multicastAddress</code> String</li>
<li><code>multicastInterface</code> String，可选</li>
</ul>
</div>

<div class="translate-section" data-hash="ac13938fd65e20785d2b1e0a1de5fde4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>与 <code>addMembership</code> 相反，以 <code>IP_DROP_MEMBERSHIP</code> 套接字选项告诉内核退出一个组播分组。当套接字被关闭或进程结束时内核会自动调用，因此大多数应用都没必要调用它。

</p>
</div>

<div class="translate-section" data-hash="4de6526075279f01f2f293d37f3530a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果未指定 <code>multicastInterface</code>，则操作系统会尝试向所有有效接口移除关系。

</p>
</div>

<div class="translate-section" data-hash="b6f418bf829edeb8395c45df3cca6208"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.unref()<span><a href="#all_socket_unref_2817" id="all_socket_unref_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="6ecc35ad7499415dc9b05d0d391e3777"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果这是事件系统中唯一一个活动的套接字，调用 <code>unref</code> 将允许程序退出。如果套接字已被 <code>unref</code>，则再次调用 <code>unref</code> 并不会产生影响。

</p>
</div>

<div class="translate-section" data-hash="bac28d98f9e58b0d01dde6f57b0e6e86"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>socket.ref()<span><a href="#all_socket_ref_2817" id="all_socket_ref_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="76a5f309cd556e2b43e389851b4ec08b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>与 <code>unref</code> 相反，如果这是仅剩的套接字，在一个之前被 <code>unref</code> 了的套接字上调用 <code>ref</code> 将<em>不会</em>让程序退出（缺省行为）。如果一个套接字已经被 <code>ref</code>，则再次调用 <code>ref</code> 并不会产生影响。

</p>
</div>
<div class="translate-section" data-hash="5c83b4ae529e7557f0c216c1b45948df"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>DNS<span><a href="#all_dns_1408" id="all_dns_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<div class="translate-section" data-hash="a150274f13024ebc1856f7372c536d3e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 <code>require('dns')</code> 引入此模块。dns 模块中的所有方法都使用了 C-Ares，除了 <code>dns.lookup</code> 使用了线程池中的 <code>getaddrinfo(3)</code>。C-Ares 比 <code>getaddrinfo</code> 要快得多，但系统解析器相对于其它程序的操作要更固定。当一个用户使用 <code>net.connect(80, 'google.com')</code> 或 <code>http.get({ host: 'google.com' })</code> 时会使用 <code>dns.lookup</code> 方法。如果用户需要进行大量的快速查询，则最好使用 C-Ares 提供的方法。

</p>
</div>

<div class="translate-section" data-hash="fc7c44ead6282b3eb9facd106524c4cf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>下面是一个解析 <code>'www.google.com'</code> 并反向解析所返回 IP 地址的例子。

</p>
</div>

<div class="translate-section" data-hash="cfbee2f1df8cc628bb6ccdb57998a10a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>      console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'反向解析 '</span> <span class="sh_symbol">+</span> a <span class="sh_symbol">+</span> <span class="sh_string">': '</span> <span class="sh_symbol">+</span> JSON<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">(</span>domains<span class="sh_symbol">));</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="53eafab253a96c15ca6fa564f1175f57"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>dns.lookup(domain, [family], callback)<span><a href="#all_dns_lookup_domain_family_callback_1408" id="all_dns_lookup_domain_family_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="fa654e90aac33f52958d630f399c01b3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>将一个域名（比如 <code>'google.com'</code>）解析为第一个找到的 A 记录（IPv4）或 AAAA 记录（IPv6）。地址族 <code>family</code> 可以是数字 <code>4</code> 或 <code>6</code>，缺省为 <code>null</code> 表示同时允许 IPv4 和 IPv6 地址族。

</p>
</div>

<div class="translate-section" data-hash="0fb2620fbf657c53a3e0fb5d4dde50ca"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>回调参数为 <code>(err, address, family)</code>。地址 <code>address</code> 参数为一个代表 IPv4 或 IPv6 地址的字符串。地址族 <code>family</code> 参数为数字 4 或 6，地表 <code>address</code> 的地址族（不一定是之前传入 <code>lookup</code> 的值）。

</p>
</div>

<div class="translate-section" data-hash="34f64651f55e5fa3e93f4286beac8222"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当错误发生时，<code>err</code> 为一个 <code>Error</code> 对象，其中 <code>err.code</code> 为错误代码。请记住 <code>err.code</code> 被设定为 <code>'ENOENT'</code> 的情况不仅是域名不存在，也可能是查询在其它途径出错，比如没有可用文件描述符时。

</p>
</div>

<div class="translate-section" data-hash="41a107e13190f94083fa20704c9ce4d7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>dns.resolve(domain, [rrtype], callback)<span><a href="#all_dns_resolve_domain_rrtype_callback_1408" id="all_dns_resolve_domain_rrtype_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="f45a5c632df527407b55d20c9531dbaf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>将一个域名（比如 <code>'google.com'</code>）解析为一个 <code>rrtype</code> 指定记录类型的数组。有效 <code>rrtypes</code> 取值有 <code>'A'</code>（IPv4 地址，缺省）、<code>'AAAA'</code>（IPv6 地址）、<code>'MX'</code>（邮件交换记录）、<code>'TXT'</code>（文本记录）、<code>'SRV'</code>（SRV 记录）、<code>'PTR'</code>（用于 IP 反向查找）、<code>'NS'</code>（域名服务器记录）和 <code>'CNAME'</code>（别名记录）。

</p>
</div>

<div class="translate-section" data-hash="a62a6ab1fdfdf51739f376677f7ea641"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>回调参数为 <code>(err, addresses)</code>。其中 <code>addresses</code> 中每一项的类型取决于记录类型，详见下文对应的查找方法。

</p>
</div>

<div class="translate-section" data-hash="b7f8396d8f9dd97b9cb9044e22c7b0de"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当出错时，<code>err</code> 参数为一个 <code>Error</code> 对象，其中 <code>err.code</code> 为下文所列出的错误代码之一。

</p>
</div>

<div class="translate-section" data-hash="ad7c13a65c0efbd77e1e8bd704df3d09"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>dns.resolve4(domain, callback)<span><a href="#all_dns_resolve4_domain_callback_1408" id="all_dns_resolve4_domain_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="707ff9350b6b4d491491e62d5f1d6f13"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>于 <code>dns.resolve()</code> 一样，但只用于查询 IPv4（<code>A</code> 记录）。<code>addresses</code> 是一个 IPv4 地址的数组（比如 <code>['74.125.79.104', '74.125.79.105', '74.125.79.106']</code>）。

</p>
</div>

<div class="translate-section" data-hash="51b92cd942e187bd724ca9d6189e39ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>dns.resolve6(domain, callback)<span><a href="#all_dns_resolve6_domain_callback_1408" id="all_dns_resolve6_domain_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="f9edb96fdcfc08d7b759a1917c8d1c08"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>类似于 <code>dns.resolve4()</code>，但用于 IPv6（<code>AAAA</code>）查询。

</p>
</div>

<div class="translate-section" data-hash="3b7a8746c698339c4f181b3727349ceb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>dns.resolveMx(domain, callback)<span><a href="#all_dns_resolvemx_domain_callback_1408" id="all_dns_resolvemx_domain_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="1fecebfa191ef33c7f4e65f9c9f77a79"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>类似于 <code>dns.resolve()</code>，但用于邮件交换查询（<code>MX</code> 记录）。

</p>
</div>

<div class="translate-section" data-hash="b79ab512544aa3ffb0b4fb1bd37fd5bd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>addresses</code> 为一个 MX 记录的数组，每一项包含优先级和交换属性（比如 <code>[{'priority': 10, 'exchange': 'mx.example.com'},...]</code>）。

</p>
</div>

<div class="translate-section" data-hash="4ad42e6922a11a566a1933516d343b73"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>dns.resolveTxt(domain, callback)<span><a href="#all_dns_resolvetxt_domain_callback_1408" id="all_dns_resolvetxt_domain_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="37f428e44e14fe67cfbe7ced1b54bd76"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>与 <code>dns.resolve()</code> 相似，但用于文本查询（<code>TXT</code> 记录）。<code>addresses</code> 为 <code>domain</code> 可用文本记录的数组（比如 <code>['v=spf1 ip4:0.0.0.0 ~all']</code>）。

</p>
</div>

<div class="translate-section" data-hash="22a8e84ecff07a542e7dfd24606cb245"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>dns.resolveSrv(domain, callback)<span><a href="#all_dns_resolvesrv_domain_callback_1408" id="all_dns_resolvesrv_domain_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="43a49f086a16a47828431d9dc7f24570"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>查询 SRV 记录，与 <code>dns.resolve()</code> 相似。
<code>addresses</code> 是域名 <code>domain</code> 可用的 SRV 记录数组，
每一条记录都包含优先级（priority）、权重（weight）、端口号（port）、服务名称（name）等属性
(比如：  <code>[{'priority': 10, {'weight': 5, 'port': 21223, 'name': 'service.example.com'}, ...]</code>)。

</p>
</div>

<div class="translate-section" data-hash="2cbc4d084410dd16611cff93110a9a53"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>dns.resolveNs(domain, callback)<span><a href="#all_dns_resolvens_domain_callback_1408" id="all_dns_resolvens_domain_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="26a81ceedc934644957324a2321c085d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>查询 NS 记录，与 <code>dns.resolve()</code> 相似。
<code>addresses</code> 是域名 <code>domain</code> 可用的 NS 记录数组，
(比如： <code>['ns1.example.com', 'ns2.example.com']</code>).

</p>
</div>

<div class="translate-section" data-hash="1d3263e6fb1d5add0412af36e6504df2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>dns.resolveCname(domain, callback)<span><a href="#all_dns_resolvecname_domain_callback_1408" id="all_dns_resolvecname_domain_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="fcb00bf1ba1a71617b30389b60720636"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>查询 CNAME 记录，与 <code>dns.resolve()</code> 相似。
<code>addresses</code> 是域名 <code>domain</code> 可用的 CNAME 记录数组，
(比如： <code>['bar.example.com']</code>).

</p>
</div>

<div class="translate-section" data-hash="fff889859a0fe98a4c92fc2972fe75d4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>dns.reverse(ip, callback)<span><a href="#all_dns_reverse_ip_callback_1408" id="all_dns_reverse_ip_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="fec711550ad0c78872861f25cf80ec81"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>反向解析 IP 地址，返回指向该 IP 地址的域名数组。

</p>
</div>

<div class="translate-section" data-hash="0893d3fb3a28198cc67f71ae48f095ea"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>回调函数接收两个参数： <code>(err, domains)</code>.

</p>
</div>

<div class="translate-section" data-hash="b7f8396d8f9dd97b9cb9044e22c7b0de"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当出错时，<code>err</code> 参数为一个 <code>Error</code> 对象，其中 <code>err.code</code> 为下文所列出的错误代码之一。

</p>
</div>

<div class="translate-section" data-hash="ca38c468f70e2e38ac17153c4dbc5d85"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>dns.getServers()<span><a href="#all_dns_getservers_1408" id="all_dns_getservers_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="a7519474be9268e3136612c561003e65"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>已字符串返回一个当前用于解析的 IP 地址的数组。

</p>
</div>

<div class="translate-section" data-hash="211dc1fd430e825221d068bfaef130b1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>dns.setServers(servers)<span><a href="#all_dns_setservers_servers_1408" id="all_dns_setservers_servers_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="a7d80aeac47aa3e9f02269bb3db9e146"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>指定一个 IP 地址字符串数组，将它们作为解析所用的服务器。

</p>
</div>

<div class="translate-section" data-hash="263314a8abf84eb04e44eae00f7fb5b0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果您在地址中指定了端口，则端口会被忽略，因为底层库并不支持。

</p>
</div>

<div class="translate-section" data-hash="e9ae23b1d7f08280fad06c723651e019"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果您传入无效参数，则会抛出异常。

</p>
</div>

<div class="translate-section" data-hash="3e0a953fc4db6b022c7426e5ea5e3e25"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>错误代码<span><a href="#all_70423" id="all_70423">#</a></span></h2>
</div>

<div class="translate-section" data-hash="d9b27d3f6db897f8f3437359b17535e3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>每个 DNS 查询都可能返回下列错误代码之一：

</p>
</div>

<div class="translate-section" data-hash="84c46170e5011faadc5c0dc77849b1f0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>dns.NODATA</code>: DNS 服务器返回无数据应答。</li>
<li><code>dns.FORMERR</code>: DNS 声称查询格式错误。</li>
<li><code>dns.SERVFAIL</code>: DNS 服务器返回一般失败。</li>
<li><code>dns.NOTFOUND</code>: 域名未找到。</li>
<li><code>dns.NOTIMP</code>: DNS 服务器未实现所请求操作。</li>
<li><code>dns.REFUSED</code>: DNS 服务器拒绝查询。</li>
<li><code>dns.BADQUERY</code>: DNS 查询格式错误。</li>
<li><code>dns.BADNAME</code>: 域名格式错误。</li>
<li><code>dns.BADFAMILY</code>: 不支持的地址类型。</li>
<li><code>dns.BADRESP</code>: DNS 答复格式错误。</li>
<li><code>dns.CONNREFUSED</code>: 无法联系 DNS 服务器。</li>
<li><code>dns.TIMEOUT</code>: 联系 DNS 服务器超时。</li>
<li><code>dns.EOF</code>: 文件末端。</li>
<li><code>dns.FILE</code>: 读取文件错误。</li>
<li><code>dns.NOMEM</code>: 超出内存。</li>
<li><code>dns.DESTRUCTION</code>: 通道正在被销毁。</li>
<li><code>dns.BADSTR</code>: 字符串格式错误。</li>
<li><code>dns.BADFLAGS</code>: 指定了非法标记。</li>
<li><code>dns.NONAME</code>: 所给主机名非数字。</li>
<li><code>dns.BADHINTS</code>: 指定了非法提示标记。</li>
<li><code>dns.NOTINITIALIZED</code>: c-ares 库初始化尚未进行。</li>
<li><code>dns.LOADIPHLPAPI</code>: 加载 iphlpapi.dll 出错。</li>
<li><code>dns.ADDRGETNETWORKPARAMS</code>: 无法找到 GetNetworkParams 函数。</li>
<li><code>dns.CANCELLED</code>: DNS 查询取消。</li>
</ul>
</div>
<div class="translate-section" data-hash="6f89301b6c64198d87f37b05da52fe95"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>HTTP<span><a href="#all_http_1408" id="all_http_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<div class="translate-section" data-hash="5a19f2c2dea69ecf2ff74a4a59a1caf5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>要使用HTTP服务器或客户端功能，需引用此模块<code>require('http')</code>.

</p>
</div>

<div class="translate-section" data-hash="16a4d9235cb364e71ef63e9b7848178a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Node中的HTTP接口的设计支持许多HTTP协议中原本用起来很困难的特性.特别是对于很大的或者块编码的消息.这些接口很谨慎,它从来不会完
全缓存整个请求(request)或响应(response),这样用户可以在请求(request)或响应(response)中使用数据流.

</p>
</div>

<div class="translate-section" data-hash="7cc24b32e3a96dab691960ca615cfd8c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>HTTP 的消息头(Headers)通过如下对象来表示:

</p>
</div>

<div class="translate-section" data-hash="0e5f0da13461d7130d99e94ace640aea"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> <span class="sh_string">'content-length'</span><span class="sh_symbol">:</span> <span class="sh_string">'123'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'content-type'</span><span class="sh_symbol">:</span> <span class="sh_string">'text/plain'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'connection'</span><span class="sh_symbol">:</span> <span class="sh_string">'keep-alive'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'host'</span><span class="sh_symbol">:</span> <span class="sh_string">'mysite.com'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'accept'</span><span class="sh_symbol">:</span> <span class="sh_string">'*/*'</span> <span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="b852784b3bbbed9a4544461c541446f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>其中键为小写字母，值是不能修改的。

</p>
</div>

<div class="translate-section" data-hash="a1c2e5e4bf49d118191e579890c6ddc7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>为了能全面地支持可能的HTTP应用程序，Node提供的HTTP API都很底层。它处理的只有流处理和消息解析。它把一份消息解析成报文头和报文体，但是它不解析实际的报文头和报文体。

</p>
</div>

<div class="translate-section" data-hash="e01a072fb9759834e607b4ca7515655c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>定义好的消息头允许多个值以<code>,</code>分割, 除了<code>set-cookie</code>和<code>cookie</code>,因为他们表示值的数组. 像 <code>content-length</code>这样只能有单个值的消息头直接解析, 并且只有单值可以表示成已解析好的对像.

</p>
</div>

<div class="translate-section" data-hash="fc38d5af81786415dfc2e47f4e009f18"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>接收到的原始头信息以数组形式 <code>[key, value, key2, value2, ...]</code> 保存在 <code>rawHeaders</code> 属性中. 例如, 前面提到的消息对象会有 <code>rawHeaders</code> 列表如下:

</p>
</div>

<div class="translate-section" data-hash="8a56ee87d847c9ab3582c421a585c389"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_symbol">[</span> <span class="sh_string">'ConTent-Length'</span><span class="sh_symbol">,</span> <span class="sh_string">'123456'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'content-LENGTH'</span><span class="sh_symbol">,</span> <span class="sh_string">'123'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'content-type'</span><span class="sh_symbol">,</span> <span class="sh_string">'text/plain'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'CONNECTION'</span><span class="sh_symbol">,</span> <span class="sh_string">'keep-alive'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'Host'</span><span class="sh_symbol">,</span> <span class="sh_string">'mysite.com'</span><span class="sh_symbol">,</span>
  <span class="sh_string">'accepT'</span><span class="sh_symbol">,</span> <span class="sh_string">'*/*'</span> <span class="sh_symbol">]</span></code></pre>
</div>

<div class="translate-section" data-hash="2373ec0849a99ad16db0f32b61382b1c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>http.STATUS_CODES<span><a href="#all_http_status_codes_1408" id="all_http_status_codes_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="851aa722fb53608947b18811e82db1f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="678cb6b725bde7f603838ed4ec7c9261"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>全部标准HTTP响应状态码的集合和简短描述。例如<code>http.STATUS_CODES[404] === 'Not Found'</code>。

</p>
</div>

<div class="translate-section" data-hash="71d78c3a363d453422b9183387b62cb9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>http.createServer([requestListener])<span><a href="#all_http_createserver_requestlistener_1408" id="all_http_createserver_requestlistener_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="557dc8ec1c1e1cdf6787785c86705476"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个新的web服务器对象

</p>
</div>

<div class="translate-section" data-hash="4af8a2cc98a58991f415f8ee5be97d37"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>参数 <code>requestListener</code> 是一个函数,它将会自动加入到 <code>'request'</code> 事件的监听队列.

</p>
</div>

<div class="translate-section" data-hash="0921f9a6c221f28056ff5d06d60c5c06"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>http.createClient([port], [host])<span><a href="#all_http_createclient_port_host_1408" id="all_http_createclient_port_host_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="6dd76ab067e708695aaa332d431924d0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该函数已<strong>弃用</strong>,请用<a href="http://nodeapi.ucdok.com/api/http.html#http_http_request_options_callback">http.request()</a>代替.
创建一个新的HTTP客户端. <code>port</code> 和<code>host</code> 表示所连接的服务器.

</p>
</div>

<div class="translate-section" data-hash="991f2e4314eba134b7e123587cfaf5a9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Class: http.Server<span><a href="#all_class_http_server_1408" id="all_class_http_server_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="bb56f6791c176c4e9490f0804090defe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是一个包含下列事件的<a href="http://nodeapi.ucdok.com/api/events.html#events_class_events_eventemitter">EventEmitter</a>:

</p>
</div>

<div class="translate-section" data-hash="a731d8eecdb05444f579013cf10be6f6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件 : 'request'<span><a href="#all_request_1408" id="all_request_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d504d89b9e1b6794eebe9c4d8653189a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (request, response) { }</code>

</p>
</div>

<div class="translate-section" data-hash="fd6954c46f73e56527bc108a5606a972"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>每次收到一个请求时触发.注意每个连接又可能有多个请求(在<code>keep-alive</code>的连接中).<code>request</code>是<code>http.IncomingMessage</code>的一个实例.<code>response</code>是<code>http.ServerResponse</code>的一个实例

</p>
</div>

<div class="translate-section" data-hash="6f49e683b9234449060f0beee3592dc2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'connection'<span><a href="#all_connection_2817" id="all_connection_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3130f05700358dd651762964d4cc0f79"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (socket) { }</code>

</p>
</div>

<div class="translate-section" data-hash="3b9abc663efd8e52567b3dd2b9643e55"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>新的TCP流建立时出发。 <code>socket</code>是一个<code>net.Socket</code>对象。
通常用户无需处理该事件。
特别注意，协议解析器绑定套接字时采用的方式使套接字不会出发<code>readable</code>事件。
还可以通过<code>request.connection</code>访问<code>socket</code>。

</p>
</div>

<div class="translate-section" data-hash="d2b8af4d8afc211663a4341cca53b503"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'close'<span><a href="#all_close_12676" id="all_close_12676">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c005f7d2379c68d2037134ec8aa65dae"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function () { }</code>

</p>
</div>

<div class="translate-section" data-hash="a6d18499c55d53d4280d97ce6b51d4e9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当此服务器关闭时触发

</p>
</div>

<div class="translate-section" data-hash="6b92c2405d39557f4daf8d4f4b0436e9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Event: 'checkContinue'<span><a href="#all_event_checkcontinue_1408" id="all_event_checkcontinue_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d504d89b9e1b6794eebe9c4d8653189a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (request, response) { }</code>

</p>
</div>

<div class="translate-section" data-hash="af2c61303738473cdbe016bb8a68d603"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>每当收到Expect: 100-continue的http请求时触发。
如果未监听该事件，服务器会酌情自动发送100 Continue响应。

</p>
</div>

<div class="translate-section" data-hash="5f279c88679fb1f80659658cc30f5f83"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>处理该事件时，如果客户端可以继续发送请求主体则调用<code>response.writeContinue</code>，
如果不能则生成合适的HTTP响应（例如，400 请求无效）。

</p>
</div>

<div class="translate-section" data-hash="1d0d45d003af790c17f3f03472821057"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>需要注意到, 当这个事件触发并且被处理后, <code>request</code> 事件将不再会触发.

</p>
</div>

<div class="translate-section" data-hash="a385d91c55ee447e6f8bfe2c4698eb4d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'connect'<span><a href="#all_connect_4225" id="all_connect_4225">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a7f035589468e38315afe00377ff9ade"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (request, socket, head) { }</code>

</p>
</div>

<div class="translate-section" data-hash="7bc9156afd2abccc3d375b2c22f76b01"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>每当客户端发起CONNECT请求时出发。如果未监听该事件，客户端发起CONNECT请求时连接会被关闭。

</p>
</div>

<div class="translate-section" data-hash="572d1842e959eb1cfc982adf625939aa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>request</code> 是该HTTP请求的参数，与request事件中的相同。</li>
<li><code>socket</code> 是服务端与客户端之间的网络套接字。</li>
<li><code>head</code> 是一个Buffer实例，隧道流的第一个包，该参数可能为空。</li>
</ul>
</div>

<div class="translate-section" data-hash="6ed1ff9d50d8a737674be7447382ee24"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在这个事件被分发后，请求的套接字将不会有<code>data</code>事件监听器，也就是说你将需要绑定一个监听器到<code>data</code>事件，来处理在套接字上被发送到服务器的数据。

</p>
</div>

<div class="translate-section" data-hash="6e4162f4c63c4f85b51e2d2ba0c321f1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Event: 'upgrade'<span><a href="#all_event_upgrade_2816" id="all_event_upgrade_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a7f035589468e38315afe00377ff9ade"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (request, socket, head) { }</code>

</p>
</div>

<div class="translate-section" data-hash="f74f9983f15e71c2a72dc933969b9861"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>每当一个客户端请求http升级时，该事件被分发。如果这个事件没有被监听，那么这些请求升级的客户端的连接将会被关闭。

</p>
</div>

<div class="translate-section" data-hash="ec74a1252665ec6598e7a980e81cc228"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>request</code> 是该HTTP请求的参数，与request事件中的相同。</li>
<li><code>socket</code> 是服务端与客户端之间的网络套接字。</li>
<li><code>head</code> 是一个Buffer实例，升级后流的第一个包，该参数可能为空。</li>
</ul>
</div>

<div class="translate-section" data-hash="6ed1ff9d50d8a737674be7447382ee24"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在这个事件被分发后，请求的套接字将不会有<code>data</code>事件监听器，也就是说你将需要绑定一个监听器到<code>data</code>事件，来处理在套接字上被发送到服务器的数据。

</p>
</div>

<div class="translate-section" data-hash="1db79e530811fc519fbde11d3200bafe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Event: 'clientError'<span><a href="#all_event_clienterror_2817" id="all_event_clienterror_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="720e72107e35792ad2f64c0dbc086799"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (exception, socket) { }</code>

</p>
</div>

<div class="translate-section" data-hash="79c298d5cfe4ca289a34971044fc7840"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果一个客户端连接触发了一个 'error' 事件, 它就会转发到这里.

</p>
</div>

<div class="translate-section" data-hash="c3f35f7824a77991ee6fb4ddac48910f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>socket</code> 是导致错误的 <code>net.Socket</code> 对象。

</p>
</div>

<div class="translate-section" data-hash="66ce1230b0e8ed498795d9454baf7aa5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.listen(port, [hostname], [backlog], [callback])<span><a href="#all_server_listen_port_hostname_backlog_callback_1408" id="all_server_listen_port_hostname_backlog_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="1f82dc53eb1ccdb05a37c54e9cce756c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>开始在指定的主机名和端口接收连接。如果省略主机名，服务器会接收指向任意IPv4地址的链接（<code>INADDR_ANY</code>）。

</p>
</div>

<div class="translate-section" data-hash="50ba48698037df03912f5a4886fa60bc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>监听一个 unix socket, 需要提供一个文件名而不是端口号和主机名。

</p>
</div>

<div class="translate-section" data-hash="bed0b4a9d97d9c397f601f6d6aa0fe48"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>积压量 <code>backlog</code> 为连接等待队列的最大长度。实际长度由您的操作系统通过 sysctl 设置决定，比如 Linux 上的 <code>tcp_max_syn_backlog</code> 和 <code>somaxconn</code>。该参数缺省值为 511（不是 512）。

</p>
</div>

<div class="translate-section" data-hash="2b0742eb2731c4e402efbd40d09876e1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个函数是异步的。最后一个参数<code>callback</code>会被作为事件监听器添加到 <a href="http://nodeapi.ucdok.com/api/net.html#net_event_listening">'listening'</a>事件。另见<a href="http://nodeapi.ucdok.com/api/net.html#net_server_listen_port_host_backlog_callback">net.Server.listen(port)</a>。

</p>
</div>

<div class="translate-section" data-hash="ea96ac8cfe7103bc7860faeff6c13809"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.listen(path, [callback])<span><a href="#all_server_listen_path_callback_4225" id="all_server_listen_path_callback_4225">#</a></span></h3>
</div>

<div class="translate-section" data-hash="0e97c81434ca640c24289a87e35fa4ad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>启动一个 UNIX 套接字服务器在所给路径 <code>path</code> 上监听连接。

</p>
</div>

<div class="translate-section" data-hash="56ea5af2ea078488ad41b9d940de3b56"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该函数是异步的.最后一个参数<code>callback</code>将会加入到[<code>listening</code>][]事件的监听队列中.又见<a href="http://nodeapi.ucdok.com/api/net.html#net_server_listen_path_callback">net.Server.listen(path)</a>.

</p>
</div>

<div class="translate-section" data-hash="38791e5df388e8941cc5952b18405806"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.listen(handle, [callback])<span><a href="#all_server_listen_handle_callback_4225" id="all_server_listen_handle_callback_4225">#</a></span></h3>
</div>

<div class="translate-section" data-hash="77243d535077126c3d70fb90b3f59de4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>handle</code>处理器 {Object}</li>
<li><code>callback</code>回调函数 {Function}</li>
</ul>
</div>

<div class="translate-section" data-hash="c2a75ad83b4c9c7db282f7ef55a7a7d7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>handle</code> 变量可以被设置为server 或者 socket(任一以下划线开头的成员 <code>_handle</code>), 或者一个 <code>{fd: &lt;n&gt;}</code> 对象

</p>
</div>

<div class="translate-section" data-hash="b7aee7b7633990f2c8b6a0a271e8b226"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这将使服务器用指定的句柄接受连接，但它假设文件描述符或者句柄已经被绑定在特定的端口或者域名套接字。

</p>
</div>

<div class="translate-section" data-hash="ac30103f7bf2cc030495bb3d55e50465"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Windows 不支持监听一个文件描述符。

</p>
</div>

<div class="translate-section" data-hash="674ec54e29772b0b195271154f944a68"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个函数是异步的。最后一个参数<code>callback</code>会被作为事件监听器添加到<a href="http://nodeapi.ucdok.com/api/net.html#event_listening_">'listening'</a>事件。另见<a href="http://nodeapi.ucdok.com/api/net.html#net_server_listen_handle_callback">net.Server.listen()</a>。

</p>
</div>

<div class="translate-section" data-hash="f7907ff9a0ecbf199c48b188bc048cb4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.close([callback])<span><a href="#all_server_close_callback_4225" id="all_server_close_callback_4225">#</a></span></h3>
</div>

<div class="translate-section" data-hash="352def57241b1b675d1f7872ffe7ac57"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>禁止服务端接收新的连接. 查看 <a href="http://nodeapi.ucdok.com/api/net.html#net_server_close_callback">net.Server.close()</a>.

</p>
</div>

<div class="translate-section" data-hash="9b798c3ff1801a0ec3c55fd53d2b0a66"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.maxHeadersCount<span><a href="#all_server_maxheaderscount_1408" id="all_server_maxheaderscount_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a0c236f1918649d6ffd44abd62953b64"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>最大请求头数目限制, 默认 1000 个. 如果设置为0, 则代表不做任何限制.

</p>
</div>

<div class="translate-section" data-hash="f8180a64bc3efd218a9b21198f0f2f54"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.setTimeout(msecs, callback)<span><a href="#all_server_settimeout_msecs_callback_2816" id="all_server_settimeout_msecs_callback_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="38e8631f19078488f07590474eaf7fe3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>msecs</code> {Number}</li>
<li><code>callback</code> {Function}</li>
</ul>
</div>

<div class="translate-section" data-hash="0da1703cca4fcc759d84c397a3bb0dcb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>为套接字设定超时值。如果一个超时发生，那么Server对象上会分发一个<code>'timeout'</code>事件，同时将套接字作为参数传递。

</p>
</div>

<div class="translate-section" data-hash="a71871484ee878bee7e15b167030fe93"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果在Server对象上有一个<code>'timeout'</code>事件监听器，那么它将被调用，而超时的套接字会作为参数传递给这个监听器。

</p>
</div>

<div class="translate-section" data-hash="a04c76997503beb1fbeb28cf125905ad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>默认情况下，服务器的超时时间是2分钟，超时后套接字会自动销毁。
但是如果为‘timeout’事件指定了回调函数，你需要负责处理套接字超时。

</p>
</div>

<div class="translate-section" data-hash="19060fabb61bd3f67c8d8516c4ff8498"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.timeout<span><a href="#all_server_timeout_2816" id="all_server_timeout_2816">#</a></span></h3>
</div>

<div class="translate-section" data-hash="f92f700127388eda7e7013330ca752b6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Number} 默认 120000 (2 分钟)</li>
</ul>
</div>

<div class="translate-section" data-hash="7a01b9cdefbcc718063db76f95920172"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个套接字被判断为超时之前的闲置毫秒数。

</p>
</div>

<div class="translate-section" data-hash="e8a51c87c0fc27b59f3384f48c364946"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意套接字的超时逻辑在连接时被设定，所以更改这个值只会影响<em>新创建的</em>连接，而不会影响到现有连接。

</p>
</div>

<div class="translate-section" data-hash="3e52dfa75cc7bf31ad0096deac05668c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置为0将阻止之后建立的连接的一切自动超时行为。

</p>
</div>

<div class="translate-section" data-hash="c5690fb85169d6125fae2769e6af5090"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Class: http.ServerResponse<span><a href="#all_class_http_serverresponse_1408" id="all_class_http_serverresponse_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="2732a36ec3aa0a528528b8bd6714c4c8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是一个由HTTP服务器内部创建的对象（不是由用户自行创建）。它将作为第二个参数传递到<code>'request'</code>事件中。

</p>
</div>

<div class="translate-section" data-hash="a661aff28852d32b4015e45f93481f7d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该响应实现了 <a href="http://nodeapi.ucdok.com/api/stream.html#stream_writable_stream">Writable Stream</a> 接口。这是一个包含下列事件的
<a href="http://nodeapi.ucdok.com/api/events.html#events_class_events_eventemitter">EventEmitter</a> ：

</p>
</div>

<div class="translate-section" data-hash="d2b8af4d8afc211663a4341cca53b503"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'close'<span><a href="#all_close_12677" id="all_close_12677">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c005f7d2379c68d2037134ec8aa65dae"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function () { }</code>

</p>
</div>

<div class="translate-section" data-hash="6f9e2561890816d81d3374f425c1e684"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Indicates that the underlying connection was terminated before
<code>response.end()</code> was called or able to flush.

</p>
</div>

<div class="translate-section" data-hash="6ede9f4d464fe0d50a0be0b45c70e517"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>response.writeContinue()<span><a href="#all_response_writecontinue_1408" id="all_response_writecontinue_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="54113143742375ed24a091b14215ba69"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Sends a HTTP/1.1 100 Continue message to the client, indicating that
the request body should be sent. See the <a href="#http_event_checkcontinue">'checkContinue'</a> event on <code>Server</code>.

</p>
</div>

<div class="translate-section" data-hash="0c3e1877477908b669b785a163de2b68"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>response.writeHead(statusCode, [reasonPhrase], [headers])<span><a href="#all_response_writehead_statuscode_reasonphrase_headers_1408" id="all_response_writehead_statuscode_reasonphrase_headers_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="8e531546a5983b76a3db13a29219de54"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>向请求回复响应头. statusCode是一个三位是的HTTP状态码, 例如 <code>404</code>. 
最后一个参数, <code>headers</code>, 是响应头的内容.
可以选择性的，把人类可读的‘原因短句’作为第二个参数。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="82fd6c29ac99fd5380368530d57f9a7d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> body <span class="sh_symbol">=</span> <span class="sh_string">'hello world'</span><span class="sh_symbol">;</span>
response<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>
  <span class="sh_string">'Content-Length'</span><span class="sh_symbol">:</span> body<span class="sh_symbol">.</span>length<span class="sh_symbol">,</span>
  <span class="sh_string">'Content-Type'</span><span class="sh_symbol">:</span> <span class="sh_string">'text/plain'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="319cdf5edf0ca8b7a604e4f5dceee49d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个方法只能在当前请求中使用一次，并且必须在<code>response.end()</code>之前调用。

</p>
</div>

<div class="translate-section" data-hash="51ea774b55b7c230b43e7214f504c4f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果你在调用这之前调用了<code>response.write()</code>或者 <code>response.end()</code> , 
就会调用这个函数，并且 不明/容易混淆 的头将会被使用。

</p>
</div>

<div class="translate-section" data-hash="6ded6142d3e95ea95be93b8019c45ebe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意：Content-Length 是以字节(byte)计，而不是以字符(character)计。之前的例子奏效的原因是字符串'hello
 
world'只包含了单字节的字符。如果body包含了多字节编码的字符，就应当使用Buffer.byteLength()来确定在多字节字符编码情况
下字符串的字节数。需要进一步说明的是Node不检查Content-Lenth属性和已传输的body长度是否吻合。

</p>
</div>

<div class="translate-section" data-hash="1b9a0ffff1b39dda8a7f9f305b6bd35d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>response.setTimeout(msecs, callback)<span><a href="#all_response_settimeout_msecs_callback_1408" id="all_response_settimeout_msecs_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="38e8631f19078488f07590474eaf7fe3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>msecs</code> {Number}</li>
<li><code>callback</code> {Function}</li>
</ul>
</div>

<div class="translate-section" data-hash="caff2bc8c4c7222d7f1d8ac5c03b0f77"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设定套接字的超时时间为<code>msecs</code>。如果提供了回调函数，会将其添加为响应对象的<code>'timeout'</code>事件的监听器。

</p>
</div>

<div class="translate-section" data-hash="c4eca1e3b8976b2f2c95a3a39ce30eac"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果请求、响应、服务器均未添加<code>'timeout'</code>事件监听，套接字将在超时时被销毁。
如果监听了请求、响应、服务器之一的<code>'timeout'</code>事件，需要自行处理超时的套接字。

</p>
</div>

<div class="translate-section" data-hash="9c152b453df8cbe7f169eaa857d6ac55"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>response.statusCode<span><a href="#all_response_statuscode_1408" id="all_response_statuscode_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="2320bd228da997466d17f2026b2d35f0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当使用默认headers时（没有显式地调用 <code>response.writeHead()</code> 来修改headers），这个属性决定headers更新时被传回客户端的HTTP状态码。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="8a082f16b6ddcab0e3ea1cd8eb34a336"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>response<span class="sh_symbol">.</span>statusCode <span class="sh_symbol">=</span> <span class="sh_number">404</span><span class="sh_symbol">;</span></code></pre>
</div>

<div class="translate-section" data-hash="d44db328ec008ed0860d1049fb9118fa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当响应头被发送回客户端，那么这个属性则表示已经被发送出去的状态码。

</p>
</div>

<div class="translate-section" data-hash="d10259569fa8fe6d1e4f8af2040fd037"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>response.setHeader(name, value)<span><a href="#all_response_setheader_name_value_1408" id="all_response_setheader_name_value_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="98cefd5db90c542ae6dd28ed7207e44e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>为默认或者已存在的头设置一条单独的头内容。如果这个头已经存在于
将被送出的头中，将会覆盖原来的内容。如果我想设置更多的头，
就使用一个相同名字的字符串数组

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="f7a389e747a9805bd6154fc23fd79a8d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>response<span class="sh_symbol">.</span><span class="sh_function">setHeader</span><span class="sh_symbol">(</span><span class="sh_string">"Content-Type"</span><span class="sh_symbol">,</span> <span class="sh_string">"text/html"</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="e81c4e4f2b7b93b481e13a8553c2ae1b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>或者

</p>
</div>

<div class="translate-section" data-hash="7c5d22102ec36e1b22a45c4a2c349735"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>response<span class="sh_symbol">.</span><span class="sh_function">setHeader</span><span class="sh_symbol">(</span><span class="sh_string">"Set-Cookie"</span><span class="sh_symbol">,</span> <span class="sh_symbol">[</span><span class="sh_string">"type=ninja"</span><span class="sh_symbol">,</span> <span class="sh_string">"language=javascript"</span><span class="sh_symbol">]);</span></code></pre>
</div>

<div class="translate-section" data-hash="5e4324365e7a3285a0f44647e5b8273d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>response.headersSent<span><a href="#all_response_headerssent_1408" id="all_response_headerssent_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a6bc6007d3cc1d9485735d458869e9b9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Boolean值(只读).如果headers发送完毕,则为true,反之为false

</p>
</div>

<div class="translate-section" data-hash="75c1e66b9c1b0f44079933f88b362cf3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>response.sendDate<span><a href="#all_response_senddate_1408" id="all_response_senddate_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="329d41b3eace93f38a5cd339ce5cf672"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>若为true,则当headers里没有Date值时自动生成Date并发送.默认值为true

</p>
</div>

<div class="translate-section" data-hash="de4a16d8ae40f2fdd92b57a8ac9d229a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>只有在测试环境才禁用它; 因为 HTTP 要求响应包含 <code>Date</code> 头.

</p>
</div>

<div class="translate-section" data-hash="a22dac5f925b607afd469adf97f89f95"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>response.getHeader(name)<span><a href="#all_response_getheader_name_1408" id="all_response_getheader_name_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="71b260b547dcd93da7d6af36e5c8430e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Reads out a header that's already been queued but not sent to the client.  Note
that the name is case insensitive.  This can only be called before headers get
implicitly flushed.

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="2f97c21fe8ae3ed8e0c7da14b5e6dc58"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> contentType <span class="sh_symbol">=</span> response<span class="sh_symbol">.</span><span class="sh_function">getHeader</span><span class="sh_symbol">(</span><span class="sh_string">'content-type'</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="b6dcd6b162957d5be0d53fb88b7be87a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>response.removeHeader(name)<span><a href="#all_response_removeheader_name_1408" id="all_response_removeheader_name_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="ed46db8684ab8d609828f1164c50746f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Removes a header that's queued for implicit sending.

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="db9e7370e663b3152aacf6f7d8e675dd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>response<span class="sh_symbol">.</span><span class="sh_function">removeHeader</span><span class="sh_symbol">(</span><span class="sh_string">"Content-Encoding"</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="9b2e806b895f4253ecca1de6b0e25824"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>response.write(chunk, [encoding])<span><a href="#all_response_write_chunk_encoding_1408" id="all_response_write_chunk_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="da02d0ad244849ac6cfebf89c3a7f08a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果这个方法被调用但是 <code>response.writeHead()</code> 没有被调用，它将切换到默认header模式并更新默认的headers。

</p>
</div>

<div class="translate-section" data-hash="c03b64371e48a93980a34137b01bdfd3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>This sends a chunk of the response body. This method may
be called multiple times to provide successive parts of the body.

</p>
</div>

<div class="translate-section" data-hash="b9c01ed0978424d2cf11b1f76f2aa0d8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>chunk</code> can be a string or a buffer. If <code>chunk</code> is a string,
the second parameter specifies how to encode it into a byte stream.
By default the <code>encoding</code> is <code>'utf8'</code>.

</p>
</div>

<div class="translate-section" data-hash="f616d634f8041f6de55204b52ee1b7a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><strong>Note</strong>: This is the raw HTTP body and has nothing to do with
higher-level multi-part body encodings that may be used.

</p>
</div>

<div class="translate-section" data-hash="6684f3dee79fb9fd8e8225445e81b830"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>The first time <code>response.write()</code> is called, it will send the buffered
header information and the first body to the client. The second time
<code>response.write()</code> is called, Node assumes you're going to be streaming
data, and sends that separately. That is, the response is buffered up to the
first chunk of body.

</p>
</div>

<div class="translate-section" data-hash="662e9ecf9ba2783888e8cd306c0b1a4a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果所有数据被成功刷新到内核缓冲区，则返回<code>true</code>。如果所有或部分数据在用户内存里还处于队列中，则返回<code>false</code>。当缓冲区再次被释放时，<code>'drain'</code>事件会被分发。
<code>'drain'</code> will be emitted when the buffer is again free.

</p>
</div>

<div class="translate-section" data-hash="cd87d31d085d16e9cc64446f36edf1bc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>response.addTrailers(headers)<span><a href="#all_response_addtrailers_headers_1408" id="all_response_addtrailers_headers_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="14b3662e62bc20e775bbb06162ea5f3c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>This method adds HTTP trailing headers (a header but at the end of the
message) to the response.

</p>
</div>

<div class="translate-section" data-hash="5296f0ba953e8e4003db75cfa486ea3a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Trailers will <strong>only</strong> be emitted if chunked encoding is used for the
response; if it is not (e.g., if the request was HTTP/1.0), they will
be silently discarded.

</p>
</div>

<div class="translate-section" data-hash="1c4845daa842df72b84df4ef40255e94"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Note that HTTP requires the <code>Trailer</code> header to be sent if you intend to
emit trailers, with a list of the header fields in its value. E.g.,

</p>
</div>

<div class="translate-section" data-hash="18721eabfb80cfdba87c9bc0c1736c65"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>response<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span> <span class="sh_string">'Content-Type'</span><span class="sh_symbol">:</span> <span class="sh_string">'text/plain'</span><span class="sh_symbol">,</span>
                          <span class="sh_string">'Trailer'</span><span class="sh_symbol">:</span> <span class="sh_string">'Content-MD5'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
response<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span>fileData<span class="sh_symbol">);</span>
response<span class="sh_symbol">.</span><span class="sh_function">addTrailers</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span><span class="sh_string">'Content-MD5'</span><span class="sh_symbol">:</span> <span class="sh_string">"7895bf4b8828b55ceaf47747b4bca667"</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
response<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span></code></pre>
</div>

<div class="translate-section" data-hash="add8bdbd9c6e73f439029094c4512b64"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>response.end([data], [encoding])<span><a href="#all_response_end_data_encoding_1408" id="all_response_end_data_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="f1ab5e26515387337d1c37f948505d4f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>This method signals to the server that all of the response headers and body
have been sent; that server should consider this message complete.
The method, <code>response.end()</code>, MUST be called on each
response.

</p>
</div>

<div class="translate-section" data-hash="ca2229721e5ed856a729cf50f8ec5f48"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果指定了参数 <code>data</code> , 就相当于先调用 <code>response.write(data, encoding)</code> 之后再调用 <code>response.end()</code>.

</p>
</div>

<div class="translate-section" data-hash="60c581463a254c178e73b6b2a264f171"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>http.request(options, callback)<span><a href="#all_http_request_options_callback_1408" id="all_http_request_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="a8a777b53cda4dec251c580d5ae82404"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Node maintains several connections per server to make HTTP requests.
This function allows one to transparently issue requests.

</p>
</div>

<div class="translate-section" data-hash="f2b3e9c7bcc6ecd7a8e5d02b97839202"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>options</code>可以是一个对象或一个字符串。如果<code>options</code>是一个字符串, 它将自动使用<a href="http://nodeapi.ucdok.com/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost">url.parse()</a>解析。

</p>
</div>

<div class="translate-section" data-hash="ebcc39462e6620a8cf432194084a5483"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Options:

</p>
</div>

<div class="translate-section" data-hash="5d4d95c9e51ca7adf5cb52979d0fc4e8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>host</code>：请求发送到的服务器的域名或IP地址。默认为<code>'localhost'</code>。</li>
<li><code>hostname</code>：用于支持<code>url.parse()</code>。<code>hostname</code>比<code>host</code>更好一些</li>
<li><code>port</code>：远程服务器的端口。默认值为80。</li>
<li><code>localAddress</code>：用于绑定网络连接的本地接口。</li>
<li><code>socketPath</code>：Unix域套接字（使用host:port或socketPath）</li>
<li><code>method</code>：指定HTTP请求方法的字符串。默认为<code>'GET'</code>。</li>
<li><code>path</code>：请求路径。默认为<code>'/'</code>。如果有查询字符串，则需要包含。例如<code>'/index.html?page=12'</code>。请求路径包含非法字符时抛出异常。目前，只否决空格，不过在未来可能改变。</li>
<li><code>headers</code>：包含请求头的对象。</li>
<li><code>auth</code>：用于计算认证头的基本认证，即<code>'user:password'</code></li>
<li><code>agent</code>：控制<a href="#https_class_https_agent">Agent</a>的行为。当使用了一个Agent的时候，请求将默认为<code>Connection: keep-alive</code>。可能的值为：<ul>
<li><code>undefined</code>（默认）：在这个主机和端口上使用[全局Agent][]。</li>
<li><code>Agent</code>对象：在<code>Agent</code>中显式使用passed。</li>
<li><code>false</code>：在对Agent进行资源池的时候，选择停用连接，默认请求为：<code>Connection: close</code>。</li>
</ul>
</li>
<li><code>keepAlive</code>：{Boolean} 保持资源池周围的套接字在未来被用于其它请求。默认值为<code>false</code></li>
<li><code>keepAliveMsecs</code>：{Integer} 当使用HTTP KeepAlive的时候，通过正在保持活动的套接字发送TCP KeepAlive包的频繁程度。默认值为<code>1000</code>。仅当<code>keepAlive</code>被设置为<code>true</code>时才相关。</li>
</ul>
</div>

<div class="translate-section" data-hash="9b530c706b03801d1a15ee7d75d6b903"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>http.request()</code> 返回一个 <code>http.ClientRequest</code>类的实例。<code>ClientRequest</code>实例是一个可写流对象。如果需要用POST请求上传一个文件的话，就将其写入到<code>ClientRequest</code>对象。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="19314f0817606e41787722b6f8728f24"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// write data to request body</span>
req<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'data</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
req<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'data</span><span class="sh_specialchar">\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
req<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span></code></pre>
</div>

<div class="translate-section" data-hash="ee6cbb16cb4e744d31e4774b54c56e8b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意，例子里的<code>req.end()</code>被调用了。使用<code>http.request()</code>方法时都必须总是调用<code>req.end()</code>以表明这个请求已经完成，即使响应body里没有任何数据。

</p>
</div>

<div class="translate-section" data-hash="4c5bad435d0b5e9fbc938799e4ec433f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>If any error is encountered during the request (be that with DNS resolution,
TCP level errors, or actual HTTP parse errors) an <code>'error'</code> event is emitted
on the returned request object.

</p>
</div>

<div class="translate-section" data-hash="1ddf0499cd65aa57566e64422a0669ae"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>There are a few special headers that should be noted.

</p>
</div>

<div class="translate-section" data-hash="6821221a85f413adad9ea8c4811f05c0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>Sending a 'Connection: keep-alive' will notify Node that the connection to
the server should be persisted until the next request.</li>
</ul>
</div>

<div class="translate-section" data-hash="b130c827ad15bb32ee43f9d1e2748b4e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>发送 'Content-length' 头将会禁用默认的 chunked 编码.</li>
</ul>
</div>

<div class="translate-section" data-hash="0df6bba53bcecf06f2d54f34b0cc9875"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>Sending an 'Expect' header will immediately send the request headers.
Usually, when sending 'Expect: 100-continue', you should both set a timeout
and listen for the <code>continue</code> event. See RFC2616 Section 8.2.3 for more
information.</li>
</ul>
</div>

<div class="translate-section" data-hash="822e4465f9b620fedd8b47e669e2ef26"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>Sending an Authorization header will override using the <code>auth</code> option
to compute basic authentication.</li>
</ul>
</div>

<div class="translate-section" data-hash="f01c4f92a3cd72793182403212b6e4b8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>http.get(options, callback)<span><a href="#all_http_get_options_callback_1408" id="all_http_get_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="64e0f24721b5992949910387ce8b33fa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>因为大部分的请求是没有报文体的GET请求，所以Node提供了这种便捷的方法。该方法与<code>http.request()</code>的唯一区别是它设置的是GET方法并自动调用<code>req.end()</code>。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="0cb9f2e0ff9403eb48a2cfe3a43bd097"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>http<span class="sh_symbol">.</span><span class="sh_function">get</span><span class="sh_symbol">(</span><span class="sh_string">"http://www.google.com/index.html"</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>res<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"响应："</span> <span class="sh_symbol">+</span> res<span class="sh_symbol">.</span>statusCode<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>e<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"错误："</span> <span class="sh_symbol">+</span> e<span class="sh_symbol">.</span>message<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="a1387a3dd99495457b22080cc524b1f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Class: http.Agent<span><a href="#all_class_http_agent_1408" id="all_class_http_agent_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ded34452f627cbe9d82712e43ba4cc9b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>HTTP Agent 是用于把套接字做成资源池，用于HTTP客户端请求。

</p>
</div>

<div class="translate-section" data-hash="44918fae3fe09883fe11a8082d6c5398"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>HTTP Agent 
也把客户端的请求默认为使用Connection:keep-alive。如果没有HTTP请求正在等待成为空闲的套接字的话，那么套接字将关闭。这意味
着Node的资源池在负载的情况下对keep-alive有利，但是仍然不需要开发人员使用KeepAlive来手动关闭HTTP客户端。

</p>
</div>

<div class="translate-section" data-hash="a12bf241c44c9d7579abd38b0c175817"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果你选择使用HTTP KeepAlive，那么你可以创建一个标志设为<code>true</code>的Agent对象。（见下面的<a href="#http_new_agent_options">构造函数选项</a>。）然后，Agent将会在资源池中保持未被使用的套接字，用于未来使用。它们将会被显式标记，以便于不保持Node进程的运行。但是当KeepAlive agent没有被使用时，显式地<a href="#http_agent_destroy"><code>destroy()</code></a> KeepAlive agent仍然是个好主意，这样套接字们会被关闭。

</p>
</div>

<div class="translate-section" data-hash="5507997d145df828713c4cdd3091b220"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当套接字触发了close事件或者特殊的agentRemove事件的时候，套接字们从agent的资源池中移除。这意味着如果你打算保持一个HTTP请求长时间开启，并且不希望它保持在资源池中，那么你可以按照下列几行的代码做事：

</p>
</div>

<div class="translate-section" data-hash="5d62c28ad325a66818041cdfa7da80c8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>http<span class="sh_symbol">.</span><span class="sh_function">get</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>res<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 做点事</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">"socket"</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>socket<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">emit</span><span class="sh_symbol">(</span><span class="sh_string">"agentRemove"</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="a02d33786c7b40181f16f2e78cd9bd92"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>另外，你可以直接使用<code>agent:false</code>选择完全停用资源池。

</p>
</div>

<div class="translate-section" data-hash="f9dbd9e2b8d42245e6e79a9eaac368b4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>http<span class="sh_symbol">.</span><span class="sh_function">get</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  hostname<span class="sh_symbol">:</span> <span class="sh_string">'localhost'</span><span class="sh_symbol">,</span>
  port<span class="sh_symbol">:</span> <span class="sh_number">80</span><span class="sh_symbol">,</span>
  path<span class="sh_symbol">:</span> <span class="sh_string">'/'</span><span class="sh_symbol">,</span>
  agent<span class="sh_symbol">:</span> <span class="sh_keyword">false</span>  <span class="sh_comment">// 仅仅为了这一个请求，而创建一个新的agent</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>res<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 为响应做些事</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">)</span></code></pre>
</div>

<div class="translate-section" data-hash="372cd02698dbbd7246560233ef148d21"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>new Agent([options])<span><a href="#all_new_agent_options_1408" id="all_new_agent_options_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="6d65cb3c343d60e544e329938d50b59e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>options</code> {Object} 设置于agent上的配置选项的集合。可以有下列字段：<ul>
<li><code>keepAlive</code> {Boolean} 保持在资源池周围套接未来字被其它请求使用。默认值为<code>false</code></li>
<li><code>keepAliveMsecs</code> {Integer} 当使用HTTP KeepAlive时, 通过正在被保持活跃的套接字来发送TCP KeepAlive包的频繁程度。默认值为<code>1000</code>。仅当<code>keepAlive</code>设置为<code>true</code>时有效。</li>
<li><code>maxSockets</code> {Number} 每台主机允许的套接字的数目的最大值。默认值为<code>Infinity</code>。</li>
<li>在空闲状态下还依然开启的套接字的最大值。仅当<code>keepAlive</code>设置为<code>true</code>的时候有效。默认值为<code>256</code>。</li>
</ul>
</li>
</ul>
</div>

<div class="translate-section" data-hash="4501cf81df061c4fbb11c508029fafcd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>被<code>http.request</code>使用的默认的<code>http.globalAgent</code>有设置为它们各自的默认值的全部这些值。

</p>
</div>

<div class="translate-section" data-hash="04c8177141df80813b6637798e610099"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>要配置这些值，你必须创建一个你自己的<code>Agent</code>对象。

</p>
</div>

<div class="translate-section" data-hash="5dd2c005f5d1cafb261b27bdc25e50a8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> http <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'http'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> keepAliveAgent <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> http<span class="sh_symbol">.</span><span class="sh_function">Agent</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span> keepAlive<span class="sh_symbol">:</span> <span class="sh_keyword">true</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
keepAliveAgent<span class="sh_symbol">.</span><span class="sh_function">request</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> onResponseCallback<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="505af22a121e157f8a054eba53694187"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>agent.maxSockets<span><a href="#all_agent_maxsockets_1408" id="all_agent_maxsockets_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="216ab81cb47e7f94acdbd2d3a24d1639"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>默认设置为Infinity。决定每台主机上的agent可以拥有的并发套接字的打开的数量。

</p>
</div>

<div class="translate-section" data-hash="58d6879476be61aae5a5a146fe0e7ff4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>agent.maxFreeSockets<span><a href="#all_agent_maxfreesockets_1408" id="all_agent_maxfreesockets_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="4742740c1da68bf13d86f7655f4865a1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>默认设置为256。对于支持HTTP KeepAlive的Agent，这设置了在空闲状态下仍然打开的套接字数目的最大值。

</p>
</div>

<div class="translate-section" data-hash="5a030fdf9ab4c3441dfcceb214aeab91"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>agent.sockets<span><a href="#all_agent_sockets_1408" id="all_agent_sockets_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="1250d2508ab6fe5d858acf875c683297"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>An object which contains arrays of sockets currently in use by the
Agent.  Do not modify.

</p>
</div>

<div class="translate-section" data-hash="dcfaf8acd076c61eeb62e2c0011e5a0e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>agent.freeSockets<span><a href="#all_agent_freesockets_1408" id="all_agent_freesockets_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="9297ed3c35d65dc405c5278ab6225b33"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>An object which contains arrays of sockets currently awaiting use by
the Agent when HTTP KeepAlive is used.  Do not modify.

</p>
</div>

<div class="translate-section" data-hash="77f2ff5bcd7341e582fb599dc832d62b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>agent.requests<span><a href="#all_agent_requests_1408" id="all_agent_requests_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="bfc586714f690ae1589985e001016ea4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>An object which contains queues of requests that have not yet been assigned to
sockets. Do not modify.

</p>
</div>

<div class="translate-section" data-hash="b3e5101e8050086991a91418398d8719"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>agent.destroy()<span><a href="#all_agent_destroy_1408" id="all_agent_destroy_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="849929009f9ff490fe0e30abbd7e4d82"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>销毁被此agent占用的任何套接字

</p>
</div>

<div class="translate-section" data-hash="338c4d93aacd841fbab536e693ab05ca"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>It is usually not necessary to do this.  However, if you are using an
agent with KeepAlive enabled, then it is best to explicitly shut down
the agent when you know that it will no longer be used.  Otherwise,
sockets may hang open for quite a long time before the server
terminates them.

</p>
</div>

<div class="translate-section" data-hash="5130db15fc70b90a74a39814c4f8d0c2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>agent.getName(options)<span><a href="#all_agent_getname_options_1408" id="all_agent_getname_options_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="aa954789816aa9c4c99a5e50643fb421"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Get a unique name for a set of request options, to determine whether a
connection can be reused.  In the http agent, this returns
<code>host:port:localAddress</code>.  In the https agent, the name includes the
CA, cert, ciphers, and other HTTPS/TLS-specific options that determine
socket reusability.

</p>
</div>

<div class="translate-section" data-hash="6e3bc59099c069c249af31d41ef6083b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>http.globalAgent<span><a href="#all_http_globalagent_1408" id="all_http_globalagent_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="8b5fb2f40af80480e741859b03a7da49"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Global instance of Agent which is used as the default for all http client
requests.

</p>
</div>

<div class="translate-section" data-hash="03933b7c3834d856ef98fef7b398b77b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Class: http.ClientRequest<span><a href="#all_class_http_clientrequest_1408" id="all_class_http_clientrequest_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="2b6c5dc8c1c8c106561f1a684bb5b756"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>This object is created internally and returned from <code>http.request()</code>.  It
represents an <em>in-progress</em> request whose header has already been queued.  The
header is still mutable using the <code>setHeader(name, value)</code>, <code>getHeader(name)</code>,
<code>removeHeader(name)</code> API.  The actual header will be sent along with the first
data chunk or when closing the connection.

</p>
</div>

<div class="translate-section" data-hash="3b05db3f12a9dded369a6a193a27dd55"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>To get the response, add a listener for <code>'response'</code> to the request object.
<code>'response'</code> will be emitted from the request object when the response
headers have been received.  The <code>'response'</code> event is executed with one
argument which is an instance of <code>http.IncomingMessage</code>.

</p>
</div>

<div class="translate-section" data-hash="e1c2399a468eaf21ac5e11d7e51fabc1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>During the <code>'response'</code> event, one can add listeners to the
response object; particularly to listen for the <code>'data'</code> event.

</p>
</div>

<div class="translate-section" data-hash="2d537861f0d1b34cecaa64871bc8c68f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>If no <code>'response'</code> handler is added, then the response will be
entirely discarded.  However, if you add a <code>'response'</code> event handler,
then you <strong>must</strong> consume the data from the response object, either by
calling <code>response.read()</code> whenever there is a <code>'readable'</code> event, or
by adding a <code>'data'</code> handler, or by calling the <code>.resume()</code> method.
Until the data is consumed, the <code>'end'</code> event will not fire.  Also, until
the data is read it will consume memory that can eventually lead to a
'process out of memory' error.

</p>
</div>

<div class="translate-section" data-hash="9935aa64f8b945ebf9b997af9a3ea59b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Note: Node does not check whether Content-Length and the length of the body
which has been transmitted are equal or not.

</p>
</div>

<div class="translate-section" data-hash="56d2e1e59efa81aae7fc85f7760ef5f0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该请求实现了 <a href="http://nodeapi.ucdok.com/api/stream.html#stream_writable_stream">Writable Stream</a> 接口。这是一个包含下列事件的
<a href="http://nodeapi.ucdok.com/api/events.html#events_class_events_eventemitter">EventEmitter</a> ：

</p>
</div>

<div class="translate-section" data-hash="7bfa0434a7a6ac6941abf7e9e1686423"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Event 'response'<span><a href="#all_event_response_1408" id="all_event_response_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="737f88eabd7042e0cdff4cdb4a45a4f0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (response) { }</code>

</p>
</div>

<div class="translate-section" data-hash="71cfa6d5fa5dd3df5fba3087597554b2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Emitted when a response is received to this request. This event is emitted only
once. The <code>response</code> argument will be an instance of <code>http.IncomingMessage</code>.

</p>
</div>

<div class="translate-section" data-hash="ebcc39462e6620a8cf432194084a5483"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Options:

</p>
</div>

<div class="translate-section" data-hash="ca541abb101cae73caa8388a0f88e123"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>host</code>: 请求发送到的服务器的域名或IP地址。</li>
<li><code>port</code>: 远程服务器的端口。</li>
<li><code>socketPath</code>: Unix域套接字（使用host:port或socketPath）</li>
</ul>
</div>

<div class="translate-section" data-hash="609bea529bcbd65b259610f5578ac100"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Event: 'socket'<span><a href="#all_event_socket_1408" id="all_event_socket_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3130f05700358dd651762964d4cc0f79"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (socket) { }</code>

</p>
</div>

<div class="translate-section" data-hash="b6fdc7221f5cea125f7414a86ce8c8ed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>触发于一个套接字被赋予为这个请求的时候。

</p>
</div>

<div class="translate-section" data-hash="a385d91c55ee447e6f8bfe2c4698eb4d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'connect'<span><a href="#all_connect_4226" id="all_connect_4226">#</a></span></h3>
</div>

<div class="translate-section" data-hash="5d64f4f9eea183a598e1fb5567dd581c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (response, socket, head) { }</code>

</p>
</div>

<div class="translate-section" data-hash="2f0de05202c064c9030df195d4e337b2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Emitted each time a server responds to a request with a CONNECT method. If this
event isn't being listened for, clients receiving a CONNECT method will have
their connections closed.

</p>
</div>

<div class="translate-section" data-hash="042b4ad5384ec4f37133a5a921149266"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>展示监听<code>connect</code>事件的一个客户端—服务器对。

</p>
</div>

<div class="translate-section" data-hash="8616352566fb05ed3820ecc9d81dee68"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>    <span class="sh_comment">// make a request over an HTTP tunnel</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'GET / HTTP/1.1</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
                 <span class="sh_string">'Host: www.google.com:80</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
                 <span class="sh_string">'Connection: close</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span> <span class="sh_symbol">+</span>
                 <span class="sh_string">'</span><span class="sh_specialchar">\r\n</span><span class="sh_string">'</span><span class="sh_symbol">);</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>chunk<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'end'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
      proxy<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="6e4162f4c63c4f85b51e2d2ba0c321f1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Event: 'upgrade'<span><a href="#all_event_upgrade_2817" id="all_event_upgrade_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="5d64f4f9eea183a598e1fb5567dd581c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (response, socket, head) { }</code>

</p>
</div>

<div class="translate-section" data-hash="1073e5bfbb500c3175fc16a680fb8efc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Emitted each time a server responds to a request with an upgrade. If this
event isn't being listened for, clients receiving an upgrade header will have
their connections closed.

</p>
</div>

<div class="translate-section" data-hash="244ca3cec16c65196fe7aee3390edeeb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>A client server pair that show you how to listen for the <code>upgrade</code> event.

</p>
</div>

<div class="translate-section" data-hash="5fd73592b68e4686d1be56767ea7522e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>  req<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'upgrade'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>res<span class="sh_symbol">,</span> socket<span class="sh_symbol">,</span> upgradeHead<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'got upgraded!'</span><span class="sh_symbol">);</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
    process<span class="sh_symbol">.</span><span class="sh_function">exit</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="0283b654ce286f09b5e0c547227a1433"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Event: 'continue'<span><a href="#all_event_continue_1408" id="all_event_continue_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c005f7d2379c68d2037134ec8aa65dae"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function () { }</code>

</p>
</div>

<div class="translate-section" data-hash="0feda51beeab427cdd24881337a6e100"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Emitted when the server sends a '100 Continue' HTTP response, usually because
the request contained 'Expect: 100-continue'. This is an instruction that
the client should send the request body.

</p>
</div>

<div class="translate-section" data-hash="e0820a696878d373b834f28229db7b89"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>request.write(chunk, [encoding])<span><a href="#all_request_write_chunk_encoding_1408" id="all_request_write_chunk_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="ab261a92ffb28e09e827774f567a5412"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Sends a chunk of the body.  By calling this method
many times, the user can stream a request body to a
server--in that case it is suggested to use the
<code>['Transfer-Encoding', 'chunked']</code> header line when
creating the request.

</p>
</div>

<div class="translate-section" data-hash="72e04f11d087557a9f2ca86d1e9d4ac3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>chunk</code> 参数必须是 <a href="http://nodeapi.ucdok.com/api/buffer.html#buffer_buffer">Buffer</a> 或者 string.

</p>
</div>

<div class="translate-section" data-hash="4c162b50f03d25affd35be836d66e61a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>encoding</code> 参数是可选的, 并且只能在 <code>chunk</code> 是 string 类型的时候才能设置.
默认是 <code>'utf8'</code>.

</p>
</div>

<div class="translate-section" data-hash="0a374ec3f97b9431dd1e846ec743141e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>request.end([data], [encoding])<span><a href="#all_request_end_data_encoding_1408" id="all_request_end_data_encoding_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="1132e8c650a0173fc452868b5567c6ae"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Finishes sending the request. If any parts of the body are
unsent, it will flush them to the stream. If the request is
chunked, this will send the terminating <code>'0\r\n\r\n'</code>.

</p>
</div>

<div class="translate-section" data-hash="6f29e9faadb7fda2a43e2e765a736c1b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>If <code>data</code> is specified, it is equivalent to calling
<code>request.write(data, encoding)</code> followed by <code>request.end()</code>.

</p>
</div>

<div class="translate-section" data-hash="275cee2f53f3969d75207bced9fa5a23"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>request.abort()<span><a href="#all_request_abort_1408" id="all_request_abort_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="91b94c444ef815a0d3179598e6e049e4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>终止一个请求. (从 v0.3.8 开始新加.)

</p>
</div>

<div class="translate-section" data-hash="ff50ee16ccf5ef0e6f787ec6d258a876"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>request.setTimeout(timeout, [callback])<span><a href="#all_request_settimeout_timeout_callback_1408" id="all_request_settimeout_timeout_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="efdbee72f2e3461d61da9df3591cb882"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Once a socket is assigned to this request and is connected
<a href="http://nodeapi.ucdok.com/api/net.html#net_socket_settimeout_timeout_callback">socket.setTimeout()</a> will be called.

</p>
</div>

<div class="translate-section" data-hash="aeb46f1f6872defb5d4ae9da702ec9ea"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>request.setNoDelay([noDelay])<span><a href="#all_request_setnodelay_nodelay_1408" id="all_request_setnodelay_nodelay_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="5968e7787ee568b295e69bc4f414f320"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Once a socket is assigned to this request and is connected
<a href="http://nodeapi.ucdok.com/api/net.html#net_socket_setnodelay_nodelay">socket.setNoDelay()</a> will be called.

</p>
</div>

<div class="translate-section" data-hash="f0ea0ae41a8a39fd94d7d7a02320e270"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>request.setSocketKeepAlive([enable], [initialDelay])<span><a href="#all_request_setsocketkeepalive_enable_initialdelay_1408" id="all_request_setsocketkeepalive_enable_initialdelay_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="f642cfa3557a6c65c3838bc5d42dd0f0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一旦一个套接字被分配到这个请求，而且成功连接，那么<a href="http://nodeapi.ucdok.com/api/net.html#net_socket_setkeepalive_enable_initialdelay">socket.setKeepAlive()</a>就会被调用。

</p>
</div>

<div class="translate-section" data-hash="11f863673f90bed37b9e32479d2a4347"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>http.IncomingMessage<span><a href="#all_http_incomingmessage_1408" id="all_http_incomingmessage_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ce7f7fb1b707f4deb18a24030a0b824b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个 <code>IncomingMessage</code>对象是由 <code>http.Server</code>或<code>http.ClientRequest</code>创建的，并作为第一参数分别传递给<code>'request'</code>和<code>'response'</code> 事件。它也可以被用来访问应答的状态，头文件和数据。

</p>
</div>

<div class="translate-section" data-hash="0f158f9979b1488d9d8f36f3b4547950"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>它实现了 <a href="http://nodeapi.ucdok.com/api/stream.html#stream_readable_stream">Readable Stream</a> 接口以及以下额外的事件，方法和属性。

</p>
</div>

<div class="translate-section" data-hash="d2b8af4d8afc211663a4341cca53b503"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'close'<span><a href="#all_close_12678" id="all_close_12678">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c005f7d2379c68d2037134ec8aa65dae"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function () { }</code>

</p>
</div>

<div class="translate-section" data-hash="2b7947acf58ecb48d093810224833097"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>表示在<code>response.end()</code>被调用或强制刷新之前，底层的连接已经被终止了。

</p>
</div>

<div class="translate-section" data-hash="61b9e77a48b4e5e01724eb47afa8cc48"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>跟<code>'end'</code>一样，这个事件对于每个应答只会触发一次。详见[http.ServerResponse][]的 <code>'close'</code>事件。

</p>
</div>

<div class="translate-section" data-hash="d839374d240da90cf90964a2351f2517"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>message.httpVersion<span><a href="#all_message_httpversion_1408" id="all_message_httpversion_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="e5103046341f73e40b34e26a615d8cf4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>客户端向服务器发出请求时，客户端发送的HTTP版本；或是服务器向客户端返回应答时，服务器的HTTP版本。通常是 <code>'1.1'</code>或<code>'1.0'</code>。

</p>
</div>

<div class="translate-section" data-hash="2309a4e29e4505057f50af514aed51c0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Also <code>response.httpVersionMajor</code> is the first integer and
<code>response.httpVersionMinor</code> is the second.

</p>
</div>

<div class="translate-section" data-hash="098812a14c22d2f55eed5ba943b06fd9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>message.headers<span><a href="#all_message_headers_1408" id="all_message_headers_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="7d9c1ac00c71eb2b864644d4c6000fa1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请求/响应 头对象.

</p>
</div>

<div class="translate-section" data-hash="b02b3b75a254afcd0c81250692ddb029"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>只读的头文件名称和值的映射。头文件名称全小写。示例：

</p>
</div>

<div class="translate-section" data-hash="cd13eedd27ef15a9cc7d89a1ca6370f3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 输出类似这样：</span>
<span class="sh_comment">//</span>
<span class="sh_comment">// { 'user-agent': 'curl/7.22.0',</span>
<span class="sh_comment">//   host: '127.0.0.1:8000',</span>
<span class="sh_comment">//   accept: '*/*' }</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>request<span class="sh_symbol">.</span>headers<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="e11812cee79a3dc9105e6359f8e40d2a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>message.rawHeaders<span><a href="#all_message_rawheaders_1408" id="all_message_rawheaders_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="56ff7117c28def27bb2a641d51cf4fde"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>The raw request/response headers list exactly as they were received.

</p>
</div>

<div class="translate-section" data-hash="cc52eddb31f6a76b2a0ef2c9e5bdebba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Note that the keys and values are in the same list.  It is <em>not</em> a
list of tuples.  So, the even-numbered offsets are key values, and the
odd-numbered offsets are the associated values.

</p>
</div>

<div class="translate-section" data-hash="7e635170fa78a509e4ef3853b479f8e2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Header names are not lowercased, and duplicates are not merged.

</p>
</div>

<div class="translate-section" data-hash="2c4c22884158140548572258385b0efa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// Prints something like:</span>
<span class="sh_comment">//</span>
<span class="sh_comment">// [ 'user-agent',</span>
<span class="sh_comment">//   'this is invalid because there can be only one',</span>
<span class="sh_comment">//   'User-Agent',</span>
<span class="sh_comment">//   'curl/7.22.0',</span>
<span class="sh_comment">//   'Host',</span>
<span class="sh_comment">//   '127.0.0.1:8000',</span>
<span class="sh_comment">//   'ACCEPT',</span>
<span class="sh_comment">//   '*/*' ]</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>request<span class="sh_symbol">.</span>rawHeaders<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="f272871866fb72d2799ef82b32381587"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>message.trailers<span><a href="#all_message_trailers_1408" id="all_message_trailers_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="e1fbf2c2142a604b1e759f588df53029"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>The request/response trailers object. Only populated at the 'end' event.

</p>
</div>

<div class="translate-section" data-hash="1344786cfb27260c39b5b3166188d15e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>message.rawTrailers<span><a href="#all_message_rawtrailers_1408" id="all_message_rawtrailers_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3eeb32c72522a5262787d2a196c17e79"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>The raw request/response trailer keys and values exactly as they were
received.  Only populated at the 'end' event.

</p>
</div>

<div class="translate-section" data-hash="5978aea0dcea3d1c4f06dc41b381d1a8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>message.setTimeout(msecs, callback)<span><a href="#all_message_settimeout_msecs_callback_1408" id="all_message_settimeout_msecs_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="38e8631f19078488f07590474eaf7fe3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>msecs</code> {Number}</li>
<li><code>callback</code> {Function}</li>
</ul>
</div>

<div class="translate-section" data-hash="444855078b98b0908f9bf0b86b8aaec0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>调用message.connection.setTimeout(msecs, callback)

</p>
</div>

<div class="translate-section" data-hash="83cabe4d20d5405a5c133afc2ab437ec"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>message.method<span><a href="#all_message_method_1408" id="all_message_method_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="ea443a2687783e31c82dfe7b1f8d2200"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><strong>仅对从<code>http.Server</code>获得到的请求(request)有效.</strong>

</p>
</div>

<div class="translate-section" data-hash="f786fa09b885b5ef657aef0ac1a6ac24"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请求（request）方法如同一个只读的字符串，比如‘GET’、‘DELETE’。

</p>
</div>

<div class="translate-section" data-hash="766da50234123c15379c947ad3047afe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>message.url<span><a href="#all_message_url_1408" id="all_message_url_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="ea443a2687783e31c82dfe7b1f8d2200"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><strong>仅对从<code>http.Server</code>获得到的请求(request)有效.</strong>

</p>
</div>

<div class="translate-section" data-hash="206353944ece6f1dbb1b9aa72d60377c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请求的URL字符串.它仅包含实际HTTP请求中所提供的URL.加入请求如下:

</p>
</div>

<div class="translate-section" data-hash="a78fd7d792e4d27da305bacd68dc8e44"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_normal">GET </span><span class="sh_symbol">/</span>status<span class="sh_symbol">?</span>name<span class="sh_symbol">=</span>ryan <span class="sh_normal">HTTP</span><span class="sh_symbol">/</span><span class="sh_number">1.1</span><span class="sh_symbol">\</span>r<span class="sh_symbol">\</span>n
Accept<span class="sh_symbol">:</span> <span class="sh_normal">text</span><span class="sh_symbol">/</span>plain<span class="sh_symbol">\</span>r<span class="sh_symbol">\</span>n
<span class="sh_symbol">\</span>r<span class="sh_symbol">\</span>n</code></pre>
</div>

<div class="translate-section" data-hash="89d3e99c0757251ce45293762d9e697a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>则<code>request.url</code> 为:

</p>
</div>

<div class="translate-section" data-hash="026d1bbf0f0b58e0b21845d370708800"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_string">'/status?name=ryan'</span></code></pre>
</div>

<div class="translate-section" data-hash="0b00c3459ce1384a77bc86163da6dd13"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果你想要将URL分解出来,你可以用<code>require('url').parse(request.url)</code>.  例如:

</p>
</div>

<div class="translate-section" data-hash="ff62d32f50b77c9ec9fe08082a0939ac"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>node<span class="sh_symbol">&gt;</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'url'</span><span class="sh_symbol">).</span><span class="sh_function">parse</span><span class="sh_symbol">(</span><span class="sh_string">'/status?name=ryan'</span><span class="sh_symbol">)</span>
<span class="sh_cbracket">{</span> href<span class="sh_symbol">:</span> <span class="sh_string">'/status?name=ryan'</span><span class="sh_symbol">,</span>
  search<span class="sh_symbol">:</span> <span class="sh_string">'?name=ryan'</span><span class="sh_symbol">,</span>
  query<span class="sh_symbol">:</span> <span class="sh_string">'name=ryan'</span><span class="sh_symbol">,</span>
  pathname<span class="sh_symbol">:</span> <span class="sh_string">'/status'</span> <span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="fd67c25f35214ce6746c86e332ee4acc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果你想要提取出从请求字符串(query string)中的参数,你可以用<code>require('querystring').parse</code>函数, 或者将<code>true</code>作为第二个参数传递给<code>require('url').parse</code>.  例如:

</p>
</div>

<div class="translate-section" data-hash="fd5a47688e0038a65787f287476cbcd8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>node<span class="sh_symbol">&gt;</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'url'</span><span class="sh_symbol">).</span><span class="sh_function">parse</span><span class="sh_symbol">(</span><span class="sh_string">'/status?name=ryan'</span><span class="sh_symbol">,</span> <span class="sh_keyword">true</span><span class="sh_symbol">)</span>
<span class="sh_cbracket">{</span> href<span class="sh_symbol">:</span> <span class="sh_string">'/status?name=ryan'</span><span class="sh_symbol">,</span>
  search<span class="sh_symbol">:</span> <span class="sh_string">'?name=ryan'</span><span class="sh_symbol">,</span>
  query<span class="sh_symbol">:</span> <span class="sh_cbracket">{</span> name<span class="sh_symbol">:</span> <span class="sh_string">'ryan'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  pathname<span class="sh_symbol">:</span> <span class="sh_string">'/status'</span> <span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="6fc0887c7c0f5caa068cc86bd3ebf826"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>message.statusCode<span><a href="#all_message_statuscode_1408" id="all_message_statuscode_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="927a1f84974bf9a371e3af169530dc6e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><strong>仅对从<code>http.ClientRequest</code>获得的响应(response)有效.</strong>

</p>
</div>

<div class="translate-section" data-hash="f6ab7e6d0fdee3726ad593ef9dd972a8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>三位数的HTTP响应状态码. 例如 <code>404</code>.

</p>
</div>

<div class="translate-section" data-hash="fc545b5ca348cd9cae2c26a379f32ba8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>message.socket<span><a href="#all_message_socket_1408" id="all_message_socket_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="9d6f0f526bf33380ecf928ba8be7a321"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>与此连接(connection)关联的<code>net.Socket</code>对象.

</p>
</div>

<div class="translate-section" data-hash="60b154d52e830ab2976a3d912550987e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>通过https的支持，使用 request.connection.verifyPeer()方法和request.connection.getPeerCertificate()方法来得到客户端的身份信息。

</p>
</div>

<div class="translate-section" data-hash="68b2051da2524ed3b7e9c0a1278de691"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

</div>
<div class="translate-section" data-hash="07261a42681237f06d09d55ce6107170"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>HTTPS<span><a href="#all_https_1408" id="all_https_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<div class="translate-section" data-hash="f1f7f8b012a1cbbfdb25706239b2b3a1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>HTTPS 是建立在 TLS/SSL 之上的 HTTP 协议。在 Node 中被实现为单独的模块。

</p>
</div>

<div class="translate-section" data-hash="f503023340b5ab0b81c07b7d6c84d74d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: https.Server<span><a href="#all_https_server_1408" id="all_https_server_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b26670334d23de7759ba90c76ca0b784"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该类是 <code>tls.Server</code> 的子类，并且发生和 <code>http.Server</code> 一样的事件。更多信息详见 <code>http.Server</code>。

</p>
</div>

<div class="translate-section" data-hash="f8180a64bc3efd218a9b21198f0f2f54"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.setTimeout(msecs, callback)<span><a href="#all_server_settimeout_msecs_callback_2817" id="all_server_settimeout_msecs_callback_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="ea41dec0bd2100bbecdfdf32ceeacfdc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>详见 <a href="http://nodeapi.ucdok.com/api/http.html#http_server_settimeout_msecs_callback">http.Server#setTimeout()</a>。

</p>
</div>

<div class="translate-section" data-hash="19060fabb61bd3f67c8d8516c4ff8498"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.timeout<span><a href="#all_server_timeout_2817" id="all_server_timeout_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="92b7524bbd341a5a80145070521a1150"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>详见 <a href="http://nodeapi.ucdok.com/api/http.html#http_server_timeout">http.Server#timeout</a>。

</p>
</div>

<div class="translate-section" data-hash="367f2a1857ffbb2bf0d968f48b0917ce"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>https.createServer(options, [requestListener])<span><a href="#all_https_createserver_options_requestlistener_1408" id="all_https_createserver_options_requestlistener_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="091f7c9de49ab026c159c822e776f084"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个新的 HTTPS Web 服务器对象。其中 <code>options</code> 类似于 <a href="http://nodeapi.ucdok.com/api/tls.html#tls_tls_createserver_options_secureconnectionlistener">tls.createServer()</a>；<code>requestListener</code> 是一个会被自动添加到 <code>request</code> 事件的函数。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="179ffac60d1394f5c58226c5ca36c040"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>https<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  res<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">"hello world</span><span class="sh_specialchar">\n</span><span class="sh_string">"</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="3a2d5fe857d8f9541136a124c2edec6c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>或者

</p>
</div>

<div class="translate-section" data-hash="179ffac60d1394f5c58226c5ca36c040"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>https<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  res<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">);</span>
  res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">"hello world</span><span class="sh_specialchar">\n</span><span class="sh_string">"</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="b247153295e27ca55036f651923be510"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.listen(port, [host], [backlog], [callback])<span><a href="#all_server_listen_port_host_backlog_callback_2817" id="all_server_listen_port_host_backlog_callback_2817">#</a></span></h3>
<h3>server.listen(path, [callback])<span><a href="#all_server_listen_path_callback_4226" id="all_server_listen_path_callback_4226">#</a></span></h3>
<h3>server.listen(handle, [callback])<span><a href="#all_server_listen_handle_callback_4226" id="all_server_listen_handle_callback_4226">#</a></span></h3>
</div>

<div class="translate-section" data-hash="83209d15c5fb0d2db87b666a1461a12b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>详见 <a href="http://nodeapi.ucdok.com/api/http.html#http_server_listen_port_hostname_backlog_callback">http.listen()</a>。

</p>
</div>

<div class="translate-section" data-hash="f7907ff9a0ecbf199c48b188bc048cb4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>server.close([callback])<span><a href="#all_server_close_callback_4226" id="all_server_close_callback_4226">#</a></span></h3>
</div>

<div class="translate-section" data-hash="8cbc476e6130412ff50eb27cc40f4018"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>详见 <a href="http://nodeapi.ucdok.com/api/http.html#http_server_close_callback">http.close()</a>。

</p>
</div>

<div class="translate-section" data-hash="b9c83f1ea2a91b87b256b54838a996aa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>https.request(options, callback)<span><a href="#all_https_request_options_callback_1408" id="all_https_request_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="0693c2910b2e0da2a1d673585a614aa5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>向一个安全 Web 服务器发送请求。

</p>
</div>

<div class="translate-section" data-hash="1970bd60eeec46ba2db61c33b748d34d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>options</code> 可以是一个对象或字符串。如果 <code>options</code> 是字符串，它会自动被 <a href="http://nodeapi.ucdok.com/api/url.html#url.parse">url.parse()</a> 解析。

</p>
</div>

<div class="translate-section" data-hash="adcbb389daf2715cbdbf2c27d6efa2df"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所有来自 <a href="http://nodeapi.ucdok.com/api/http.html#http_http_request_options_callback">http.request()</a> 的选项都是经过验证的。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="6f846646c763c83ec9ca9029809e3b97"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>req<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>e<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span>e<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="84fba0cfac08dde748f2756f3319c8a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>options 参数有如下选项

</p>
</div>

<div class="translate-section" data-hash="3f11da8a888f3ec6c20e6d5185d9f77e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>host</code>：发送请求的服务器的域名或 IP 地址，缺省为 <code>'localhost'</code>。</li>
<li><code>hostname</code>：为了支持 <code>url.parse()</code>，<code>hostname</code> 优先于 <code>host</code>。</li>
<li><code>port</code>：远程服务器的端口，缺省为 443。</li>
<li><code>method</code>：指定 HTTP 请求方法的字符串，缺省为 `'GET'。</li>
<li><code>path</code>：请求路径，缺省为 <code>'/'</code>。如有查询字串则应包含，比如 <code>'/index.html?page=12'</code>。</li>
<li><code>headers</code>：包含请求头的对象。</li>
<li><code>auth</code>：基本认证，如 <code>'user:password'</code> 来计算 Authorization 头。</li>
<li><code>agent</code>：控制 <a href="#https_class_https_agent">Agent</a> 行为。当使用 Agent 时请求会缺省为 <code>Connection: keep-alive</code>。可选值有：<ul>
<li><code>undefined</code>（缺省）：为该主机和端口使用 <a href="#https_https_globalagent">globalAgent</a>。</li>
<li><code>Agent</code> 对象：明确使用传入的 <code>Agent</code>。</li>
<li><code>false</code>：不使用 Agent 连接池，缺省请求 <code>Connection: close</code>。</li>
</ul>
</li>
</ul>
</div>

<div class="translate-section" data-hash="1c42946465c6cad791279b77dfe16584"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>下列来自 <a href="http://nodeapi.ucdok.com/api/tls.html#tls_tls_connect_options_callback">tls.connect()</a> 的选项也能够被指定，但一个 <a href="#https_https_globalagent">globalAgent</a> 会忽略它们。

</p>
</div>

<div class="translate-section" data-hash="777fe308b732371437e704e85adba766"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>pfx</code>：证书，SSL 所用的私钥或 CA 证书。缺省为 <code>null</code>。</li>
<li><code>key</code>：SSL 所用私钥。缺省为 <code>null</code>。</li>
<li><code>passphrase</code>：私钥或 pfx 的口令字符串，缺省为 <code>null</code>。</li>
<li><code>cert</code>：所用公有 x509 证书，缺省为 <code>null</code>。</li>
<li><code>ca</code>：用于检查远程主机的证书颁发机构或包含一系列证书颁发机构的数组。</li>
<li><code>ciphers</code>：描述要使用或排除的密码的字符串，格式请参阅 <a href="http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT">http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT</a>。</li>
<li><code>rejectUnauthorized</code>：如为 <code>true</code> 则服务器证书会使用所给 CA 列表验证。如果验证失败则会触发 <code>'error'</code> 时间。验证过程发生于连接层，在 HTTP 请求发送<em>之前</em>。缺省为 <code>true</code>。</li>
<li><code>secureProtocol</code>：所用 SSL 方法，比如 <code>SSLv3_method</code> 强制使用 SSL version 3。可取值取决于您安装的 OpenSSL 并被定义在 <a href="http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_PROTOCOL_METHODS">SSL_METHODS</a> 常量。</li>
</ul>
</div>

<div class="translate-section" data-hash="09842de60f917191a98cc49250387889"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>要指定这些选项，使用一个自定义 <code>Agent</code>。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="1aa0bc899bd3466d7ba05b7454ff4555"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> req <span class="sh_symbol">=</span> https<span class="sh_symbol">.</span><span class="sh_function">request</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>res<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_symbol">...</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="4362f1b8d3cd5d16d9bb82432bc4c806"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>或不使用 <code>Agent</code>。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="1aa0bc899bd3466d7ba05b7454ff4555"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> req <span class="sh_symbol">=</span> https<span class="sh_symbol">.</span><span class="sh_function">request</span><span class="sh_symbol">(</span>options<span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>res<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_symbol">...</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="118835b9e2a038580bc7fc99b7148ca8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>https.get(options, callback)<span><a href="#all_https_get_options_callback_1408" id="all_https_get_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="3ae3e7bb5cdedf48e3fd3a8e00d5fb84"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>类似 <code>http.get()</code> 但为 HTTPS。

</p>
</div>

<div class="translate-section" data-hash="1970bd60eeec46ba2db61c33b748d34d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>options</code> 可以是一个对象或字符串。如果 <code>options</code> 是字符串，它会自动被 <a href="http://nodeapi.ucdok.com/api/url.html#url.parse">url.parse()</a> 解析。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="dd7a30212cd3d0720a2e19b397e1dcb6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'error'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>e<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">error</span><span class="sh_symbol">(</span>e<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="1590c8f037192610eb3900be65dff3e6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: https.Agent<span><a href="#all_https_agent_1408" id="all_https_agent_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="2c0310c97601d5cd492cc2fc3098be66"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>类似于 <a href="http://nodeapi.ucdok.com/api/http.html#http_class_http_agent">http.Agent</a> 的 HTTPS Agent 对象。详见 <a href="#https_https_request_options_callback">https.request()</a>。

</p>
</div>

<div class="translate-section" data-hash="af2120804f31d8e2677be881feff5624"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>https.globalAgent<span><a href="#all_https_globalagent_1408" id="all_https_globalagent_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="8b414e2f7c6a265838a29491a98e2ad1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所有 HTTPS 客户端请求的全局 <a href="#https_class_https_agent">https.Agent</a> 实例。

</p>
</div>

<div class="translate-section" data-hash="73984bc74fe6ddb3da928a8a1934911b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

</div>
<div class="translate-section" data-hash="428008cda2cc67f359eae763ac850471"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>URL<span><a href="#all_url_1408" id="all_url_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<div class="translate-section" data-hash="21948f0f3c5d4e3bbd0424928b2180c9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该模块包含用以 URL 解析的实用函数。
使用 <code>require('url')</code> 来调用该模块。

</p>
</div>

<div class="translate-section" data-hash="fdca194aaccfc25ce71663a87d6b65d2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>不同的 URL 字符串解析后返回的对象会有一些额外的字段信息，仅当该部分出现在 URL 中才会有。以下是一个 URL 例子：

</p>
</div>

<div class="translate-section" data-hash="a28a64a38bece33c7015eaa20bda7d48"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'</code>

</p>
</div>

<div class="translate-section" data-hash="6401f83b5b2fafeceb5b4a1359da53e2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>href</code>: 所解析的完整原始 URL。协议名和主机名都已转为小写。</li>
</ul>
</div>

<div class="translate-section" data-hash="4aceac76fce1ee98ec4031341d33941e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>例如<span class="sh_symbol">:</span> `<span class="sh_string">'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'</span>`</code></pre>
</div>

<div class="translate-section" data-hash="09327b2f10fdfd3960091434b70509e9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>protocol</code>: 请求协议，小写</li>
</ul>
</div>

<div class="translate-section" data-hash="e89e86c8f5b6938d152781090858811e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>例如<span class="sh_symbol">:</span> `<span class="sh_string">'http:'</span>`</code></pre>
</div>

<div class="translate-section" data-hash="d9b7b21ae612dfe4d9ea24fd816faed2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>host</code>: URL主机名已全部转换成小写, 包括端口信息</li>
</ul>
</div>

<div class="translate-section" data-hash="4b393ae040a96f315262e2b0f65111fd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>例如<span class="sh_symbol">:</span> `<span class="sh_string">'host.com:8080'</span>`</code></pre>
</div>

<div class="translate-section" data-hash="4fca47e93227e96c67fb52d58449e6f7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>auth</code>:URL中身份验证信息部分</li>
</ul>
</div>

<div class="translate-section" data-hash="1a730d7b939c4ea4104eb03a68f53c74"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>例如<span class="sh_symbol">:</span> `<span class="sh_string">'user:pass'</span>`</code></pre>
</div>

<div class="translate-section" data-hash="c323118dec2faf2b14307f3d65ac0125"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>hostname</code>:主机的主机名部分, 已转换成小写</li>
</ul>
</div>

<div class="translate-section" data-hash="3e933bcbb678f89dc30fe7d0a045de8a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>例如<span class="sh_symbol">:</span> `<span class="sh_string">'host.com'</span>`</code></pre>
</div>

<div class="translate-section" data-hash="1e25beca46e374afdcf636782440287c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>port</code>: 主机的端口号部分</li>
</ul>
</div>

<div class="translate-section" data-hash="efadfa4e3929ec87daf5b955f7a2f62a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>例如<span class="sh_symbol">:</span> `<span class="sh_string">'8080'</span>`</code></pre>
</div>

<div class="translate-section" data-hash="412709c30867873a923cd56522d93b87"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>pathname</code>: URL的路径部分,位于主机名之后请求查询之前, including the initial slash if present.</li>
</ul>
</div>

<div class="translate-section" data-hash="7515b1058483b8318961256e1947b35c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>例如<span class="sh_symbol">:</span> `<span class="sh_string">'/p/a/t/h'</span>`</code></pre>
</div>

<div class="translate-section" data-hash="440c32339abf5446e656b2fe73e8582c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>search</code>: URL 的“查询字符串”部分，包括开头的问号。</li>
</ul>
</div>

<div class="translate-section" data-hash="c42c4893784ad6e80d81b599afcfe44c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>例如<span class="sh_symbol">:</span> `<span class="sh_string">'?query=string'</span>`</code></pre>
</div>

<div class="translate-section" data-hash="11e318257c29df85045ae3677d7fe7ac"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>path</code>: <code>pathname</code> 和 <code>search</code> 连在一起。</li>
</ul>
</div>

<div class="translate-section" data-hash="753f3fd008402c523619bac22ca448d1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>例如<span class="sh_symbol">:</span> `<span class="sh_string">'/p/a/t/h?query=string'</span>`</code></pre>
</div>

<div class="translate-section" data-hash="9db4e284b8dd3c47dfd97af6faa0333f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>query</code>: 查询字符串中的参数部分（问号后面部分字符串），或者使用  <code>querystring.parse()</code> 解析后返回的对象。</li>
</ul>
</div>

<div class="translate-section" data-hash="77ea65c1dfe14736ec33c7b5fb64d8a8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>例如<span class="sh_symbol">:</span> `<span class="sh_string">'query=string'</span>` or `<span class="sh_cbracket">{</span><span class="sh_string">'query'</span><span class="sh_symbol">:</span><span class="sh_string">'string'</span><span class="sh_cbracket">}</span>`</code></pre>
</div>

<div class="translate-section" data-hash="1ea385e1b6b21152f9f58ca2f4214715"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>hash</code>: URL 的 “#” 后面部分（包括 # 符号） </li>
</ul>
</div>

<div class="translate-section" data-hash="41ec38507086bc14cd06fd668ef113eb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>例如<span class="sh_symbol">:</span> `<span class="sh_string">'#hash'</span>`</code></pre>
</div>

<div class="translate-section" data-hash="56e3bc5c8d3f14eaa1bccb28635f0690"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>以下是 URL 模块提供的方法：

</p>
</div>

<div class="translate-section" data-hash="4c6831c326ae08a94dfe32c5137036d9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>url.parse(urlStr, [parseQueryString], [slashesDenoteHost])<span><a href="#all_url_parse_urlstr_parsequerystring_slashesdenotehost_1408" id="all_url_parse_urlstr_parsequerystring_slashesdenotehost_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="99076bde36249fa2abc6799f36ed24da"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>输入 URL 字符串，返回一个对象。

</p>
</div>

<div class="translate-section" data-hash="dd1e87c9228cb5075c38e78f69a6b045"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>将第二个参数设置为 <code>true</code> 则使用 <code>querystring</code> 模块来解析 URL 中德查询字符串部分，默认为 <code>false</code>。

</p>
</div>

<div class="translate-section" data-hash="16372310e908afde94164f3e8b9258bf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>将第三个参数设置为 <code>true</code> 来把诸如 <code>//foo/bar</code> 这样的URL解析为
<code>{ host: 'foo', pathname: '/bar' }</code> 而不是
<code>{ pathname: '//foo/bar' }</code>。 默认为 <code>false</code>。

</p>
</div>

<div class="translate-section" data-hash="4822c8c01a5110fcc8089a34792e3dfd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>url.format(urlObj)<span><a href="#all_url_format_urlobj_1408" id="all_url_format_urlobj_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ea94dad69a85e6e49d63443e862cb405"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>输入一个 URL 对象，返回格式化后的 URL 字符串。

</p>
</div>

<div class="translate-section" data-hash="83a5dad237db5ec75e3f1796eda7c40c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>href</code> 属性会被忽略处理.</li>
<li><code>protocol</code>无论是否有末尾的 <code>:</code> (冒号)，会同样的处理<ul>
<li>这些协议包括 <code>http</code>, <code>https</code>, <code>ftp</code>, <code>gopher</code>, <code>file</code> 
后缀是 <code>://</code> (冒号-斜杠-斜杠).</li>
<li>所有其他的协议如 <code>mailto</code>, <code>xmpp</code>, <code>aim</code>, <code>sftp</code>, <code>foo</code>, 等
 会加上后缀 <code>:</code> (冒号)</li>
</ul>
</li>
<li><code>auth</code> 如果有将会出现.</li>
<li><code>hostname</code> 如果 <code>host</code> 属性没被定义，则会使用此属性.</li>
<li><code>port</code> 如果 <code>host</code> 属性没被定义，则会使用此属性.</li>
<li><code>host</code> 优先使用，将会替代 <code>hostname</code> 和<code>port</code></li>
<li><code>pathname</code> 将会同样处理无论结尾是否有<code>/</code> (斜杠)</li>
<li><code>search</code> 将会替代 <code>query</code>属性</li>
<li><code>query</code> (object类型; 详细请看 <code>querystring</code>) 如果没有 <code>search</code>,将会使用此属性.</li>
<li><code>search</code> 无论前面是否有 <code>?</code> (问号)，都会同样的处理</li>
<li><code>hash</code>无论前面是否有<code>#</code> (井号, 锚点)，都会同样处理</li>
</ul>
</div>

<div class="translate-section" data-hash="6acd67974b5e80f2400cb654e0e6eaa3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>url.resolve(from, to)<span><a href="#all_url_resolve_from_to_1408" id="all_url_resolve_from_to_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="8aba1bf3db5e738a5d5e494e14942adc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>给定一个基础URL路径，和一个href URL路径，并且象浏览器那样处理他们可以带上锚点。 例子：

</p>
</div>

<div class="translate-section" data-hash="b0e52a2877a25a39b1c81fa28ecd3ac4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>url<span class="sh_symbol">.</span><span class="sh_function">resolve</span><span class="sh_symbol">(</span><span class="sh_string">'/one/two/three'</span><span class="sh_symbol">,</span> <span class="sh_string">'four'</span><span class="sh_symbol">)</span>         <span class="sh_comment">// '/one/two/four'</span>
url<span class="sh_symbol">.</span><span class="sh_function">resolve</span><span class="sh_symbol">(</span><span class="sh_string">'http://example.com/'</span><span class="sh_symbol">,</span> <span class="sh_string">'/one'</span><span class="sh_symbol">)</span>    <span class="sh_comment">// 'http://example.com/one'</span>
url<span class="sh_symbol">.</span><span class="sh_function">resolve</span><span class="sh_symbol">(</span><span class="sh_string">'http://example.com/one'</span><span class="sh_symbol">,</span> <span class="sh_string">'/two'</span><span class="sh_symbol">)</span> <span class="sh_comment">// 'http://example.com/two'</span></code></pre>
</div>
<div class="translate-section" data-hash="cf64c48b96f0fedbf866e73d4261e56f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>Query String<span><a href="#all_query_string_1408" id="all_query_string_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<!--name=querystring-->

<div class="translate-section" data-hash="5eac00fa003450947079f251feb1a7b5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个模块提供一些处理 query string 的工具。它提供下列方法：

</p>
</div>

<div class="translate-section" data-hash="b4f19263ad164b6d605976910c940652"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>querystring.stringify(obj, [sep], [eq])<span><a href="#all_querystring_stringify_obj_sep_eq_1408" id="all_querystring_stringify_obj_sep_eq_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="3f8b85e87032d1b02f93a985413f328f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>序列化一个对象到一个 query string。可以选择是否覆盖默认的分割符（<code>'&amp;'</code>）和分配符（<code>'='</code>）。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="06003582c30ccc689908b2c3533561d3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>querystring<span class="sh_symbol">.</span><span class="sh_function">stringify</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>foo<span class="sh_symbol">:</span> <span class="sh_string">'bar'</span><span class="sh_symbol">,</span> baz<span class="sh_symbol">:</span> <span class="sh_string">'qux'</span><span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_string">';'</span><span class="sh_symbol">,</span> <span class="sh_string">':'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// 返回如下字串</span>
<span class="sh_string">'foo:bar;baz:qux'</span></code></pre>
</div>

<div class="translate-section" data-hash="d42589c2edb1b419119f6b66f2b8a0be"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>querystring.parse(str, [sep], [eq], [options])<span><a href="#all_querystring_parse_str_sep_eq_options_1408" id="all_querystring_parse_str_sep_eq_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="d716e112da564a9bc2fd89db50cc3e0b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>将一个 query string 反序列化为一个对象。可以选择是否覆盖默认的分割符（<code>'&amp;'</code>）和分配符（<code>'='</code>）。

</p>
</div>

<div class="translate-section" data-hash="dec196c25835121ac3acfb365cd7372b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>options对象可能包含<code>maxKeys</code>属性(默认为1000),它可以用来限制处理过的键(key)的数量.设为0可以去除键(key)的数量限制.

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="4db5c3db674600b5fdadb2389056df60"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>querystring<span class="sh_symbol">.</span><span class="sh_function">parse</span><span class="sh_symbol">(</span><span class="sh_string">'foo=bar&amp;baz=qux&amp;baz=quux&amp;corge'</span><span class="sh_symbol">)</span>
<span class="sh_comment">// returns</span>
<span class="sh_cbracket">{</span> foo<span class="sh_symbol">:</span> <span class="sh_string">'bar'</span><span class="sh_symbol">,</span> baz<span class="sh_symbol">:</span> <span class="sh_symbol">[</span><span class="sh_string">'qux'</span><span class="sh_symbol">,</span> <span class="sh_string">'quux'</span><span class="sh_symbol">],</span> corge<span class="sh_symbol">:</span> <span class="sh_string">''</span> <span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="f60d356414fe18c735475b64ca6d7edc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>querystring.escape<span><a href="#all_querystring_escape_1408" id="all_querystring_escape_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="2a7ce37908daf4ba671c287bdfd045cf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>供 <code>querystring.stringify</code> 使用的转意函数，在必要的时候可被重写。

</p>
</div>

<div class="translate-section" data-hash="e7f04f920fd8de2a5281f1fc49718a8c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>querystring.unescape<span><a href="#all_querystring_unescape_1408" id="all_querystring_unescape_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="9367ac00e6f21b7a9fc413f4603b0420"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>供 <code>querystring.parse</code> 使用的反转意函数，在必要的时候可被重写。


</p>
</div>
<div class="translate-section" data-hash="65bd9fef9b97f74d0f34ef74bb03f2ed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>punycode<span><a href="#all_punycode_1408" id="all_punycode_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="14ae3b8a1560651cf34fa2e5562e7f27"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> 不稳定</code></pre>
</div>

<div class="translate-section" data-hash="45bc70e82867c3727963b8d50fec7772"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><a href="http://mths.be/punycode">Punycode.js</a> 自 Node.js v0.6.2+ 开始被内置，通过 <code>require('punycode')</code> 引入。（要在其它 Node.js 版本中使用它，请先使用 npm 安装 <code>punycode</code> 模块。）

</p>
</div>

<div class="translate-section" data-hash="ef5be9338a2afd1e5ecc5b9f2b28bbc0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>punycode.decode(string)<span><a href="#all_punycode_decode_string_1408" id="all_punycode_decode_string_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ad3d81c015533a2b1c82f08e34fd0039"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>将一个纯 ASCII 符号的 Punycode 字符串转换为 Unicode 符号的字符串。

</p>
</div>

<div class="translate-section" data-hash="bacea84f9b1575aa5f5da7d945d6ef89"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 解码域名部分</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">decode</span><span class="sh_symbol">(</span><span class="sh_string">'maana-pta'</span><span class="sh_symbol">);</span> <span class="sh_comment">// 'mañana'</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">decode</span><span class="sh_symbol">(</span><span class="sh_string">'--dqo34k'</span><span class="sh_symbol">);</span> <span class="sh_comment">// '☃-⌘'</span></code></pre>
</div>

<div class="translate-section" data-hash="1d7f5217f218812a480030adc91f6b76"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>punycode.encode(string)<span><a href="#all_punycode_encode_string_1408" id="all_punycode_encode_string_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="eb7dc58539b23df8bbc4943377d16aed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>将一个 Unicode 符号的字符串转换为纯 ASCII 符号的 Punycode 字符串。

</p>
</div>

<div class="translate-section" data-hash="6b4c97352ac46edb02debdb9e4c39277"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 编码域名部分</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">encode</span><span class="sh_symbol">(</span><span class="sh_string">'mañana'</span><span class="sh_symbol">);</span> <span class="sh_comment">// 'maana-pta'</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">encode</span><span class="sh_symbol">(</span><span class="sh_string">'☃-⌘'</span><span class="sh_symbol">);</span> <span class="sh_comment">// '--dqo34k'</span></code></pre>
</div>

<div class="translate-section" data-hash="39c91e571595227bc0351c90841076f7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>punycode.toUnicode(domain)<span><a href="#all_punycode_tounicode_domain_1408" id="all_punycode_tounicode_domain_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="8310760ba659269004284e593b2db688"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>将一个表示域名的 Punycode 字符串转换为 Unicode。只有域名中的 Punycode 部分会转换，也就是说您在一个已经转换为 Unicode 的字符串上调用它也是没问题的。

</p>
</div>

<div class="translate-section" data-hash="be75fa9fb4ef1fe80306c0e77b04e868"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 解码域名</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">toUnicode</span><span class="sh_symbol">(</span><span class="sh_string">'xn--maana-pta.com'</span><span class="sh_symbol">);</span> <span class="sh_comment">// 'mañana.com'</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">toUnicode</span><span class="sh_symbol">(</span><span class="sh_string">'xn----dqo34k.com'</span><span class="sh_symbol">);</span> <span class="sh_comment">// '☃-⌘.com'</span></code></pre>
</div>

<div class="translate-section" data-hash="2e22b561cadfe98bc709256c46be0fa2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>punycode.toASCII(domain)<span><a href="#all_punycode_toascii_domain_1408" id="all_punycode_toascii_domain_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="dab878df2fbff6ff7cd9d8d5e82aefbf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>将一个表示域名的 Unicode 字符串转换为 Punycode。只有域名的非 ASCII 部分会被转换，也就是说您在一个已经是 ASCII 的域名上调用它也是没问题的。

</p>
</div>

<div class="translate-section" data-hash="26588d4e2e262d41138277294ce3920d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 编码域名</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">toASCII</span><span class="sh_symbol">(</span><span class="sh_string">'mañana.com'</span><span class="sh_symbol">);</span> <span class="sh_comment">// 'xn--maana-pta.com'</span>
punycode<span class="sh_symbol">.</span><span class="sh_function">toASCII</span><span class="sh_symbol">(</span><span class="sh_string">'☃-⌘.com'</span><span class="sh_symbol">);</span> <span class="sh_comment">// 'xn----dqo34k.com'</span></code></pre>
</div>

<div class="translate-section" data-hash="db0e5b153abe3689a32d3f691d2a2aa8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>punycode.ucs2<span><a href="#all_punycode_ucs2_1408" id="all_punycode_ucs2_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="a4614102d04a830330ef156d8d4e04cf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>punycode.ucs2.decode(string)<span><a href="#all_punycode_ucs2_decode_string_1408" id="all_punycode_ucs2_decode_string_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="96f4b9abca4a06645828ceccc92068cc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建一个数组，包含字符串中每个 Unicode 符号的数字编码点。由于 <a href="http://mathiasbynens.be/notes/javascript-encoding">JavaScript 在内部使用 UCS-2</a>，
该函数会按照 UTF-16 将一对代半数（UCS-2 暴露的单独的字符）转换为单独一个编码点。

</p>
</div>

<div class="translate-section" data-hash="8f736869af1384e63c9eae52a4ccc0f5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>punycode<span class="sh_symbol">.</span>ucs2<span class="sh_symbol">.</span><span class="sh_function">decode</span><span class="sh_symbol">(</span><span class="sh_string">'abc'</span><span class="sh_symbol">);</span> <span class="sh_comment">// [0x61, 0x62, 0x63]</span>
<span class="sh_comment">// surrogate pair for U+1D306 tetragram for centre:</span>
punycode<span class="sh_symbol">.</span>ucs2<span class="sh_symbol">.</span><span class="sh_function">decode</span><span class="sh_symbol">(</span><span class="sh_string">'</span><span class="sh_specialchar">\u</span><span class="sh_string">D834</span><span class="sh_specialchar">\u</span><span class="sh_string">DF06'</span><span class="sh_symbol">);</span> <span class="sh_comment">// [0x1D306]</span></code></pre>
</div>

<div class="translate-section" data-hash="c9b7a73e4ce0ef9e6a7e68354255018f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>punycode.ucs2.encode(codePoints)<span><a href="#all_punycode_ucs2_encode_codepoints_1408" id="all_punycode_ucs2_encode_codepoints_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="23b8c3e84069d178f60c060d05865978"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>以数字编码点的值的数组创建一个字符串。

</p>
</div>

<div class="translate-section" data-hash="cbee2752c125aa6471c1e1fb045bcd0f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>punycode<span class="sh_symbol">.</span>ucs2<span class="sh_symbol">.</span><span class="sh_function">encode</span><span class="sh_symbol">([</span><span class="sh_number">0x61</span><span class="sh_symbol">,</span> <span class="sh_number">0x62</span><span class="sh_symbol">,</span> <span class="sh_number">0x63</span><span class="sh_symbol">]);</span> <span class="sh_comment">// 'abc'</span>
punycode<span class="sh_symbol">.</span>ucs2<span class="sh_symbol">.</span><span class="sh_function">encode</span><span class="sh_symbol">([</span><span class="sh_number">0x1D306</span><span class="sh_symbol">]);</span> <span class="sh_comment">// '\uD834\uDF06'</span></code></pre>
</div>

<div class="translate-section" data-hash="c41a78dc788182d11665d75029ff34b0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>punycode.version<span><a href="#all_punycode_version_1408" id="all_punycode_version_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b3b3a60917136611b9ba384b3ce19800"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>表示当前 Punycode.js 版本号的字符串。

</p>
</div>
<div class="translate-section" data-hash="16ce9ec28ed393ed16bd93a587524dec"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>Readline<span><a href="#all_readline_1408" id="all_readline_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="14ae3b8a1560651cf34fa2e5562e7f27"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> 不稳定</code></pre>
</div>

<div class="translate-section" data-hash="6ffffbbafe6bbde35075a62a915f3fee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>要使用此模块，需要<code>require('readline')</code>.Readline程序允许逐行读取一个流内容(例如<code>process.stdin</code>).

</p>
</div>

<div class="translate-section" data-hash="68761867fb363ca24fda1587ee31309c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>需要注意的是你一旦调用了这个模块，你的node程序将不会终止直到你关闭此接口。下面是如何让你的程序正常退出的方法:

</p>
</div>

<div class="translate-section" data-hash="192da760cb91627c14e60a92c1b48a5c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>  rl<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="8af54e6ec09ea0978df0b6095a7bc6e8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>readline.createInterface(options)<span><a href="#all_readline_createinterface_options_1408" id="all_readline_createinterface_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="43c7ba7f8b2101b46e86ae8025bbad42"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建一个readline的接口实例. 接受一个Object类型参数，可传递以下几个值:

</p>
</div>

<div class="translate-section" data-hash="35efccf04bbeba2e8f4b1f1bf0830cf7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>input</code> - 要监听的可读流 (必需).</li>
</ul>
</div>

<div class="translate-section" data-hash="a8b6a2eac88d54232cad994af2561d18"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>output</code> - 要写入 readline 的可写流 (必须).</li>
</ul>
</div>

<div class="translate-section" data-hash="12cff1a6de27106ff7243e02defdf52d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>completer</code> - 用于 Tab 自动补全的可选函数。见下面使用的例子。</li>
</ul>
</div>

<div class="translate-section" data-hash="584e56cc6f3c47e34aacc4f42689cba0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>terminal</code> - 如果希望 <code>input</code> 和 <code>output</code> 流像 TTY 一样对待，那么传递参数 <code>true</code> ，并且经由 ANSI/VT100 转码。
默认情况下检查 <code>isTTY</code> 是否在 <code>output</code> 流上实例化。</li>
</ul>
</div>

<div class="translate-section" data-hash="a85a274730e6c313acb1c9506529b362"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>通过用户 <code>completer</code> 函数给定了一个当前行入口，并且期望返回一个包含两个条目的数组：

</p>
</div>

<div class="translate-section" data-hash="10b44812bebc4bc499eee45cdd5e00f2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ol>
<li>一个匹配当前输入补全的字符串数组.</li>
</ol>
</div>

<div class="translate-section" data-hash="2588d0178c763a463d74e1cfab5c7a41"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ol>
<li>一个用于匹配的子字符串。</li>
</ol>
</div>

<div class="translate-section" data-hash="9651c84db965fb7ff09524de3f616c7e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>最终像这种形式:
<code>[[substr1, substr2, ...], originalsubstring]</code>.

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="c870f67d58750d6f3b45e276035ffade"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">function</span> <span class="sh_function">completer</span><span class="sh_symbol">(</span>line<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> completions <span class="sh_symbol">=</span> <span class="sh_string">'.help .error .exit .quit .q'</span><span class="sh_symbol">.</span><span class="sh_function">split</span><span class="sh_symbol">(</span><span class="sh_string">' '</span><span class="sh_symbol">)</span>
  <span class="sh_keyword">var</span> hits <span class="sh_symbol">=</span> completions<span class="sh_symbol">.</span><span class="sh_function">filter</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">(</span>c<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span> <span class="sh_keyword">return</span> c<span class="sh_symbol">.</span><span class="sh_function">indexOf</span><span class="sh_symbol">(</span>line<span class="sh_symbol">)</span> <span class="sh_symbol">==</span> <span class="sh_number">0</span> <span class="sh_cbracket">}</span><span class="sh_symbol">)</span>
  <span class="sh_comment">// show all completions if none found</span>
  <span class="sh_keyword">return</span> <span class="sh_symbol">[</span>hits<span class="sh_symbol">.</span>length <span class="sh_symbol">?</span> hits <span class="sh_symbol">:</span> completions<span class="sh_symbol">,</span> line<span class="sh_symbol">]</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="782d052ce78e98d48941db1527842baa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>completer</code> 也可以运行在异步模式下，此时接受两个参数：

</p>
</div>

<div class="translate-section" data-hash="05163ccb4b97f3f027a81be61a81bd47"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">function</span> <span class="sh_function">completer</span><span class="sh_symbol">(</span>linePartial<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">callback</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_symbol">[[</span><span class="sh_string">'123'</span><span class="sh_symbol">],</span> linePartial<span class="sh_symbol">]);</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="00dee1ae790f36229bc3e76a8d051a93"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>为了接受用户的输入，<code>createInterface</code> 通常跟 <code>process.stdin</code> 和 <code>process.stdout</code> 一块使用：

</p>
</div>

<div class="translate-section" data-hash="357b0a67d0f441fedf93f81c6369b93a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> readline <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'readline'</span><span class="sh_symbol">);</span>
<span class="sh_keyword">var</span> rl <span class="sh_symbol">=</span> readline<span class="sh_symbol">.</span><span class="sh_function">createInterface</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  input<span class="sh_symbol">:</span> process<span class="sh_symbol">.</span>stdin<span class="sh_symbol">,</span>
  output<span class="sh_symbol">:</span> process<span class="sh_symbol">.</span>stdout
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="2eb87db20983af57d2a94bbaf52c3266"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一旦你有一个 readline 实例，你通常会监听 "line" 事件。

</p>
</div>

<div class="translate-section" data-hash="b55fb89b11d7faa3102df3f4403d1244"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果这个实例中<code>terminal</code>为<code>true</code>，而且<code>output</code>流定义了一个<code>output.columns</code>属性，那么<code>output</code>流将获得最好的兼容性，并且，当columns变化时(当它是TTY时，<code>process.stdout</code>会自动这样做)，会在<code>output</code>上触发一个 <code>"resize"</code>事件。

</p>
</div>

<div class="translate-section" data-hash="fff427462ea6c1868a9cc90ea7c9752e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: 接口<span><a href="#all_70424" id="all_70424">#</a></span></h2>
</div>

<div class="translate-section" data-hash="58f248b60708c29abd9bb4858754f516"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>代表一个有输入输出流的 readline 接口的类。

</p>
</div>

<div class="translate-section" data-hash="1fb7fec4921c734a158c2683cdf077ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>rl.setPrompt(prompt)<span><a href="#all_rl_setprompt_prompt_1408" id="all_rl_setprompt_prompt_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="0a3ca77e844475aaf4dbb84c97af70e5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>设置提示符，例如当你在命令行运行 <code>node</code> 时，你会看到 <code>&gt; </code> ，这就是 node 的提示符。

</p>
</div>

<div class="translate-section" data-hash="f429633d345cfa59fbad0fae51339610"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>rl.prompt([preserveCursor])<span><a href="#all_rl_prompt_preservecursor_1408" id="all_rl_prompt_preservecursor_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="76ec2a9947a39e2aa8073e71a420c2d8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>为用户输入准备好readline，将现有的<code>setPrompt</code>选项放到新的一行，让用户有一个新的地方开始输入。将<code>preserveCursor</code>设为<code>true</code>来防止光标位置被重新设定成<code>0</code>。

</p>
</div>

<div class="translate-section" data-hash="8656935fd030806e6f3fe99b59e7f6ed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果暂停，也会使用 <code>createInterface</code> 重置 <code>input</code> 流。

</p>
</div>

<div class="translate-section" data-hash="931b55c15312aca7ce06080ac737e405"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>rl.question(query, callback)<span><a href="#all_rl_question_query_callback_1408" id="all_rl_question_query_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="284a9136b3d0c7eb76574e710c7ac46e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>预处理 <code>query</code>提示 ，用户应答时调用 <code>callback</code> . 当类型被确定后，将查询结果显示给用户, 然后在用户应答时调用 <code>callback</code>.

</p>
</div>

<div class="translate-section" data-hash="8b5ea2eceb4e00d0b3c7bb699f153e4b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果暂停，也会使用 <code>createInterface</code> 重置 <code>input</code> 流。

</p>
</div>

<div class="translate-section" data-hash="0cf4a24ebfd6350fbc2c885b888a388b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用示例：

</p>
</div>

<div class="translate-section" data-hash="798c5cf1392a7196fdc6d37476d4ef2f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">interface</span><span class="sh_symbol">.</span><span class="sh_function">question</span><span class="sh_symbol">(</span><span class="sh_string">'What is your favorite food?'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>answer<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Oh, so your favorite food is '</span> <span class="sh_symbol">+</span> answer<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="0ab011e89a1d8fdd072a1359bdaaec60"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>rl.pause()<span><a href="#all_rl_pause_1408" id="all_rl_pause_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="fe7b56d55528628877380544e6c564c3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>暂停 readline 的输入流 (<code>input</code> stream), 如果有需要稍后还可以恢复。

</p>
</div>

<div class="translate-section" data-hash="2ed52dd8547bbe6127d9a388a57f494f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>rl.resume()<span><a href="#all_rl_resume_1408" id="all_rl_resume_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="cd64d487664e2506801862ced308440c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>恢复 readline 的输入流 (<code>input</code> stream).

</p>
</div>

<div class="translate-section" data-hash="36fd31224e679357e7adb465badc2440"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>rl.close()<span><a href="#all_rl_close_1408" id="all_rl_close_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="13bf8a3d45d4754742133453cc8f1f27"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>关闭接口实例 (<code>Interface</code> instance), 放弃控制输入输出流。"close" 事件会被触发。

</p>
</div>

<div class="translate-section" data-hash="c5ba2b188b9ff0e5e33ae02467d4742e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>rl.write(data, [key])<span><a href="#all_rl_write_data_key_1408" id="all_rl_write_data_key_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="ee86b405b982131568c7549de62a9550"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>将 <code>data</code> 写入到 <code>output</code> 流。<code>key</code> 是一个代表键序列的对象；当终端是一个 TTY 时可用。

</p>
</div>

<div class="translate-section" data-hash="197d3be97587ec8c126f2d2bfc7465c5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果暂停，也会重置 <code>input</code> 流。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="a039823b909a84b9ba191625d33e2861"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>rl<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_string">'Delete me!'</span><span class="sh_symbol">);</span>
<span class="sh_comment">// 模仿 ctrl+u快捷键，删除之前所写行 </span>
rl<span class="sh_symbol">.</span><span class="sh_function">write</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span>ctrl<span class="sh_symbol">:</span> <span class="sh_keyword">true</span><span class="sh_symbol">,</span> name<span class="sh_symbol">:</span> <span class="sh_string">'u'</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="d6941dfd1e35d6f628e23d3ce3b7b169"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>Events<span><a href="#all_events_1408" id="all_events_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="05bba460dc5e0d825e9b1fd9422e1cdc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Event: 'line'<span><a href="#all_event_line_1408" id="all_event_line_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="5adf46a7dc4f7aed16b35e87dae98be4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (line) {}</code>

</p>
</div>

<div class="translate-section" data-hash="c1095c8aeb27327a1d3720d2e3755d74"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在 <code>input</code> 流接受了一个 <code>\n</code> 时触发，通常在用户敲击回车或者返回时接收。
这是一个监听用户输入的利器。

</p>
</div>

<div class="translate-section" data-hash="f787300758ed012018e1d3f2a5cc352a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>监听 <code>line</code> 事件的示例:

</p>
</div>

<div class="translate-section" data-hash="eddfc6424695c71bb16bedd85cc58c48"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'line'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>cmd<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'You just typed: '</span><span class="sh_symbol">+</span>cmd<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="cacb3108402e9e2b2cbf924b0f973031"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'pause'<span><a href="#all_pause_1408" id="all_pause_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d871d7a90933d8ce9373836bfef30cd3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function () {}</code>

</p>
</div>

<div class="translate-section" data-hash="b8d74aef833f088c2a9fb890e0296ffc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>不论何时，只要输入流被暂停就会触发。

</p>
</div>

<div class="translate-section" data-hash="73d12d9a272915b5136c6379a78a1224"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>而在输入流未被暂停，但收到 <code>SIGCONT</code> 信号时也会触发。 (详见 <code>SIGTSTP</code> 和 <code>SIGCONT</code> 事件)

</p>
</div>

<div class="translate-section" data-hash="e45dc2d9849df2abd26f1e44355ba1ee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>监听 <code>pause</code> 事件的示例：

</p>
</div>

<div class="translate-section" data-hash="8c3ad47d788e5800ca191ff518fa5987"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'pause'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Readline 输入暂停.'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="446ed823ef86b966df9a6077dc5217a9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'resume'<span><a href="#all_resume_1408" id="all_resume_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d871d7a90933d8ce9373836bfef30cd3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function () {}</code>

</p>
</div>

<div class="translate-section" data-hash="a67a141effca71142cdda2864a1cbcd0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>不论何时，只要输入流重新启用就会触发。

</p>
</div>

<div class="translate-section" data-hash="fc76505915e0c859034f5bdbd403e3bd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>监听 <code>resume</code> 事件的示例：

</p>
</div>

<div class="translate-section" data-hash="17af1e23500d4fe0c553482a3bf0472c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'resume'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Readline 恢复.'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="d2b8af4d8afc211663a4341cca53b503"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'close'<span><a href="#all_close_12679" id="all_close_12679">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d871d7a90933d8ce9373836bfef30cd3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function () {}</code>

</p>
</div>

<div class="translate-section" data-hash="63661a9ad2e77e634922c32628764994"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当 <code>close()</code> 被调用时触发。

</p>
</div>

<div class="translate-section" data-hash="962b152e096d597b4476928d882bcb87"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当 <code>input</code>流接收到"结束"事件时也会被触发. 一旦触发，应当认为<code>Interface</code>实例
 "结束" . 例如, 当<code>input</code>流接收到<code>^D</code>时, 分别被认为<code>EOT</code>.

</p>
</div>

<div class="translate-section" data-hash="ba69ef1f7648756e7e3feaa20b770d41"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当 <code>input</code> 流接收到一个 <code>^C</code> 时，即使没有 <code>SIGINT</code> 监听器，也会触发这个事件，分别被称为 <code>SIGINT</code> 。

</p>
</div>

<div class="translate-section" data-hash="c24859520b90f9cf784ca98b839c7c6a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Event: 'SIGINT'<span><a href="#all_event_sigint_1408" id="all_event_sigint_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d871d7a90933d8ce9373836bfef30cd3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function () {}</code>

</p>
</div>

<div class="translate-section" data-hash="2b5fcee9f214d4e53bbf2c0ab8f3e079"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>只要 <code>input</code>流 接收到<code>^C</code>就会被触发, 分别被认为<code>SIGINT</code>.当<code>input</code>流接收到<code>SIGINT</code>时, 
 如果没有 <code>SIGINT</code> 事件监听器，<code>pause</code> 将会被触发.

</p>
</div>

<div class="translate-section" data-hash="7f135a18651f35a74a0020d4f58e3e20"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>监听 <code>SIGINT</code> 信号的示例：

</p>
</div>

<div class="translate-section" data-hash="e55ac2bac1f25689bbf2b37a1b02062c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'SIGINT'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  rl<span class="sh_symbol">.</span><span class="sh_function">question</span><span class="sh_symbol">(</span><span class="sh_string">'Are you sure you want to exit?'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>answer<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>answer<span class="sh_symbol">.</span><span class="sh_function">match</span><span class="sh_symbol">(</span><span class="sh_regexp">/^y(es)?$/i</span><span class="sh_symbol">))</span> rl<span class="sh_symbol">.</span><span class="sh_function">pause</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="68ffdadaed4d39461c5bcc19032a747a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Event: 'SIGTSTP'<span><a href="#all_event_sigtstp_1408" id="all_event_sigtstp_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d871d7a90933d8ce9373836bfef30cd3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function () {}</code>

</p>
</div>

<div class="translate-section" data-hash="89f6d4551ee64b1d589388154e5b65e7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><strong>该功能不支持 windows 操作系统</strong>

</p>
</div>

<div class="translate-section" data-hash="0e24df2e7b1c0f297197f51f4c188396"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>只要<code>input</code>流接收到<code>^Z</code>时就被触发, 分别被认为<code>SIGTSTP</code>. 当<code>input</code>流接收到
 <code>SIGTSTP</code>时，如果没有<code>SIGTSTP</code> 事件监听器 ,程序会被发送到后台 .

</p>
</div>

<div class="translate-section" data-hash="4df31baa6942745d4bddad10f71deba6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当程序使用参数 <code>fg</code> 重启，<code>pause</code> 和 <code>SIGCONT</code> 事件将会被触发。
你可以使用两者中任一事件来恢复流。

</p>
</div>

<div class="translate-section" data-hash="f594bea680b4f69ecdef9cc0d957ce8c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在程序被发送到后台之前，如果流暂停，<code>pause</code> 和 <code>SIGCONT</code> 事件将不会被触发。

</p>
</div>

<div class="translate-section" data-hash="949104b047538332a7ac77f4b9459181"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>监听 <code>SIGTSTP</code> 的示例：

</p>
</div>

<div class="translate-section" data-hash="a7b05c05fe027981095c355f8c2a522b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'SIGTSTP'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 这将重载 SIGTSTP并防止程序转到</span>
  <span class="sh_comment">// 后台.</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Caught SIGTSTP.'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="2eeec0e1e854306579fa776ff78ece8f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>Event: 'SIGCONT'<span><a href="#all_event_sigcont_1408" id="all_event_sigcont_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d871d7a90933d8ce9373836bfef30cd3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function () {}</code>

</p>
</div>

<div class="translate-section" data-hash="89f6d4551ee64b1d589388154e5b65e7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><strong>该功能不支持 windows 操作系统</strong>

</p>
</div>

<div class="translate-section" data-hash="da07050fa4a3cee6aea9606cfc9d1c2f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一旦 <code>input</code>流中含有 <code>^Z</code>并被发送到后台就会触发,分别被认为
 <code>SIGTSTP</code>, 然后继续执行<code>fg(1)</code>. 这一事件只有在流被发送后台之前没有暂停才会触发.

</p>
</div>

<div class="translate-section" data-hash="0cc0433e2e6daa62656a40c1c24c3cfa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>监听 <code>SIGCONT</code> 的示例:

</p>
</div>

<div class="translate-section" data-hash="d870d4eb35a4030efd3cad435c61ba27"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'SIGCONT'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// `prompt` 将会自动恢复流</span>
  rl<span class="sh_symbol">.</span><span class="sh_function">prompt</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="21ceb2b82228a06926a4f0578319cffd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>示例: Tiny CLI<span><a href="#all_tiny_cli_1408" id="all_tiny_cli_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="7ad4414f244309d14fd4dffae8582f8b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这里有一个使用所有方法精心设计的小命令行程序：

</p>
</div>

<div class="translate-section" data-hash="c1b60f630e415c81fb29feb81865b160"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>rl<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'line'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>line<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">switch</span><span class="sh_symbol">(</span>line<span class="sh_symbol">.</span><span class="sh_function">trim</span><span class="sh_symbol">())</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">case</span> <span class="sh_string">'hello'</span><span class="sh_symbol">:</span>
      console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'world!'</span><span class="sh_symbol">);</span>
      <span class="sh_keyword">break</span><span class="sh_symbol">;</span>
    <span class="sh_keyword">default</span><span class="sh_symbol">:</span>
      console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Say what? I might have heard `'</span> <span class="sh_symbol">+</span> line<span class="sh_symbol">.</span><span class="sh_function">trim</span><span class="sh_symbol">()</span> <span class="sh_symbol">+</span> <span class="sh_string">'`'</span><span class="sh_symbol">);</span>
      <span class="sh_keyword">break</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>
  rl<span class="sh_symbol">.</span><span class="sh_function">prompt</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'close'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Have a great day!'</span><span class="sh_symbol">);</span>
  process<span class="sh_symbol">.</span><span class="sh_function">exit</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>
<div class="translate-section" data-hash="e534f001a6aaeb81ad2b588607487c3a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>REPL<span><a href="#all_repl_2816" id="all_repl_2816">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<div class="translate-section" data-hash="b3053f5f9c813e628db75d935b2456e5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个 Read-Eval-Print-Loop（REPL，读取-执行-输出循环）既可用于独立程序也可很容易地被集成到其它程序中。REPL 提供了一种交互地执行 JavaScript 并查看输出的方式。它可以被用作调试、测试或仅仅尝试某些东西。

</p>
</div>

<div class="translate-section" data-hash="2ab94b8af156d9ff091bfb97acced29b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在命令行中不带任何参数执行 <code>node</code> 您便会进入 REPL。它提供了一个简单的 Emacs 行编辑。

</p>
</div>

<div class="translate-section" data-hash="bf73673a724da90366a766fc507587d6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>mjr<span class="sh_symbol">:~</span>$ node
Type <span class="sh_string">'.help'</span> <span class="sh_keyword">for</span> options<span class="sh_symbol">.</span>
<span class="sh_symbol">&gt;</span> a <span class="sh_symbol">=</span> <span class="sh_symbol">[</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">,</span> <span class="sh_number">3</span><span class="sh_symbol">];</span>
<span class="sh_symbol">[</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">2</span><span class="sh_symbol">,</span> <span class="sh_number">3</span> <span class="sh_symbol">]</span>
<span class="sh_symbol">&gt;</span> a<span class="sh_symbol">.</span><span class="sh_function">forEach</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span> <span class="sh_symbol">(</span>v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
<span class="sh_symbol">...</span>   console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>v<span class="sh_symbol">);</span>
<span class="sh_symbol">...</span>   <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_number">1</span>
<span class="sh_number">2</span>
<span class="sh_number">3</span></code></pre>
</div>

<div class="translate-section" data-hash="c7949ca98332298f270a63075a75fdee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>若想使用高级的编辑模式，设置环境变量 <code>NODE_NO_READLINE=1</code> 后运行 node。这将在允许你在可以使用 <code>rlwrap</code> 的终端上，启动高级的 REPL 模式 (the main and debugger REPL)。

</p>
</div>

<div class="translate-section" data-hash="a29328bfa3d8c5599e6578f9028fec2c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例如，您可以将下列代码加入到您的 bashrc 文件：

</p>
</div>

<div class="translate-section" data-hash="834500e2bd1d50eaa867efdd7829d260"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>alias node<span class="sh_symbol">=</span><span class="sh_string">"env NODE_NO_READLINE=1 rlwrap node"</span></code></pre>
</div>

<div class="translate-section" data-hash="d27544913a71ae02dc7840a91d6efd11"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>repl.start(options)<span><a href="#all_repl_start_options_1408" id="all_repl_start_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="5d86f61c7c5b7eca3a55ff5f7e484173"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>启动并返回一个 <code>REPLServer</code> 实例。接受一个包含如下内容的 "options" 对象：

</p>
</div>

<div class="translate-section" data-hash="9baf5783b8b70e72fc0ce9dc81de5d75"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>prompt</code> - 所有输入输出的提示符。默认是 <code>&gt; </code>.</li>
</ul>
</div>

<div class="translate-section" data-hash="9cfcac1e16bc03b82ef6c1ea04e278d6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>input</code> - 监听的可读流。默认指向标准输入流 <code>process.stdin</code>。</li>
</ul>
</div>

<div class="translate-section" data-hash="57b1b2612c6df4a37eadde9cb8276fdc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>output</code> - 用来输出数据的可写流。默认指向标准输出流 <code>process.stdout</code>。</li>
</ul>
</div>

<div class="translate-section" data-hash="9e2e8f916995700780c08b327797a1e6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>terminal</code> - 如果 <code>stream</code> 应该被当做 TTY 来对待并且有 ANSI/VT100 转义时，则传 <code>true</code>。 默认使用 <code>output</code> 实例的 <code>isTTY</code>来检查。</li>
</ul>
</div>

<div class="translate-section" data-hash="5521458d0707e64f958128f608ef770f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>eval</code> - 用来对每一行进行求值的函数。 默认为<code>eval()</code>的一个异步包装函数。下面给出一个自定义<code>eval</code>的例子。</li>
</ul>
</div>

<div class="translate-section" data-hash="179b8f26e3e6432faa76da965e824d5b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>useColors</code> - 一个布尔值，表明了<code>writer</code>函数是否会输出颜色。如果设定了一个不同的<code>writer</code>函数，那么这不会产生任何影响。默认为repl的<code>terminal</code>值。</li>
</ul>
</div>

<div class="translate-section" data-hash="273e7f7567eb0fed1083c813b0703af7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>useGlobal</code> - 如果设定为<code>true</code>，那么repl就会使用<code>global</code>对象而不是在一个独立环境里运行脚本。默认为<code>false</code>。</li>
</ul>
</div>

<div class="translate-section" data-hash="9dbb07b7cf6630ff38e3dece7d753323"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>ignoreUndefined</code> - 如果设定为<code>true</code>，那么repl将不会输出未定义命令的返回值。默认为<code>false</code>。</li>
</ul>
</div>

<div class="translate-section" data-hash="81aad9463ed6fe18cfd90e89421dfcc8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>writer</code> - 每一个命令被求值时都会调用此函数，而该函数会返回显示的格式（包括颜色）。默认为<code>util.inspect</code>。
<code>util.inspect</code>.</li>
</ul>
</div>

<div class="translate-section" data-hash="1391ad6e0761d19937f13f4df630b8ad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>你可以使用你自己的<code>eval</code>函数，只有它有如下的签名：

</p>
</div>

<div class="translate-section" data-hash="1190135c8a1904ddfedec3b52b94a474"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">function</span> <span class="sh_predef_func">eval</span><span class="sh_symbol">(</span>cmd<span class="sh_symbol">,</span> context<span class="sh_symbol">,</span> filename<span class="sh_symbol">,</span> callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">callback</span><span class="sh_symbol">(</span><span class="sh_keyword">null</span><span class="sh_symbol">,</span> result<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="bfc985e630335f77e08ae0dbf08c6d7f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>多个REPL可以在同一个运行的节点实例上打开。它们共享同一个global对象，但分别有各自的I/O。

</p>
</div>

<div class="translate-section" data-hash="273b32586cbf9f1b5aea6f3180fc616d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>以下是通过标准输入流（stdin）、Unix socket 以及 TCP socket 三种情况来启动 REPL 的例子:

</p>
</div>

<div class="translate-section" data-hash="19c65db2510acb40a7e44216cce858da"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>net<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span> <span class="sh_symbol">(</span>socket<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  connections <span class="sh_symbol">+=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
  repl<span class="sh_symbol">.</span><span class="sh_function">start</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
    prompt<span class="sh_symbol">:</span> <span class="sh_string">"node via TCP socket&gt; "</span><span class="sh_symbol">,</span>
    input<span class="sh_symbol">:</span> socket<span class="sh_symbol">,</span>
    output<span class="sh_symbol">:</span> socket
  <span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">5001</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="fad42341445df4503df8b099bc385aa7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>从命令行运行该程序，将会从标准输入流启动 REPL 模式。 其他的 REPL 客户端也可以通过 Unix socket 或者 TCP socket 连接。 <code>telnet</code> 常用于连接 TCP sockets，而 <code>socat</code> 则可以同时用来连接 Unix 和 TCP sockets。

</p>
</div>

<div class="translate-section" data-hash="b1955dc84cf6ca9f0bd3958e67d3d7f6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>通过从一个Unix的套接字服务器而不是stdin来启动REPL, 你可以连接到一个长久运行的node进程而不不需要重启。

</p>
</div>

<div class="translate-section" data-hash="01a67afc96acba99549af655693847bf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个在<code>net.Server</code>和<code>net.Socket</code>实例上运行的"全功能"(<code>terminal</code>)REPL的例子可以查看这里： <a href="https://gist.github.com/2209310">https://gist.github.com/2209310</a>

</p>
</div>

<div class="translate-section" data-hash="1a29708f5c7ca66882fa9527e8e2b349"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个在<code>curl(1)</code>上运行的REPL实例的例子可以查看这里： <a href="https://gist.github.com/2053342">https://gist.github.com/2053342</a>

</p>
</div>

<div class="translate-section" data-hash="c450008f1e4a67d83fe028d35a6ed683"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'exit'<span><a href="#all_exit_7041" id="all_exit_7041">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d871d7a90933d8ce9373836bfef30cd3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function () {}</code>

</p>
</div>

<div class="translate-section" data-hash="fe07e7186d85ee1b1478b2608f3f2a26"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当用户通过任意预定义的方式退出REPL，该事件被分发。比如，在repl里输入<code>.exit</code>，按Ctrl+C两次来发送SIGINT信号，或者在<code>input</code>流上按Ctrl+D来发送"end"。

</p>
</div>

<div class="translate-section" data-hash="62c60612c4cade1c920c3b230bfdd399"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>监听 <code>exit</code> 事件的例子：

</p>
</div>

<div class="translate-section" data-hash="fa8c50635280f9c7a08cb23d33e691b5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>r<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'从 REPL 得到 "exit" 事件！'</span><span class="sh_symbol">);</span>
  process<span class="sh_symbol">.</span><span class="sh_function">exit</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="3659b690f7f548bc7a574c63afd3eb9d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'reset'<span><a href="#all_reset_1408" id="all_reset_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="dfc0d20bf906df3e87847f9e3682007d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function (context) {}</code>

</p>
</div>

<div class="translate-section" data-hash="df23f0bf5e0d8080afc59e49f083c4fe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当REPL的上下文被重置时，该事件被分发。当你打<code>.clear</code>命令时这种情况就会发生。如果你以<code>{ useGlobal: true }</code>来启动repl，那么这个事件就永远不会被分发。

</p>
</div>

<div class="translate-section" data-hash="db781f21cf42dba145658277965cdcb3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>监听<code>reset</code>的例子：

</p>
</div>

<div class="translate-section" data-hash="c30390d8ad0db949c2ec9896169169ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 当一个新的上下文被创建时，扩充这个上下文。</span>
r<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'reset'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>context<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'repl有一个新的上下文'</span><span class="sh_symbol">);</span>
  someExtension<span class="sh_symbol">.</span><span class="sh_function">extend</span><span class="sh_symbol">(</span>context<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="fae6947ef2b4624a1497854544717ad7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>REPL 特性<span><a href="#all_repl_2817" id="all_repl_2817">#</a></span></h2>
</div>

<!-- type=misc -->

<div class="translate-section" data-hash="1bab699569321ce88a4003e7e932477b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在REPL里，Control+D会退出。可以输入多行表达式。对于全局变量和本地变量都支持自动缩进。

</p>
</div>

<div class="translate-section" data-hash="10de6a5e450a62015078b97fc08b6a6a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>特殊变量 <code>_</code> (下划线)储存了上一个表达式的结果。

</p>
</div>

<div class="translate-section" data-hash="45310871ca713b2d52beb3e970554ffd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_symbol">&gt;</span> <span class="sh_symbol">[</span> <span class="sh_string">"a"</span><span class="sh_symbol">,</span> <span class="sh_string">"b"</span><span class="sh_symbol">,</span> <span class="sh_string">"c"</span> <span class="sh_symbol">]</span>
<span class="sh_symbol">[</span> <span class="sh_string">'a'</span><span class="sh_symbol">,</span> <span class="sh_string">'b'</span><span class="sh_symbol">,</span> <span class="sh_string">'c'</span> <span class="sh_symbol">]</span>
<span class="sh_symbol">&gt;</span> _<span class="sh_symbol">.</span>length
<span class="sh_number">3</span>
<span class="sh_symbol">&gt;</span> _ <span class="sh_symbol">+=</span> <span class="sh_number">1</span>
<span class="sh_number">4</span></code></pre>
</div>

<div class="translate-section" data-hash="6d2f8a5ca5e6e0a2dd4ecd4884d8297e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>REPL提供了访问global域里所有变量的权限。通过将一个变量赋值给与每一个<code>REPLServer</code>关联的<code>context</code>对象，你可以显式地将一个变量暴露给REPL。例如：

</p>
</div>

<div class="translate-section" data-hash="3acd410b0210401b3f6be9f44f9c6e0c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>repl<span class="sh_symbol">.</span><span class="sh_function">start</span><span class="sh_symbol">(</span><span class="sh_string">"&gt; "</span><span class="sh_symbol">).</span>context<span class="sh_symbol">.</span>m <span class="sh_symbol">=</span> msg<span class="sh_symbol">;</span></code></pre>
</div>

<div class="translate-section" data-hash="187aea19e7d8525885a426bdbb4271ee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在<code>context</code>对象里的东西，会在REPL以本地变量的形式出现。

</p>
</div>

<div class="translate-section" data-hash="9d4e6136f89c6e28ff02dc3c5038bf72"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>mjr<span class="sh_symbol">:~</span>$ node repl_test<span class="sh_symbol">.</span>js
<span class="sh_symbol">&gt;</span> m
<span class="sh_string">'message'</span></code></pre>
</div>

<div class="translate-section" data-hash="424475bf681cc10b71089c9c611668d0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>有几个特殊的REPL命令：

</p>
</div>

<div class="translate-section" data-hash="16b5111b695e7cdc00ae1a404051b6c0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>.break</code> - 当你输入一个多行表达式时，有时你会脑子突然断路或者你不想完成这个表达式了。<code>break</code>让你可以重头再来。</li>
<li><code>.clear</code> - 重置<code>context</code>对象为一个空对象，并且清除所有的多行表达式。</li>
<li><code>.exit</code> - 关闭I/O流，使得REPL退出。</li>
<li><code>.help</code> - 显示这个特殊命令的列表。</li>
<li><code>.save</code> - 将当前的REPL会话保存到一个文件<blockquote>
<p>.save ./file/to/save.js</p>
</blockquote>
</li>
<li><code>.load</code> - 将一个文件装载到当前的REPL会话。<blockquote>
<p>.load ./file/to/load.js</p>
</blockquote>
</li>
</ul>
</div>

<div class="translate-section" data-hash="0fcc9f8bc865c5a55d5f320548506bed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>下面的组合键在REPL中有以下效果：

</p>
</div>

<div class="translate-section" data-hash="800f3730083357e2702e6a93a86c4579"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>&lt;ctrl&gt;C</code> - 与<code>.break</code>关键字类似。终止正在执行的命令。在一个空行连按两次会强制退出。</li>
<li><code>&lt;ctrl&gt;D</code> - 与<code>.exit</code>关键字类似。</li>
</ul>
</div>
<div class="translate-section" data-hash="b43139672c5e66564b0868a2ca9edfb4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>执行 JavaScript<span><a href="#all_javascript_1408" id="all_javascript_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<!--name=vm-->

<div class="translate-section" data-hash="c76ce3986104b565ff5b24a734445f1e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>你可以这样引入此模块：

</p>
</div>

<div class="translate-section" data-hash="09a1b5b8e631bcc619146728e630cbca"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> vm <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'vm'</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="c7dc867d22736e1d1a4813d6b3d9fd1e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>JavaScript 代码可以被编译并立即执行，也可以在编译后保存，留到稍后执行。

</p>
</div>

<div class="translate-section" data-hash="cef415d4a899a99b9271b16f38faac87"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>vm.runInThisContext(code, [options])<span><a href="#all_vm_runinthiscontext_code_options_1408" id="all_vm_runinthiscontext_code_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="4594aa4ac12d9eb154237713d637277f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>vm.runInThisContext()</code> 对 <code>code</code> 进行编译、运行并返回结果。
 被运行的代码没有对本地作用域 (local scope) 的访问权限，但是可以访问当前的 <code>global</code> 对象。

</p>
</div>

<div class="translate-section" data-hash="609299c70cbd4cd970ce061e12c496eb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 <code>vm.runInThisContext</code> 和 <code>eval</code> 分别执行相同的代码：

</p>
</div>

<div class="translate-section" data-hash="13d0ecbc18ceb0bf829120078fa5904b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// vmResult: 'vm', localVar: 'initial value'</span>
<span class="sh_comment">// evalResult: 'eval', localVar: 'eval'</span></code></pre>
</div>

<div class="translate-section" data-hash="02b66232c7d48d62539352387cb122b5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>vm.runInThisContext</code> 无法访问本地作用域，因此 <code>localVar</code> 没有被改变。
<code>eval</code> 可以访问本地作用域，因此 <code>localVar</code> 被改变。

</p>
</div>

<div class="translate-section" data-hash="6d69ba3a377181590921a7d23a92e438"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这种情况下 <code>vm.runInThisContext</code> 可以看作一种 <a href="http://es5.github.io/#x10.4.2">间接的 <code>eval</code> 调用</a>，
如 <code>(0,eval)('code')</code>。但是 <code>vm.runInThisContext</code> 也提供下面几个额外的参数：

</p>
</div>

<div class="translate-section" data-hash="0f101b9438c653fd4fbcde361a874709"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>filename</code>: 允许您更改显示在站追踪 (stack trace) 中的文件名</li>
<li><code>displayErrors</code>: 是否在抛出异常前输出带高亮错误代码行的错误信息到 stderr。
将会捕捉所有在编译 <code>code</code> 的过程中产生的语法错误以及执行过程中产生的运行时错误。
默认为 <code>true</code></li>
<li><code>timeout</code>: 以毫秒为单位规定 <code>code</code> 允许执行的时间。在执行过程中被终止时会有 <code>Error</code> 抛出。</li>
</ul>
</div>

<div class="translate-section" data-hash="f25650bbd9c4f8c94046f9dc571cbf66"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

</div>

<div class="translate-section" data-hash="6e625c5309f2af13b73c9e77f115f948"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>vm.createContext([sandbox])<span><a href="#all_vm_createcontext_sandbox_1408" id="all_vm_createcontext_sandbox_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ecab1900389e87cf98ecfb5a4f56d15b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如提供 <code>sandbox</code> 对象则将沙箱 (sandbox) 对象 “上下文化 (contextify)” 供 <code>vm.runInContext</code> 或者 <code>script.runInContext</code> 使用。
以此方式运行的脚本将以 <code>sandbox</code> 作为全局对象，该对象将在保留其所有的属性的基础上拥有标准 <a href="http://es5.github.io/#x15.1">全局对象</a> 所拥有的内置对象和函数。
在由 vm 模块运行的脚本之外的地方 <code>sandbox</code> 将不会被改变。

</p>
</div>

<div class="translate-section" data-hash="661478c5ded4f2a21ad05c110d3670a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果没有提供沙箱对象，则返回一个新建的、没有任何对象被上下文化的可用沙箱。

</p>
</div>

<div class="translate-section" data-hash="400e5e8ba9907bf0787ca376d713b53a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>此函数可用于创建可执行多个脚本的沙箱，
比如，在模拟浏览器的时候可以使用该函数创建一个用于表示 window 全局对象的沙箱，
并将所有 <code>&lt;script&gt;</code> 标签放入沙箱执行。

</p>
</div>

<div class="translate-section" data-hash="56bfa138fc610a8f789331546c8b03be"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

</div>

<div class="translate-section" data-hash="ad9c65079cbeabb898c8bad53bf1816b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>vm.isContext(sandbox)<span><a href="#all_vm_iscontext_sandbox_1408" id="all_vm_iscontext_sandbox_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="eed1f9a4c2844e1ac04d0df6ef58d1b5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回沙箱对象是否已经通过 <code>vm.createContext</code> 上下文化 (contextified)

</p>
</div>

<div class="translate-section" data-hash="1c98d5ac2bbdcfa163bfe40dd24ee0f0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>vm.runInContext(code, contextifiedSandbox, [options])<span><a href="#all_vm_runincontext_code_contextifiedsandbox_options_1408" id="all_vm_runincontext_code_contextifiedsandbox_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="fa184a5cb74ab47677cc6fea4003a563"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>vm.runInContext</code> 编译 <code>code</code> 放入 <code>contextifiedSandbox</code> 执行并返回执行结果。
被执行的代码对 本地作用域 (local scope) 没有访问权。
<code>contextifiedSandbox</code> 必须在使用前通过 <code>vm.createContext</code> 上下文化，用作 <code>code</code> 的全局对象。

</p>
</div>

<div class="translate-section" data-hash="8cc73c1c974d1adc1aa700fbad4e282f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>vm.runInContext</code> 使用与 <code>vm.runInThisContext</code> 相同的 选项 (<code>options</code>)

</p>
</div>

<div class="translate-section" data-hash="339865f40e0d7a83d2b7fe6b82985ca5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：在同一个上下文中编译并执行不同的脚本

</p>
</div>

<div class="translate-section" data-hash="9dfcd128dd799669beacd6b1b7aa4cd9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// { globalVar: 1024 }</span></code></pre>
</div>

<div class="translate-section" data-hash="3e8dce856944020c5cb4ab86a9e759c0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>执行不可信代码 (untrusted code) 是一件充满技巧而且需要非常小心的工作。
<code>vm.runInContext</code> 十分好用，但是安全地运行不可信代码还需要将这些代码放入单独的进程里面执行。

</p>
</div>

<div class="translate-section" data-hash="b330dbed331f9ce62bafc21689c44ba2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>vm.runInNewContext(code, [sandbox], [options])<span><a href="#all_vm_runinnewcontext_code_sandbox_options_1408" id="all_vm_runinnewcontext_code_sandbox_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="27f695659467f99036fe515ba21eda86"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>vm.runInNewContext</code> 首先编译 <code>code</code>，若提供 <code>sandbox</code> 则将 <code>sandbox</code> 上下文化，若未提供则创建一个新的沙箱并上下文化，
然后将代码放入沙箱作为全局对象的上下文内执行并返回结果。

</p>
</div>

<div class="translate-section" data-hash="888ea2385178d1ddd8cb100c4f6f36c7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>vm.runInNewContext</code> 使用与 <code>vm.runInThisContext</code> 相同的 选项 (<code>options</code>)

</p>
</div>

<div class="translate-section" data-hash="e3bc7ba80d2570cdebcff7e840b6ba8e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例: 编译并执行一段“自增一个全局变量然后创建一个全局变量”的代码。这些被操作的全局变量会被保存在沙箱中。

</p>
</div>

<div class="translate-section" data-hash="225e89f941d5299244d35575fe5feb63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// { animal: 'cat', count: 3, name: 'kitty' }</span></code></pre>
</div>

<div class="translate-section" data-hash="c4ae78408e68d845002b193c18741afc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>执行不可信代码 (untrusted code) 是一件充满技巧而且需要非常小心的工作。
<code>vm.runInNewContext</code> 十分好用，但是安全地运行不可信代码还需要将这些代码放入单独的进程里面执行。

</p>
</div>

<div class="translate-section" data-hash="acc1952ca28e8fbcaa29e4d5bf734cca"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: Script<span><a href="#all_script_1408" id="all_script_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="438b478dccdd9cc0b26b450ab6d76df1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用于存放预编译脚本的类，可将预编译代码放入沙箱执行。

</p>
</div>

<div class="translate-section" data-hash="700d0a4f6cb5a70eba3380219dbfb66f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>new vm.Script(code, options)<span><a href="#all_new_vm_script_code_options_1408" id="all_new_vm_script_code_options_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="76484e75cdf6ef7a681b0474c93485b3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建一个新的 <code>Script</code> 用于编译 <code>code</code> 但是不执行。使用被创建的 <code>vm.Script</code> 用来表示完成编译的代码。
这份可以在后面的代码中执行多次。
返回的脚本是未绑定任何全局对象 (上下文 context) 的，全局对象仅在每一次执行的时候被绑定，执行结束后即释放绑定。

</p>
</div>

<div class="translate-section" data-hash="b3e456a6adeedc60b138a29d51e4b84d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>创建脚本的选项 (option) 有：

</p>
</div>

<div class="translate-section" data-hash="6f8cf003b75c45993938f9b329bf6a44"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>filename</code>: 允许您更改显示在站追踪 (stack trace) 中的文件名</li>
<li><code>displayErrors</code>: 是否在抛出异常前输出带高亮错误代码行的错误信息到 stderr。
仅捕捉所有在编译过程中产生的语法错误（运行时错误由运行脚本选项控制）。</li>
</ul>
</div>

<div class="translate-section" data-hash="19bfe99987f158dd35b7f5944a08b77e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>script.runInThisContext([options])<span><a href="#all_script_runinthiscontext_options_1408" id="all_script_runinthiscontext_options_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3b9e4615ae99c3ecd4499b5d57407ee1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>类似 <code>vm.runInThisContext</code> 只是作为预编译的 <code>Script</code> 对象方法。
<code>script.runInThisContext</code> 执行被编译的 <code>script</code> 并返回结果。
被运行的代码没有对本地作用域 (local scope) 的访问权限，但是可以访问当前的 <code>global</code> 对象。

</p>
</div>

<div class="translate-section" data-hash="7991dab9c9f47ce307a4964143bd29d7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例: 使用 <code>script.runInThisContext</code> 编译代码并多次执行: 

</p>
</div>

<div class="translate-section" data-hash="fb25ecab99590847c89f324d4d1cfa9d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 1000</span></code></pre>
</div>

<div class="translate-section" data-hash="09aee9e51f01da0be49bc9fe5e7b65f2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>运行脚本的选项 (option) 有: 

</p>
</div>

<div class="translate-section" data-hash="46d9e5f771a30da2160930ef88a56573"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>displayErrors</code>: 是否在抛出异常前输出带高亮错误代码行的错误信息到 stderr。
仅捕捉所有执行过程中产生的运行时错误（语法错误会在 <code>Script</code> 示例创建时就发生，因此不可能创建出带语法错误的 <code>Script</code> 对象）。</li>
<li><code>timeout</code>: 以毫秒为单位规定 <code>code</code> 允许执行的时间。在执行过程中被终止时会有 <code>Error</code> 抛出。</li>
</ul>
</div>

<div class="translate-section" data-hash="d1f9787da6923d54eaf4012254eaaffd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>script.runInContext(contextifiedSandbox, [options])<span><a href="#all_script_runincontext_contextifiedsandbox_options_1408" id="all_script_runincontext_contextifiedsandbox_options_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="877c90e2d147628db5feb4e0b52a5610"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>类似 <code>vm.runInContext</code> 只是作为预编译的 <code>Script</code> 对象方法。
<code>script.runInContext</code> 在 <code>contextifiedSandbox</code> 中执行 <code>script</code> 编译出的代码，并返回结果。
被运行的代码没有对本地作用域 (local scope) 的访问权限。

</p>
</div>

<div class="translate-section" data-hash="0d0372ec540066cdf2118016972c3382"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>script.runInContext</code> 使用与 <code>script.runInThisContext</code> 相同的 选项 (option)。

</p>
</div>

<div class="translate-section" data-hash="af63b6e9faed9f500e3adccb79e30d92"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例: 编译一段“自增一个全局变量然后创建一个全局变量”的代码，然后多次执行此代码，
被操作的全局变量会被保存在沙箱中。

</p>
</div>

<div class="translate-section" data-hash="55aa3ea2ddec665b30f7c5accaf5fb41"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// { animal: 'cat', count: 12, name: 'kitty' }</span></code></pre>
</div>

<div class="translate-section" data-hash="c13c124a8f3261f059bac842fcdb9cd4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>执行不可信代码 (untrusted code) 是一件充满技巧而且需要非常小心的工作。
<code>script.runInContext</code> 十分好用，但是安全地运行不可信代码还需要将这些代码放入单独的进程里面执行。

</p>
</div>

<div class="translate-section" data-hash="045cfd08ac382f7cb4fe853bcc702fbc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>script.runInNewContext([sandbox], [options])<span><a href="#all_script_runinnewcontext_sandbox_options_1408" id="all_script_runinnewcontext_sandbox_options_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="6c279a3398de00c9e197789a93d8600b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>类似 <code>vm.runInNewContext</code> 但是作为预编译的 <code>Script</code> 对象方法。
若提供 <code>sandbox</code> 则 <code>script.runInNewContext</code> 将 <code>sandbox</code> 上下文化，若未提供，则创建一个新的上下文化的沙箱，
然后将代码放入沙箱作为全局对象的上下文内执行并返回结果。

</p>
</div>

<div class="translate-section" data-hash="5ba46a82cbcaeb31647a2e5b013a5ea8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>script.runInNewContext</code> 使用与 <code>script.runInThisContext</code> 相同的 选项 (option)。

</p>
</div>

<div class="translate-section" data-hash="3b91494e2eb236933a7230352ff6636d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例: 编译一段“写入一个全局变量”的代码，然后将代码放入不同的上下文 (context) 执行，这些被操作的全局变量会被保存在沙箱中。

</p>
</div>

<div class="translate-section" data-hash="7c1c26b23d5283ae1338ef3d69c0a724"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// [{ globalVar: 'set' }, { globalVar: 'set' }, { globalVar: 'set' }]</span></code></pre>
</div>

<div class="translate-section" data-hash="95f260b74df7d8b4752b276984d184d5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>执行不可信代码 (untrusted code) 是一件充满技巧而且需要非常小心的工作。
<code>script.runInNewContext</code> 十分好用，但是安全地运行不可信代码还需要将这些代码放入单独的进程里面执行。

</p>
</div>
<div class="translate-section" data-hash="76cff107e9b1516d68437471906795fb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>子进程<span><a href="#all_70425" id="all_70425">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<div class="translate-section" data-hash="08c14d61e651a14cad19924158f6ef82"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Node 通过 <code>child_process</code> 模块提供了类似 <code>popen(3)</code> 的处理三向数据流（stdin/stdout/stderr）的功能。

</p>
</div>

<div class="translate-section" data-hash="5af57ff99b7d50a79cd11e66ddc407c6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>它能够以完全非阻塞的方式与子进程的 <code>stdin</code>、<code>stdout</code> 和 <code>stderr</code> 以流式传递数据。（请注意，某些程序在内部使用行缓冲 I/O。这不会影响到 node.js，但您发送到子进程的数据不会被立即消费。）

</p>
</div>

<div class="translate-section" data-hash="be0a2170105ca9cf22f862b7b8ecf5ac"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 <code>require('child_process').spawn()</code>或者 <code>require('child_process').fork()</code> 创建子进程，这两种方法的语义有些区别，下文将会解释。

</p>
</div>

<div class="translate-section" data-hash="0e1cee23dd37028f06b48fa01b822450"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: ChildProcess<span><a href="#all_childprocess_1408" id="all_childprocess_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="a59c804c9f37ad673544983d7282b2ac"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>ChildProcess</code> 是一个 <a href="http://nodeapi.ucdok.com/api/events.html#events_class_events_eventemitter">EventEmitter</a>。

</p>
</div>

<div class="translate-section" data-hash="b1b4776bc759489695d340f35d537ea3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>子进程有三个与之关联的流：<code>child.stdin</code>、<code>child.stdout</code> 和 <code>child.stderr</code>。它们可以共享父进程的 stdio 流，也可以作为独立的被导流的流对象。

</p>
</div>

<div class="translate-section" data-hash="c8cb2da9a73a327baa28e03300791f11"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>ChildProcess 类不能直接被使用， 使用 <code>spawn()</code> 或者 <code>fork()</code> 方法创建一个 Child Process 实例。

</p>
</div>

<div class="translate-section" data-hash="91f970b40569ad268f661cfc645798c3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件:  'error'<span><a href="#all_error_9862" id="all_error_9862">#</a></span></h3>
</div>

<div class="translate-section" data-hash="49d481ac26c080e95e871860e6935f6d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>err</code> {Error Object} 错误。</li>
</ul>
</div>

<div class="translate-section" data-hash="17f4f3dc1439b19e323c0a8cc533127c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>发生于：

</p>
</div>

<div class="translate-section" data-hash="9924aa5aef0334657eace3fb2468b3e5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>


<ol>
<li>进程不能被创建, 或者</li>
<li>进程不能被终止掉, 或者</li>
<li>由任何原因引起的数据发送到子进程失败.</li>
</ol>
</div>

<div class="translate-section" data-hash="c67d96447147109bf1dcd026bbc34ddd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>参阅 <a href="#child_process_child_kill_signal"><code>ChildProcess#kill()</code></a> 和
<a href="#child_process_child_send_message_sendhandle"><code>ChildProcess#send()</code></a>。

</p>
</div>

<div class="translate-section" data-hash="a8adb8f04663936f1197d26cda339445"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件:  'exit'<span><a href="#all_exit_7042" id="all_exit_7042">#</a></span></h3>
</div>

<div class="translate-section" data-hash="b5b2a2abde44c517db0e2d8829d3ce7a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>code</code> {Number} 假如进程正常退出，则为它的退出代码。</li>
<li><code>signal</code> {String} 假如是被父进程终止，则为所传入的终止子进程的信号。</li>
</ul>
</div>

<div class="translate-section" data-hash="251b0f51ca423c83f1797486f074e859"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个事件是在子进程被结束的时候触发的. 假如进程被正常结束，‘code’就是退出进程的指令代码, 否则为'null'. 假如进程是由于接受到signal结束的, <code>signal</code> 就代表着信号的名称, 否则为<code>null</code>.

</p>
</div>

<div class="translate-section" data-hash="50a4fb6d43e97d54c196e5c9faef658e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意子进程的 stdio 流可能仍为开启状态。

</p>
</div>

<div class="translate-section" data-hash="da81dd7473c8b46b9ceb9277926208f2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>参阅<code>waitpid(2)</code>.

</p>
</div>

<div class="translate-section" data-hash="d2b8af4d8afc211663a4341cca53b503"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'close'<span><a href="#all_close_12680" id="all_close_12680">#</a></span></h3>
</div>

<div class="translate-section" data-hash="b5b2a2abde44c517db0e2d8829d3ce7a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>code</code> {Number} 假如进程正常退出，则为它的退出代码。</li>
<li><code>signal</code> {String} 假如是被父进程终止，则为所传入的终止子进程的信号。</li>
</ul>
</div>

<div class="translate-section" data-hash="df77eb92c1534027cbb65bded39ee548"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个事件会在一个子进程的所有stdio流被终止时触发， 这和'exit'事件有明显的不同，因为多进程有时候会共享同一个stdio流

</p>
</div>

<div class="translate-section" data-hash="78d99fe54de7fafe231325bba1ddd619"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'disconnect'<span><a href="#all_disconnect_4224" id="all_disconnect_4224">#</a></span></h3>
</div>

<div class="translate-section" data-hash="23b883206d2bb2243db1b30a0675a346"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在子进程或父进程中使用使用.disconnect()方法后，这个事件会被触发，在断开之后，就不可能再相互发送信息了。可以通过检查子进程的child.connected属性是否为true去检查是否可以发送信息

</p>
</div>

<div class="translate-section" data-hash="7ac73013006024dddcd78e9adef591b1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'message'<span><a href="#all_message_4225" id="all_message_4225">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3eb5c296fc0c750642ca6a97f11f97d5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>message</code> {Object} 一个已解析的JSON对象或者原始类型值</li>
<li><code>sendHandle</code> {Handle object} 一个socket 或者 server对象</li>
</ul>
</div>

<div class="translate-section" data-hash="afafe4c6de3d2b598662cd1a90fb8206"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>通过.send()发送的信息可以通过监听'message'事件获取到

</p>
</div>

<div class="translate-section" data-hash="567b077c9f5d03c1adadba83c7a0da71"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>child.stdin<span><a href="#all_child_stdin_1408" id="all_child_stdin_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3fa8c9e5298d0aad25380b776a84cd68"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Stream object}</li>
</ul>
</div>

<div class="translate-section" data-hash="509bc284428a07399af379b6a1973657"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>子进程的'stdin'是一个‘可写流’，通过end()方法关闭该可写流可以终止子进程，

</p>
</div>

<div class="translate-section" data-hash="644a19c0443f5fecc39785b804522653"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>假如子进程的stdio流与父线程共享，这个child.stdin不会被设置

</p>
</div>

<div class="translate-section" data-hash="ea175a7ccfacbe0fbf626f16c57eb9f7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>child.stdout<span><a href="#all_child_stdout_1408" id="all_child_stdout_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3fa8c9e5298d0aad25380b776a84cd68"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Stream object}</li>
</ul>
</div>

<div class="translate-section" data-hash="c5bbd8f0d04b7b6942476383136cb0f8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>子进程的<code>stdout</code>是个可读流.

</p>
</div>

<div class="translate-section" data-hash="644a19c0443f5fecc39785b804522653"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>假如子进程的stdio流与父线程共享，这个child.stdin不会被设置

</p>
</div>

<div class="translate-section" data-hash="8ef2a5f0372061f2cc10dd2566209846"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>child.stderr<span><a href="#all_child_stderr_1408" id="all_child_stderr_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="3fa8c9e5298d0aad25380b776a84cd68"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Stream object}</li>
</ul>
</div>

<div class="translate-section" data-hash="9efc92ea2e12e1eb5e761f25b3a59596"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>子进程的stderr是一个可读流

</p>
</div>

<div class="translate-section" data-hash="644a19c0443f5fecc39785b804522653"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>假如子进程的stdio流与父线程共享，这个child.stdin不会被设置

</p>
</div>

<div class="translate-section" data-hash="4de785005ec456ddf3f1eefc15d41a02"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>child.pid<span><a href="#all_child_pid_1408" id="all_child_pid_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="a2e77a4e569932ba0e7ec11cf8184ded"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Integer}</li>
</ul>
</div>

<div class="translate-section" data-hash="38247ad3135926da57989da7948781d9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>子进程的PID

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="aaf01ea5b1c4feb17b215b965b572196"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Spawned child pid: '</span> <span class="sh_symbol">+</span> grep<span class="sh_symbol">.</span>pid<span class="sh_symbol">);</span>
grep<span class="sh_symbol">.</span>stdin<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">();</span></code></pre>
</div>

<div class="translate-section" data-hash="83114359847367c9ad93c425fd1d11e7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>child.kill([signal])<span><a href="#all_child_kill_signal_1408" id="all_child_kill_signal_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="13c433d2836186cee9114f09ca1cb003"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>signal</code> {String}</li>
</ul>
</div>

<div class="translate-section" data-hash="3052e79930c410e3d8d83f6913bd9abb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>发送一个信号给子线程. 假如没有给参数, 将会发送 <code>'SIGTERM'</code>. 参阅 <code>signal(7)</code> 查看所有可用的signals列表

</p>
</div>

<div class="translate-section" data-hash="34058ae35044fdc23e0a629c7cc67262"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// send SIGHUP to process</span>
grep<span class="sh_symbol">.</span><span class="sh_function">kill</span><span class="sh_symbol">(</span><span class="sh_string">'SIGHUP'</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="b17b7a12c05825a3bd19c09265f576b5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当一个signal不能被传递的时候，会触发一个'error'事件， 发送一个信号到已终止的子线程不会发生错误，但是可能引起不可预见的后果， 假如该子进程的ID已经重新分配给了其他进程，signal将会被发送到其他进程上面，大家可以猜想到这发生什么后果。

</p>
</div>

<div class="translate-section" data-hash="f17684b5f855a23efd7b6f9d15ccea6e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意，当函数调用‘kill’, 传递给子进程的信号不会去终结子进程， ‘kill’实际上只是发送一个信号到进程而已。

</p>
</div>

<div class="translate-section" data-hash="1a1e838b03556a9cb36d4855adc7a612"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>See <code>kill(2)</code>

</p>
</div>

<div class="translate-section" data-hash="bc832e38f5690568d8ab9bd8c14781b5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>child.send(message, [sendHandle])<span><a href="#all_child_send_message_sendhandle_1408" id="all_child_send_message_sendhandle_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="17f8002e2794715877ed20d0365dd2bb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>message</code> {Object}</li>
<li><code>sendHandle</code> {Handle object}</li>
</ul>
</div>

<div class="translate-section" data-hash="d1234fd3c4b6c5084303913d7b615c5c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当使用 <code>child_process.fork()</code> 你可以使用 
<code>child.send(message, [sendHandle])</code>向子进程写数据 and 数据将通过子进程上的‘message’事件接受.

</p>
</div>

<div class="translate-section" data-hash="506c2c0c7f5b70af3df68c45c46f45a7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例如：

</p>
</div>

<div class="translate-section" data-hash="763e65960b76f625d84ebda7c1993526"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>n<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span> hello<span class="sh_symbol">:</span> <span class="sh_string">'world'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="dd4c2059d816adb18053ea4c3f327852"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>然后是子进程脚本的代码, <code>'sub.js'</code> 代码如下:

</p>
</div>

<div class="translate-section" data-hash="4802855aebaa226ed77d1af1ab4c3b61"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>process<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span> foo<span class="sh_symbol">:</span> <span class="sh_string">'bar'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="5c1adb559d135f2abdd437d013e54bf9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在子进程脚本中'process'对象有‘send()’方法， ‘process’每次通过它的信道接收到信息都会触发事件，信息以对象形式返回。

</p>
</div>

<div class="translate-section" data-hash="3f5b2b5f467b8a562dba3090c15a7807"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>不过发送<code>{cmd: 'NODE_foo'}</code> 信息是个比较特殊的情况. 所有在‘cmd’属性中包含 a <code>NODE_</code>前缀的信息将不会触发‘message’事件, 因为他们是由node 核心使用的内部信息.
相反这种信息会触发 <code>internalMessage</code> 事件, 你应该通过各种方法避免使用这种特性, 他改变的时候不会接收到通知.

</p>
</div>

<div class="translate-section" data-hash="8787f18de77f87d42a9c5eebc7e40f72"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>child.send()</code>的<code>sendHandle</code> 选项是用来发送一个TCP服务或者socket对象到另一个线程的，子进程将会接收这个参数作为‘message’事件的第二个参数。

</p>
</div>

<div class="translate-section" data-hash="7f14b4ff530aafa79ac1bb34fe1f35d6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>假如信息不能被发送，将会触发一个‘error’事件， 比如说因为子线程已经退出了。

</p>
</div>

<div class="translate-section" data-hash="fd681e13148bb89c9d2a8dd43bbc6626"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>例子: 发送一个server对象<span><a href="#all_server_1408" id="all_server_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="9a9aede600026a43e839829307bea064"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这里是一个发送一个server对象的例子:

</p>
</div>

<div class="translate-section" data-hash="bb707e4921d43c08561054755295b86b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 创建一个handle对象，发送一个句柄.</span>
<span class="sh_keyword">var</span> server <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'net'</span><span class="sh_symbol">).</span><span class="sh_function">createServer</span><span class="sh_symbol">();</span>
server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>socket<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'handled by parent'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  child<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_string">'server'</span><span class="sh_symbol">,</span> server<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="046b0d45ee7bdcc875b95e6429b28249"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>同时子进程将会以如下方式接收到这个server对象:

</p>
</div>

<div class="translate-section" data-hash="e74a2143cbcd2e3c5d83c98cc85d98f1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>m<span class="sh_symbol">,</span> server<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>m <span class="sh_symbol">===</span> <span class="sh_string">'server'</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    server<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'connection'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>socket<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'handled by child'</span><span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="edcd7ccd56a2a911e69881496895b5ac"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意，server对象现在有父进程和子进程共享，这意味着某些连接将会被父进程和子进程处理。

</p>
</div>

<div class="translate-section" data-hash="49c5e431b9fbabc768fbaef111ac7c59"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>对‘dgram’服务器，工作流程是一样的, 你监听的是‘message’事件，而不是 ‘connection’事件， 使用‘server.bind’ ,而不是‘server.listen’.(当前仅在UNIX平台支持)

</p>
</div>

<div class="translate-section" data-hash="cb1b681630fa4fe898f9fb52f9930f3f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h4>示例: 发送socket对象<span><a href="#all_socket_1408" id="all_socket_1408">#</a></span></h4>
</div>

<div class="translate-section" data-hash="31838537f38820874aca461601aebc56"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是个发送socket的例子. 他将创建两个子线程 ，同时处理连接，这是通过使用远程地址 <code>74.125.127.100</code> 作为 VIP 发送socket到一个‘特殊’的子线程. 其他的socket将会发送到‘正常’的线程里.

</p>
</div>

<div class="translate-section" data-hash="06da412a22241fee7df34a6f976960b8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>  <span class="sh_comment">// if this is a VIP</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>socket<span class="sh_symbol">.</span>remoteAddress <span class="sh_symbol">===</span> <span class="sh_string">'74.125.127.100'</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    special<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_string">'socket'</span><span class="sh_symbol">,</span> socket<span class="sh_symbol">);</span>
    <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
  <span class="sh_cbracket">}</span>
  <span class="sh_comment">// just the usual dudes</span>
  normal<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_string">'socket'</span><span class="sh_symbol">,</span> socket<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
server<span class="sh_symbol">.</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="9137938ad91dc67adec01f3ab04848cc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p> <code>child.js</code> 文件代码如下:

</p>
</div>

<div class="translate-section" data-hash="e91d1b8fce7f882722c680c8dd176989"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>m<span class="sh_symbol">,</span> socket<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>m <span class="sh_symbol">===</span> <span class="sh_string">'socket'</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    socket<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">'You were handled as a '</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span>argv<span class="sh_symbol">[</span><span class="sh_number">2</span><span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_string">' person'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="3167d0d3d4e5306cc4e24034cd019db8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意，一旦单个的socket被发送到子进程，当这个socket被删除之后，父进程将不再对它保存跟踪，这表明了这个条件下‘.connetions’属性将变成'null'， 在这个条件下同时也不推荐时间‘.maxConnections’

</p>
</div>

<div class="translate-section" data-hash="85f3f15163ff78c07313b6a7854459ac"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>child.disconnect()<span><a href="#all_child_disconnect_1408" id="all_child_disconnect_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="451c42dd8d0640c6394ede4c0e4c901f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用<code>child.disconnect()</code> 方法关闭父进程与子进程的IPC连接. 
他让子进程非常优雅的退出，因为已经没有活跃的IPC信道. 
当调用这个方法，‘disconnect’事件将会同时在父进程和子进程内被触发，‘connected’的标签将会被设置成‘flase’， 
请注意，你也可以在子进程中调用‘process.disconnect()’


</p>
</div>

<div class="translate-section" data-hash="19c4f3bc95e73d0204b1bd08a2229ecc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>child_process.spawn(command, [args], [options])<span><a href="#all_child_process_spawn_command_args_options_1408" id="all_child_process_spawn_command_args_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="1e08863d20c3394bbf9ff5729fbf6f9f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>


<ul>
<li><code>command</code> {String}要运行的命令</li>
<li><code>args</code> {Array} 字符串参数列表</li>
<li><code>options</code> {Object}<ul>
<li><code>cwd</code> {String} 子进程的当前的工作目录</li>
<li><code>stdio</code> {Array|String} 子进程 stdio 配置. (参阅下文)</li>
<li><code>customFds</code> {Array} <strong>Deprecated</strong> 作为子进程 stdio 使用的 文件标示符.  (参阅下文)</li>
<li><code>env</code> {Object} 环境变量的键值对</li>
<li><code>detached</code> {Boolean} 子进程将会变成一个进程组的领导者.  (参阅下文)</li>
<li><code>uid</code> {Number} 设置用户进程的ID. (See setuid(2).)</li>
<li><code>gid</code> {Number} 设置进程组的ID. (See setgid(2).)</li>
</ul>
</li>
<li>返回: {ChildProcess object}</li>
</ul>
</div>

<div class="translate-section" data-hash="ba2b24e7663601f3381d3a19223eefd1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用给定的命令发布一个子进程，带有‘args’命令行参数，如果省略的话，‘args’默认为一个空数组

</p>
</div>

<div class="translate-section" data-hash="5c35779ce9e40f89df40cd807af9186d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>第三个参数被用来指定额外的设置，默认是:

</p>
</div>

<div class="translate-section" data-hash="5f2291c77a7655a43e25e9de99a34ca3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> cwd<span class="sh_symbol">:</span> <span class="sh_predef_var">undefined</span><span class="sh_symbol">,</span>
  env<span class="sh_symbol">:</span> process<span class="sh_symbol">.</span>env
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="aa06df84ec2aebc71bf762c0139f013c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>cwd</code>允许你从被创建的子进程中指定一个工作目录.
使用 <code>env</code> 去指定在新进程中可用的环境变量.

</p>
</div>

<div class="translate-section" data-hash="1be96b11049363589ce59661a2ebfeed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个运行 <code>ls -lh /usr</code>的例子, 获取<code>stdout</code>, <code>stderr</code>, 和退出代码:

</p>
</div>

<div class="translate-section" data-hash="45e98a03b1cd8ee47a7cfee73bddd926"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>ls<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'close'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>code<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'child process exited with code '</span> <span class="sh_symbol">+</span> code<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="08ba17badc7bf084450af8b45bb8b7b2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>例子: 一个非常精巧的方法执行 'ps ax | grep ssh'

</p>
</div>

<div class="translate-section" data-hash="5176aa0e27ebdc8f8b12f702f541fb8e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>grep<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'close'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>code<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>code <span class="sh_symbol">!==</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'grep process exited with code '</span> <span class="sh_symbol">+</span> code<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="6cd33d0259ad3e5c3d653ad3d0a00912"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>检查执行错误的例子:

</p>
</div>

<div class="translate-section" data-hash="8ee4305dcb8e75b60d0406b0948597e9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>child<span class="sh_symbol">.</span>stderr<span class="sh_symbol">.</span><span class="sh_function">setEncoding</span><span class="sh_symbol">(</span><span class="sh_string">'utf8'</span><span class="sh_symbol">);</span>
child<span class="sh_symbol">.</span>stderr<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>data<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_regexp">/^execvp\(\)/</span><span class="sh_symbol">.</span><span class="sh_function">test</span><span class="sh_symbol">(</span>data<span class="sh_symbol">))</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'Failed to start child process.'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="53dc131a398351cd8e4b03a032d77fb0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>注意，当在spawn过程中接收一个空对象,这会导致创建的进程使用空的环境变量而不是使用‘process.env’.这是由于与一个废弃API向后兼容的问题.

</p>
</div>

<div class="translate-section" data-hash="1ea9ca4d142f625c4984631aff142168"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>child_process.spawn()</code> 中的 <code>stdio</code> 选项是一个数组，每个索引对应子进程中的一个文件标识符。可以是下列值之一：

</p>
</div>

<div class="translate-section" data-hash="b8fd6c5486ecc0236c13b43988b66011"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>


<ol>
<li><p><code>'pipe'</code> -在子进程与父进程之间创建一个管道，管道的父进程端以 <code>child_process</code> 的属性的形式暴露给父进程，如 <code>ChildProcess.stdio[fd]</code>。
为 文件标识（fds） 0 - 2 建立的管道也可以通过 ChildProcess.stdin，ChildProcess.stdout 及 ChildProcess.stderr 分别访问。</p>
</li>
<li><p><code>'ipc'</code> - 创建一个IPC通道以在父进程与子进程之间传递 消息/文件标识符。一个子进程只能有最多<em>一个</em> IPC stdio 文件标识。
设置该选项激活 ChildProcess.send() 方法。如果子进程向此文件标识符写JSON消息，则会触发 ChildProcess.on("message")。
如果子进程是一个nodejs程序，那么IPC通道的存在会激活process.send()和process.on('message')</p>
</li>
<li><p><code>'ignore'</code> - 不在子进程中设置该文件标识。注意，Node 总是会为其spawn的进程打开 文件标识（fd） 0 - 2。 
当其中任意一项被 ignored，node 会打开 <code>/dev/null</code> 并将其附给子进程的文件标识（fd）。</p>
</li>
<li><p><code>Stream</code> 对象 - 与子进程共享一个与tty，文件，socket，或者管道(pipe)相关的可读或可写流。
 该流底层（underlying）的文件标识在子进程中被复制给stdio数组索引对应的文件标识（fd）</p>
</li>
<li><p>正数 - 该整形值被解释为父进程中打开的文件标识符。他与子进程共享，和<code>Stream</code>被共享的方式相似。</p>
</li>
<li><p><code>null</code>, <code>undefined</code> - 使用默认值。 对于stdio fds 0,1,2（或者说stdin,stdout和stderr），pipe管道被建立。对于fd 3及往后，默认为<code>ignore</code></p>
</li>
</ol>
</div>

<div class="translate-section" data-hash="e80a0b276b164e8dd211a6df95ed0b09"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>作为快捷方式，<code>stdio</code> 参数除了数组也可以是下列字符串之一：

</p>
</div>

<div class="translate-section" data-hash="52b461fe8fa353050f326c41205604ea"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>ignore</code> - <code>['ignore', 'ignore', 'ignore']</code></li>
<li><code>pipe</code> - <code>['pipe', 'pipe', 'pipe']</code></li>
<li><code>inherit</code> - <code>[process.stdin, process.stdout, process.stderr]</code> 或 <code>[0,1,2]</code></li>
</ul>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="8bd3a718697c6abbd9150c46b5aecc83"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 开启一个额外的 fd=4 来与提供 startd 风格接口的程序进行交互。</span>
<span class="sh_function">spawn</span><span class="sh_symbol">(</span><span class="sh_string">'prg'</span><span class="sh_symbol">,</span> <span class="sh_symbol">[],</span> <span class="sh_cbracket">{</span> stdio<span class="sh_symbol">:</span> <span class="sh_symbol">[</span><span class="sh_string">'pipe'</span><span class="sh_symbol">,</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span> <span class="sh_string">'pipe'</span><span class="sh_symbol">]</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="a1e642dfd7d2cb6d496f926b8028c5f6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果 <code>detached</code> 选项被设置，则子进程会被作为新进程组的 leader。这使得子进程可以在父进程退出后继续运行。

</p>
</div>

<div class="translate-section" data-hash="71536effa1a12f0fb6a990f48d50fe68"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>缺省情况下，父进程会等待脱离了的子进程退出。要阻止父进程等待一个给出的子进程 <code>child</code>，使用 <code>child.unref()</code> 方法，则父进程的事件循环引用计数中将不会包含这个子进程。

</p>
</div>

<div class="translate-section" data-hash="335eab4182af7d360dc9b5408436f3a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>脱离一个长时间运行的进程并将它的输出重定向到一个文件的例子：

</p>
</div>

<div class="translate-section" data-hash="7cc19ecde24fd79277f306444a60f347"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code> child<span class="sh_symbol">.</span><span class="sh_function">unref</span><span class="sh_symbol">();</span></code></pre>
</div>

<div class="translate-section" data-hash="fc489be06585776b9d95a958d8b9754b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当使用 <code>detached</code> 选项来启动一个长时间运行的进程，该进程不会在后台保持运行，除非向它提供了一个不连接到父进程的 <code>stdio</code> 配置。如果继承了父进程的 <code>stdio</code>，则子进程会继续附着在控制终端。

</p>
</div>

<div class="translate-section" data-hash="b6935fa0679931cecbe3c8282b320633"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>有一个已废弃的选项 <code>customFds</code> 允许指定特定文件描述符作为子进程的 stdio。该 API 无法移植到所有平台，因此被移除。使用 <code>customFds</code> 可以将新进程的 <code>[stdin, stdout, stderr]</code> 钩到已有流上；<code>-1</code> 表示创建新流。自己承担使用风险。

</p>
</div>

<div class="translate-section" data-hash="c85e4ddf95fc1b93f91baf9e1bb54211"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>参阅：<code>child_process.exec()</code> 和 <code>child_process.fork()</code>

</p>
</div>

<div class="translate-section" data-hash="b39d3857c767f3d570afb103f2cb1d9e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>child_process.exec(command, [options], callback)<span><a href="#all_child_process_exec_command_options_callback_1408" id="all_child_process_exec_command_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="185391c8cdcada4a9a73bb34186b1225"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>command</code> {String} 将要执行的命令，用空格分隔参数</li>
<li><code>options</code> {Object}<ul>
<li><code>cwd</code> {String} 子进程的当前工作目录</li>
<li><code>env</code> {Object} 环境变量键值对</li>
<li><code>encoding</code> {String} 编码（缺省为 'utf8'）</li>
<li><code>shell</code> {String} 运行命令的 shell（UNIX 上缺省为 '/bin/sh'，Windows 上缺省为 'cmd.exe'。该 shell 在 UNIX 上应当接受 <code>-c</code> 开关，在 Windows 上应当接受 <code>/s /c</code> 开关。在 Windows 中，命令行解析应当兼容 <code>cmd.exe</code>。）</li>
<li><code>timeout</code> {Number} 超时（缺省为 0）</li>
<li><code>maxBuffer</code> {Number} 最大缓冲（缺省为 200*1024）</li>
<li><code>killSignal</code> {String} 结束信号（缺省为 'SIGTERM'）</li>
</ul>
</li>
<li><code>callback</code> {Function} 进程结束时回调并带上输出<ul>
<li><code>error</code> {Error}</li>
<li><code>stdout</code> {Buffer}</li>
<li><code>stderr</code> {Buffer}</li>
</ul>
</li>
<li>返回：ChildProcess 对象</li>
</ul>
</div>

<div class="translate-section" data-hash="8960501cd4dde52e83bc8c10d0517335"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在 shell 中执行一个命令并缓冲输出。

</p>
</div>

<div class="translate-section" data-hash="598869bf6c7b4cd228b717fe4977359f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>child <span class="sh_symbol">=</span> <span class="sh_function">exec</span><span class="sh_symbol">(</span><span class="sh_string">'cat *.js bad_file | wc -l'</span><span class="sh_symbol">,</span>
  <span class="sh_keyword">function</span> <span class="sh_symbol">(</span>error<span class="sh_symbol">,</span> stdout<span class="sh_symbol">,</span> stderr<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'stdout: '</span> <span class="sh_symbol">+</span> stdout<span class="sh_symbol">);</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'stderr: '</span> <span class="sh_symbol">+</span> stderr<span class="sh_symbol">);</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>error <span class="sh_symbol">!==</span> <span class="sh_keyword">null</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'exec error: '</span> <span class="sh_symbol">+</span> error<span class="sh_symbol">);</span>
    <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="a0f7e00f4166e93fc7e9a9e2e4aef275"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>回调参数为 <code>(error, stdout, stderr)</code>。当成功时，<code>error</code> 会是 <code>null</code>。当遇到错误时，<code>error</code> 会是一个 <code>Error</code> 实例，并且 <code>err.code</code> 会是子进程的退出代码，同时 <code>err.signal</code> 会被设置为结束进程的信号名。

</p>
</div>

<div class="translate-section" data-hash="8c4dca48f851d087d4256e52972aea50"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>第二个可选的参数用于指定一些选项，缺省选项为：

</p>
</div>

<div class="translate-section" data-hash="d04e1eba457354ba7b3ac9a2346b3ea1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> encoding<span class="sh_symbol">:</span> <span class="sh_string">'utf8'</span><span class="sh_symbol">,</span>
  timeout<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
  maxBuffer<span class="sh_symbol">:</span> <span class="sh_number">200</span><span class="sh_symbol">*</span><span class="sh_number">1024</span><span class="sh_symbol">,</span>
  killSignal<span class="sh_symbol">:</span> <span class="sh_string">'SIGTERM'</span><span class="sh_symbol">,</span>
  cwd<span class="sh_symbol">:</span> <span class="sh_keyword">null</span><span class="sh_symbol">,</span>
  env<span class="sh_symbol">:</span> <span class="sh_keyword">null</span> <span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="f25e9bc3c3ec986e436612930f2d48a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果 <code>timeout</code> 大于 0，则当进程运行超过 <code>timeout</code> 毫秒后会被终止。子进程使用 <code>killSignal</code> 信号结束（缺省为 <code>'SIGTERM'</code>）。<code>maxBuffer</code> 指定了 stdout 或 stderr 所允许的最大数据量，如果超出这个值则子进程会被终止。

</p>
</div>

<div class="translate-section" data-hash="f79f583d10f39e2860b313d19bf1c8c5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>child_process.execFile(file, args, options, callback)<span><a href="#all_child_process_execfile_file_args_options_callback_1408" id="all_child_process_execfile_file_args_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="cf580c42301eba01bd7d0eb34e7a859e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>file</code> {String} 要运行的程序的文件名</li>
<li><code>args</code> {Array} 字符串参数列表</li>
<li><code>options</code> {Object}<ul>
<li><code>cwd</code> {String} 子进程的当前工作目录</li>
<li><code>env</code> {Object} 环境变量键值对</li>
<li><code>encoding</code> {String} 编码（缺省为 'utf8'）</li>
<li><code>timeout</code> {Number} 超时（缺省为 0）</li>
<li><code>maxBuffer</code> {Number} 最大缓冲（缺省为 200*1024）</li>
<li><code>killSignal</code> {String} 结束信号（缺省为 'SIGTERM'）</li>
</ul>
</li>
<li><code>callback</code> {Function} 进程结束时回调并带上输出<ul>
<li><code>error</code> {Error}</li>
<li><code>stdout</code> {Buffer}</li>
<li><code>stderr</code> {Buffer}</li>
</ul>
</li>
<li>返回：ChildProcess 对象</li>
</ul>
</div>

<div class="translate-section" data-hash="f75721a2b838e44fec67eb07bb60dfd7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法类似于 <code>child_process.exec()</code>，但是它不会执行一个子 shell，而是直接执行所指定的文件。因此它稍微比 <code>child_process.exec</code> 精简，参数与之一致。

</p>
</div>

<div class="translate-section" data-hash="4ef3fcfb9a92252ea25adbd3394daf19"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>child_process.fork(modulePath, [args], [options])<span><a href="#all_child_process_fork_modulepath_args_options_1408" id="all_child_process_fork_modulepath_args_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="67eefc3c91a7462bd18ffe697fbc7399"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>modulePath</code> {String} 子进程中运行的模块</li>
<li><code>args</code> {Array} 字符串参数列表</li>
<li><code>options</code> {Object}<ul>
<li><code>cwd</code> {String} 子进程的当前工作目录</li>
<li><code>env</code> {Object} 环境变量键值对</li>
<li><code>encoding</code> {String} 编码（缺省为 'utf8'）</li>
<li><code>execPath</code> {String} 创建子进程的可执行文件</li>
</ul>
</li>
<li>返回：ChildProcess 对象</li>
</ul>
</div>

<div class="translate-section" data-hash="e713e9fa611629169cc5ade8ccb9715f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法是 <code>spawn()</code> 的特殊情景，用于派生 Node 进程。除了普通 ChildProcess 实例所具有的所有方法，所返回的对象还具有内建的通讯通道。详见 <code>child.send(message, [sendHandle])</code>。

</p>
</div>

<div class="translate-section" data-hash="fd96b19e2b02e09282e03d7f333f23ea"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>缺省情况下所派生的 Node 进程的 stdout、stderr 会关联到父进程。要更改该行为，可将 <code>options</code> 对象中的 <code>silent</code> 属性设置为 <code>true</code>。

</p>
</div>

<div class="translate-section" data-hash="3ca8a25c2abe40eb623fd68a14bf4789"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>子进程运行完成时并不会自动退出，您需要明确地调用 <code>process.exit()</code>。该限制可能会在未来版本里接触。

</p>
</div>

<div class="translate-section" data-hash="6ee5f4519d198dcfe2f418a7f1e759e6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这些子 Node 是全新的 V8 实例，假设每个新的 Node 需要至少 30 毫秒的启动时间和 10MB 内存，就是说您不能创建成百上千个这样的实例。

</p>
</div>

<div class="translate-section" data-hash="fabbb6b2b745f62c32b8d62511bdbf2c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>options</code> 对象中的 <code>execPath</code> 属性可以用非当前 <code>node</code> 可执行文件来创建子进程。这需要小心使用，并且缺省情况下会使用子进程上的 <code>NODE_CHANNEL_FD</code> 环境变量所指定的文件描述符来通讯。该文件描述符的输入和输出假定为以行分割的 JSON 对象。

</p>
</div>

<div class="translate-section" data-hash="6949f457689f76a715805ad76aa0f835"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

</div>
<div class="translate-section" data-hash="de0042d5fecb76b86f8687cba714860b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>断言 (assert)<span><a href="#all_assert_1408" id="all_assert_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="1832a6bdec37a3991495a83f92b71e51"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">5</span> <span class="sh_symbol">-</span> 已锁定</code></pre>
</div>

<div class="translate-section" data-hash="9a78605bf4ef4609f30da4be5845801b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>此模块主要用于对您的程序进行单元测试，要使用它，请 <code>require('assert')</code>。

</p>
</div>

<div class="translate-section" data-hash="36e3b38982b6677e8ce9ec72348679b7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>assert.fail(actual, expected, message, operator)<span><a href="#all_assert_fail_actual_expected_message_operator_1408" id="all_assert_fail_actual_expected_message_operator_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="124e35b7bec492000183df6bb0960346"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>抛出异常：显示为被 <code>operator</code> （分隔符）所分隔的 <code>actual</code> （实际值）和 <code>expected</code> （期望值）。

</p>
</div>

<div class="translate-section" data-hash="fe0ab762001b750f0c78e02ec8745779"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>assert(value, message), assert.ok(value, [message])<span><a href="#all_assert_value_message_assert_ok_value_message_1408" id="all_assert_value_message_assert_ok_value_message_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="62b510624ba440f6129784852f933690"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>测试结果是否为真（true），相当于 <code>assert.equal(true, !!value, message);</code>

</p>
</div>

<div class="translate-section" data-hash="67f2e7baf063d6a3fb4e1300018f1f71"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>assert.equal(actual, expected, [message])<span><a href="#all_assert_equal_actual_expected_message_1408" id="all_assert_equal_actual_expected_message_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b4116600c37d22f7ce4bce6ae6fe26a3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>浅测试, 强制相等就像使用相等操作符( <code>==</code> ).

</p>
</div>

<div class="translate-section" data-hash="6bf99ae5f42c48d7ff6be9fea369c10b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>assert.notEqual(actual, expected, [message])<span><a href="#all_assert_notequal_actual_expected_message_1408" id="all_assert_notequal_actual_expected_message_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="995aa6ae001a6c03ec1e0291ff3e7c5e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Tests shallow, coercive non-equality with the not equal comparison operator ( <code>!=</code> ).

</p>
</div>

<div class="translate-section" data-hash="25997e888f1bfadc401be61675767e4f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>assert.deepEqual(actual, expected, [message])<span><a href="#all_assert_deepequal_actual_expected_message_1408" id="all_assert_deepequal_actual_expected_message_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ccc4faa7d011abc96c822aefffac9bb7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用于深度匹配测试。

</p>
</div>

<div class="translate-section" data-hash="cf9de522e8ba458cba7bd5c082111479"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>assert.notDeepEqual(actual, expected, [message])<span><a href="#all_assert_notdeepequal_actual_expected_message_1408" id="all_assert_notdeepequal_actual_expected_message_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="cfc51a2891368f11f5a61e0307f9b084"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用于深度非匹配测试。

</p>
</div>

<div class="translate-section" data-hash="31678da16e6b406f64ba685d05fafb62"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>assert.strictEqual(actual, expected, [message])<span><a href="#all_assert_strictequal_actual_expected_message_1408" id="all_assert_strictequal_actual_expected_message_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="10be43088169ba1dd5def17b54362557"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用于严格相等匹配测试，由（<code>===</code>）的结果决定

</p>
</div>

<div class="translate-section" data-hash="fe8fb0b68153afe027a03d82374826b7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>assert.notStrictEqual(actual, expected, [message])<span><a href="#all_assert_notstrictequal_actual_expected_message_1408" id="all_assert_notstrictequal_actual_expected_message_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="8201ed5a0abc4de3bd9654d3ff4230ff"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>严格不相等测试, 强制不相等就像使用严格不相等操作符( <code>!==</code> ).

</p>
</div>

<div class="translate-section" data-hash="9ba0dc72de93b728732f765ea69e6f23"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>assert.throws(block, [error], [message])<span><a href="#all_assert_throws_block_error_message_1408" id="all_assert_throws_block_error_message_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="2896ed88bd59c90bba93066737d5c97c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>输出一个错误的 <code>block</code>。 <code>error</code> 可以是构造函数，正则或者验证函数

</p>
</div>

<div class="translate-section" data-hash="a490fffe326e96bb9ff166c1eddd4196"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用验证实例的构造函数

</p>
</div>

<div class="translate-section" data-hash="ad7afd111793722ca060b18fea65379f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>assert<span class="sh_symbol">.</span><span class="sh_keyword">throws</span><span class="sh_symbol">(</span>
  <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">throw</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">"错误值"</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_predef_func">Error</span>
<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="e51abde8506389e4bf79217e46c5f83a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>用正则表达式验证错误消息。

</p>
</div>

<div class="translate-section" data-hash="99aa35ddbf39e77f1ca7db0874a27cd7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>assert<span class="sh_symbol">.</span><span class="sh_keyword">throws</span><span class="sh_symbol">(</span>
  <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">throw</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">"错误值"</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_regexp">/value/</span>
<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="9bdab646d14b4d92159ba2b02912ed7f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>自定义错误校验：

</p>
</div>

<div class="translate-section" data-hash="b3212e3b4163de68164020646ed50372"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>assert<span class="sh_symbol">.</span><span class="sh_keyword">throws</span><span class="sh_symbol">(</span>
  <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">throw</span> <span class="sh_keyword">new</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">(</span><span class="sh_string">"Wrong value"</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_keyword">function</span><span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span> <span class="sh_symbol">(</span>err <span class="sh_keyword">instanceof</span> <span class="sh_predef_func">Error</span><span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_regexp">/value/</span><span class="sh_symbol">.</span><span class="sh_function">test</span><span class="sh_symbol">(</span>err<span class="sh_symbol">)</span> <span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      <span class="sh_keyword">return</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_string">"unexpected error"</span>
<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="a0c97c0e5ce31cccd9d7ef2107558878"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>assert.doesNotThrow(block, [message])<span><a href="#all_assert_doesnotthrow_block_message_1408" id="all_assert_doesnotthrow_block_message_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="a7d63c8c636c1de1cd757297bd9dfcd1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>预期 <code>block</code> 不会抛出错误，详见 assert.throws。

</p>
</div>

<div class="translate-section" data-hash="16aaa4f984706d21bfb663897a5aeaf9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>assert.ifError(value)<span><a href="#all_assert_iferror_value_1408" id="all_assert_iferror_value_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="620cc15657f58f460c14a66a1f108ef6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>测试值是否不为 false，当为 true 时抛出。常用于回调中第一个 error 参数的检查。

</p>
</div>
<div class="translate-section" data-hash="6aee509913e8049a1e290ccfa2eb376b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>TTY<span><a href="#all_tty_1408" id="all_tty_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="14ae3b8a1560651cf34fa2e5562e7f27"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">2</span> <span class="sh_symbol">-</span> 不稳定</code></pre>
</div>

<div class="translate-section" data-hash="c3637cf4b5c2650dc05349350c2a9efe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>tty</code> 模块提供了 <code>tty.ReadStream</code> 和 <code>tty.WriteStream</code> 类。在大部分情况下，您都不会需要直接使用此模块。

</p>
</div>

<div class="translate-section" data-hash="fa59c26085599927359f5b0bc1d511db"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当 node 检测到它正运行于 TTY 上下文中时，<code>process.stdin</code> 将会是一个 <code>tty.ReadStream</code> 实例，且 <code>process.stdout</code> 也将会是一个 <code>tty.WriteStream</code> 实例。检查 node 是否运行于 TTY 上下文的首选方式是检查 <code>process.stdout.isTTY</code>：

</p>
</div>

<div class="translate-section" data-hash="ab0cdecff1a7d09526a3e9c61ab61052"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>$ node <span class="sh_symbol">-</span>p <span class="sh_symbol">-</span>e <span class="sh_string">"Boolean(process.stdout.isTTY)"</span>
<span class="sh_keyword">true</span>
$ node <span class="sh_symbol">-</span>p <span class="sh_symbol">-</span>e <span class="sh_string">"Boolean(process.stdout.isTTY)"</span> <span class="sh_symbol">|</span> cat
<span class="sh_keyword">false</span></code></pre>
</div>

<div class="translate-section" data-hash="3cb7ff287dfd9cdb4e043d7903be67b0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>tty.isatty(fd)<span><a href="#all_tty_isatty_fd_1408" id="all_tty_isatty_fd_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="3bd88cbff78aeac95973a9e6c408b369"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>若 <code>fd</code> 关联于中端则返回 <code>true</code>，反之返回 <code>false</code>。

</p>
</div>

<div class="translate-section" data-hash="b1966b1034ced54c31b951bc64b6ed64"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>tty.setRawMode(mode)<span><a href="#all_tty_setrawmode_mode_1408" id="all_tty_setrawmode_mode_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="d6f3e54d077b1c136a109f7aea54dede"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>已废弃，请使用 <code>tty.ReadStream#setRawMode()</code>（如 <code>process.stdin.setRawMode()</code>）。

</p>
</div>

<div class="translate-section" data-hash="e48762ca7a42dd2df69f3549e0a61ce9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: ReadStream<span><a href="#all_readstream_1408" id="all_readstream_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="9d2e63b2bf317b854b2f1b5889e726fc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个 <code>net.Socket</code> 子类，代表 TTY 的可读部分。通常情况下在所有 node 程序中 <code>process.stdin</code> 会是仅有的 <code>tty.ReadStream</code> 实例（进当 <code>isatty(0)</code> 为 true 时）。

</p>
</div>

<div class="translate-section" data-hash="0aa206842f50ab0ca83f1eb1bd6b117e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>rs.isRaw<span><a href="#all_rs_israw_1408" id="all_rs_israw_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="0022dd1d9a16e5a08e8e5cd460ccd810"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个 <code>Boolean</code>，初始为 <code>false</code>，代表 <code>tty.ReadStream</code> 实例的当前 "raw" 状态。

</p>
</div>

<div class="translate-section" data-hash="6b6842d2964934ae85a500ef1ce24cac"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>rs.setRawMode(mode)<span><a href="#all_rs_setrawmode_mode_1408" id="all_rs_setrawmode_mode_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="ebc63684b1d0bb39e59b29fc5d406db2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>mode</code> 可以是 <code>true</code> 或 <code>false</code>。它设定 <code>tty.ReadStream</code> 的属性表现为原始设备或缺省。<code>isRaw</code> 会被设置为结果模式。

</p>
</div>

<div class="translate-section" data-hash="bd345239bbb349a524542ef6efef0e10"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: WriteStream<span><a href="#all_writestream_1408" id="all_writestream_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="2b90432f86acbbdd65a5e567a8d3a614"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个 <code>net.Socket</code> 子类，代表 TTY 的可写部分。通常情况下 <code>process.stdout</code> 会是仅有的 <code>tty.WriteStream</code> 实例（进当 <code>isatty(1)</code> 为 true 时）。

</p>
</div>

<div class="translate-section" data-hash="30d892ad6998483139a2a82e9ae6725f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>ws.columns<span><a href="#all_ws_columns_1408" id="all_ws_columns_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="019d263db0d3bbd175cc8e2999a440ee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个 `Number，表示 TTY 当前的列数。该属性会在 "resize" 事件中被更新。

</p>
</div>

<div class="translate-section" data-hash="d0f111d6f4590da0bcf0dc001843fa2f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>ws.rows<span><a href="#all_ws_rows_1408" id="all_ws_rows_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="f25fee8911d3ee891c394836dfcf6478"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个 `Number，表示 TTY 当前的行数。该属性会在 "resize" 事件中被更新。

</p>
</div>

<div class="translate-section" data-hash="dc73ac9888771435594830e7babbc4a8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'resize'<span><a href="#all_resize_1408" id="all_resize_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d871d7a90933d8ce9373836bfef30cd3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>function () {}</code>

</p>
</div>

<div class="translate-section" data-hash="53ae2dcc238bdf79d4fb8cb2ab6427fa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>由 <code>refreshSize()</code> 在 <code>columns</code> 或 <code>rows</code> 属性被改变时触发。

</p>
</div>

<div class="translate-section" data-hash="e1764923735b8c2ccb487bcac71733f0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'resize'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'屏幕大小已改变！'</span><span class="sh_symbol">);</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span>columns <span class="sh_symbol">+</span> <span class="sh_string">'x'</span> <span class="sh_symbol">+</span> process<span class="sh_symbol">.</span>stdout<span class="sh_symbol">.</span>rows<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>
<div class="translate-section" data-hash="bf0bfd7d0f3669d09195e41b4edc4562"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>Zlib<span><a href="#all_zlib_1408" id="all_zlib_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<div class="translate-section" data-hash="c76ce3986104b565ff5b24a734445f1e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>你可以这样引入此模块：

</p>
</div>

<div class="translate-section" data-hash="244538edee3295fa713f30db3599d311"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> zlib <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'zlib'</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="7ab21ad8c660c73d6286ad31cb3fced8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个模块提供了对Gzip/Gunzip, Deflate/Inflate和DeflateRaw/InflateRaw类的绑定。每一个类都可以接收相同的选项，并且本身也是一个可读写的Stream类。

</p>
</div>

<div class="translate-section" data-hash="e57da1656ead1413f55464d7577686d2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>例子<span><a href="#all_70426" id="all_70426">#</a></span></h2>
</div>

<div class="translate-section" data-hash="f17765c2afb7f32a5db229b47203c228"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>压缩或解压缩一个文件可以通过导流一个 fs.ReadStream 到一个 zlib 流，然后到一个 fs.WriteStream 来完成。

</p>
</div>

<div class="translate-section" data-hash="a4b9196ab63c2b6f1adebaf80f326c22"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>inp<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>gzip<span class="sh_symbol">).</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>out<span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="69534a29b06933babf22f79fe73962db"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一步压缩或解压缩数据可以通过快捷方法来完成。

</p>
</div>

<div class="translate-section" data-hash="3727cf4c963ef4101f94c6ccd9b17fef"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> buffer <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_function">Buffer</span><span class="sh_symbol">(</span><span class="sh_string">'eJzT0yMAAGTvBe8='</span><span class="sh_symbol">,</span> <span class="sh_string">'base64'</span><span class="sh_symbol">);</span>
zlib<span class="sh_symbol">.</span><span class="sh_function">unzip</span><span class="sh_symbol">(</span>buffer<span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>err<span class="sh_symbol">,</span> buffer<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>err<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span>buffer<span class="sh_symbol">.</span><span class="sh_function">toString</span><span class="sh_symbol">());</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="0d3946630c95fa80318a6265ecf45c43"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>要在 HTTP 客户端或服务器中使用此模块，请在请求和响应中使用 <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3">accept-encoding</a> 和 <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11">content-encoding</a> 头。

</p>
</div>

<div class="translate-section" data-hash="97873b3fd549519223aa44bd15c84b3b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><strong>注意：这些例子只是极其简单地展示了基础的概念</strong> 
Zlib 编码消耗非常大,结果需要缓存.看下面的<a href="#zlib_memory_usage_tuning">内存调优</a>
中更多的关于Zlib用法中 速度/内存/压缩 的权衡取舍。

</p>
</div>

<div class="translate-section" data-hash="8cbec75ff1a126a554751c5f565c7223"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>  <span class="sh_comment">// 注意: 这不是一个不合格的 accept-encoding 解析器</span>
  <span class="sh_comment">// 详见 http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3</span>
  <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>acceptEncoding<span class="sh_symbol">.</span><span class="sh_function">match</span><span class="sh_symbol">(</span><span class="sh_regexp">/\bdeflate\b/</span><span class="sh_symbol">))</span> <span class="sh_cbracket">{</span>
    response<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span> <span class="sh_string">'content-encoding'</span><span class="sh_symbol">:</span> <span class="sh_string">'deflate'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
    raw<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>zlib<span class="sh_symbol">.</span><span class="sh_function">createDeflate</span><span class="sh_symbol">()).</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>response<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>acceptEncoding<span class="sh_symbol">.</span><span class="sh_function">match</span><span class="sh_symbol">(</span><span class="sh_regexp">/\bgzip\b/</span><span class="sh_symbol">))</span> <span class="sh_cbracket">{</span>
    response<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{</span> <span class="sh_string">'content-encoding'</span><span class="sh_symbol">:</span> <span class="sh_string">'gzip'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
    raw<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>zlib<span class="sh_symbol">.</span><span class="sh_function">createGzip</span><span class="sh_symbol">()).</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>response<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    response<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">,</span> <span class="sh_cbracket">{}</span><span class="sh_symbol">);</span>
    raw<span class="sh_symbol">.</span><span class="sh_function">pipe</span><span class="sh_symbol">(</span>response<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">1337</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="c81df363479629802aab4311720d6735"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>zlib.createGzip([options])<span><a href="#all_zlib_creategzip_options_1408" id="all_zlib_creategzip_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="c383f415751a9baaf31cea85d79ac817"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>以 <a href="#zlib_options">options</a> 所给选项返回一个新的 <a href="#zlib_class_zlib_gzip">Gzip</a> 对象。

</p>
</div>

<div class="translate-section" data-hash="0ceb530871884d5b6bcbcb6d669fca25"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>zlib.createGunzip([options])<span><a href="#all_zlib_creategunzip_options_1408" id="all_zlib_creategunzip_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="1709df156fd166a20e94961b305d381e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>以 <a href="#zlib_options">options</a> 所给选项返回一个新的 <a href="#zlib_class_zlib_gunzip">Gunzip</a> 对象。

</p>
</div>

<div class="translate-section" data-hash="9ecddacb6cdd2553dfb3a1c639f1acb0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>zlib.createDeflate([options])<span><a href="#all_zlib_createdeflate_options_1408" id="all_zlib_createdeflate_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="cc48e768caeff2161dbb599e87ac0aed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>以 <a href="#zlib_options">options</a> 所给选项返回一个新的 <a href="#zlib_class_zlib_deflate">Deflate</a> 对象。

</p>
</div>

<div class="translate-section" data-hash="def1a08d648caac6a14344e265842130"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>zlib.createInflate([options])<span><a href="#all_zlib_createinflate_options_1408" id="all_zlib_createinflate_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="c8f146c916b91c8b7282a4e2e9adbd77"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>以 <a href="#zlib_options">options</a> 所给选项返回一个新的 <a href="#zlib_class_zlib_inflate">Inflate</a> 对象。

</p>
</div>

<div class="translate-section" data-hash="0b99c6eeace3281b20d7a7f7e249cc56"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>zlib.createDeflateRaw([options])<span><a href="#all_zlib_createdeflateraw_options_1408" id="all_zlib_createdeflateraw_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="e9c2ec90dfa86dbafa9ac8ef9ecefe78"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>以 <a href="#zlib_options">options</a> 所给选项返回一个新的 <a href="#zlib_class_zlib_deflateraw">DeflateRaw</a> 对象。

</p>
</div>

<div class="translate-section" data-hash="ea3fe580c070b8d2db18cce72e4e5eb6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>zlib.createInflateRaw([options])<span><a href="#all_zlib_createinflateraw_options_1408" id="all_zlib_createinflateraw_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="d792bebbd6e76d088f008d4d54e254e2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>以 <a href="#zlib_options">options</a> 所给选项返回一个新的 <a href="#zlib_class_zlib_inflateraw">InflateRaw</a> 对象。

</p>
</div>

<div class="translate-section" data-hash="eb2c1693cd7f5c8ab6f483cdd35cef14"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>zlib.createUnzip([options])<span><a href="#all_zlib_createunzip_options_1408" id="all_zlib_createunzip_options_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="7f4e03042fdaf184a8d287bb960913f9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>以 <a href="#zlib_options">options</a> 所给选项返回一个新的 <a href="#zlib_class_zlib_unzip">Unzip</a> 对象。

</p>
</div>

<div class="translate-section" data-hash="57ffe2a02c90347d624017f58b942f37"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: zlib.Zlib<span><a href="#all_zlib_zlib_1408" id="all_zlib_zlib_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="7608ec3377ec753634efcf0f09fc5e8a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个类未被 <code>zlib</code> 模块导出，编入此文档是因为它是其它压缩器/解压缩器的基类。

</p>
</div>

<div class="translate-section" data-hash="665d6c381d4fd910aa8a2065fec8f640"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>zlib.flush([kind], callback)<span><a href="#all_zlib_flush_kind_callback_1408" id="all_zlib_flush_kind_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="1e338b01eef26b8746cb7bcfc57e22d2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>kind</code> 缺省为 <code>zlib.Z_FULL_FLUSH</code>。

</p>
</div>

<div class="translate-section" data-hash="82b0ddd46c91bf29137b28bac9b15fbe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>写入缓冲数据。请勿轻易调用此方法，过早的写入会对压缩算法的作用产生影响。

</p>
</div>

<div class="translate-section" data-hash="d9b710656e231a6b0a25d16bd10af4ab"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>zlib.params(level, strategy, callback)<span><a href="#all_zlib_params_level_strategy_callback_1408" id="all_zlib_params_level_strategy_callback_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="82078e0b83de98f19cff138840f319e9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>动态更新压缩级别和压缩策略。仅对 deflate 算法有效。

</p>
</div>

<div class="translate-section" data-hash="bfabf8a43f7953c2b3f4cb62f2432f4c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>zlib.reset()<span><a href="#all_zlib_reset_1408" id="all_zlib_reset_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="1f4ad678f1ce182497c178157f1f8ae8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>将压缩器/解压缩器重置为缺省值。仅对 inflate 和 deflate 算法有效。

</p>
</div>

<div class="translate-section" data-hash="055abd3b5529e03510c635752392c98f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: zlib.Gzip<span><a href="#all_zlib_gzip_1408" id="all_zlib_gzip_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="6e8d974440a25c6ad7c7b1e4961e7d2b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 gzip 压缩数据。

</p>
</div>

<div class="translate-section" data-hash="481b98efebaf94b5529032b416d8b8e8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: zlib.Gunzip<span><a href="#all_zlib_gunzip_1408" id="all_zlib_gunzip_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="edca5c0c48328fd9288e51fe6c136883"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>解压缩一个 gzip 流。

</p>
</div>

<div class="translate-section" data-hash="f32738ccf1a413604e399eb1e67c7cc6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: zlib.Deflate<span><a href="#all_zlib_deflate_1408" id="all_zlib_deflate_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="3b5a1260ca41d09597f8ed92cd53a632"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 deflate 压缩数据。

</p>
</div>

<div class="translate-section" data-hash="c59796a3dcd74562e03f2e89cf05c2e7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: zlib.Inflate<span><a href="#all_zlib_inflate_1408" id="all_zlib_inflate_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="4b63a2d0a91dc4f3a2b41b80c57a8bed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>解压缩一个 deflate 流。

</p>
</div>

<div class="translate-section" data-hash="2a5228f297ad7649a0807de4a091e8c7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: zlib.DeflateRaw<span><a href="#all_zlib_deflateraw_1408" id="all_zlib_deflateraw_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b11f1c8cb2549ad151f1c046c2ce9984"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 deflate 压缩数据，并且不附带 zlib 头。

</p>
</div>

<div class="translate-section" data-hash="be4950b9ba7fb0874eee87bf54a5629c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: zlib.InflateRaw<span><a href="#all_zlib_inflateraw_1408" id="all_zlib_inflateraw_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="94cafbebcaf167f0e98a1e86fc5b8abd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>解压缩一个原始 deflate 流。

</p>
</div>

<div class="translate-section" data-hash="6ddee3c88e452bb69e42eed39957bf32"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: zlib.Unzip<span><a href="#all_zlib_unzip_1408" id="all_zlib_unzip_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="6180df00d587838458ca0287eeb844b5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>自动识别头部来解压缩一个以 gzip 或 deflate 压缩的流。

</p>
</div>

<div class="translate-section" data-hash="d077ff29e385e4ba78b8ce675afa330a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>快捷方法<span><a href="#all_70427" id="all_70427">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="2915347767cd94b80c721e95d7e33a18"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所有这些方法的第一个参数都可以是字符串或 Buffer；可选地可以将传给 zlib 类的选项作为第二个参数传入；回调格式为 <code>callback(error, result)</code>。

</p>
</div>

<div class="translate-section" data-hash="9f9bde3bdb21f681489afe298c7699ad"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>zlib.deflate(buf, [options], callback)<span><a href="#all_zlib_deflate_buf_options_callback_1408" id="all_zlib_deflate_buf_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="c5a9c24e90a7002cb0f7e3ef03da5ff7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 Deflate 压缩一个字符串。

</p>
</div>

<div class="translate-section" data-hash="de142b8871705734ca161c0a70a2bda0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>zlib.deflateRaw(buf, [options], callback)<span><a href="#all_zlib_deflateraw_buf_options_callback_1408" id="all_zlib_deflateraw_buf_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="35a0f10e68c4ac75b2533eed06278dd0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 DeflateRaw 压缩一个字符串。

</p>
</div>

<div class="translate-section" data-hash="d7dc22d860361870bd1927e8f27d7b0a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>zlib.Gzip(buf, [options], callback)<span><a href="#all_zlib_gzip_buf_options_callback_1408" id="all_zlib_gzip_buf_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="e8db29db9567292d48162b677192b427"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 Gzip 压缩一个字符串。

</p>
</div>

<div class="translate-section" data-hash="8404da964ed883860565db01f83305ef"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>zlib.gunzip(buf, [options], callback)<span><a href="#all_zlib_gunzip_buf_options_callback_1408" id="all_zlib_gunzip_buf_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="744703546c769003e518b1d596d20dcb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 Gunzip 解压缩一个原始的 Buffer。

</p>
</div>

<div class="translate-section" data-hash="b7b1ef11e38a7ad699881e18b79cfd50"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>zlib.inflate(buf, [options], callback)<span><a href="#all_zlib_inflate_buf_options_callback_1408" id="all_zlib_inflate_buf_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="57c8fd6172385452e0e2bc203535adc9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 Inflate 解压缩一个原始的 Buffer。

</p>
</div>

<div class="translate-section" data-hash="acd3d57df5bd158d07e024db32c8f408"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>zlib.inflateRaw(buf, [options], callback)<span><a href="#all_zlib_inflateraw_buf_options_callback_1408" id="all_zlib_inflateraw_buf_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="02626ec9ec23a275ee2e3f0ff9ae1b54"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 InflateRaw 解压缩一个原始的 Buffer。

</p>
</div>

<div class="translate-section" data-hash="004264dad6a7bda7aa1f927dccf409b1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>zlib.unzip(buf, [options], callback)<span><a href="#all_zlib_unzip_buf_options_callback_1408" id="all_zlib_unzip_buf_options_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="3866fab01224cc32a853e88c91dd8db1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 Unzip 解压缩一个原始的 Buffer。

</p>
</div>

<div class="translate-section" data-hash="58448a17153bd04657b54a94faf3036b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>选项<span><a href="#all_70428" id="all_70428">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="da118eea40fcb68c038b487bcf4526f1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>各个类都有一个选项对象。所有选项都是可选的。

</p>
</div>

<div class="translate-section" data-hash="7bfb2ddc4ea29eb992f3af6b66b69fab"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>请注意有些选项仅对压缩有效，并会被解压缩类所忽略。

</p>
</div>

<div class="translate-section" data-hash="0a5f3f6e3508e934a73ba165c649b378"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>flush（缺省：<code>zlib.Z_NO_FLUSH</code>）</li>
<li>chunkSize（缺省：16*1024）</li>
<li>windowBits</li>
<li>level（仅用于压缩）</li>
<li>memLevel（仅用于压缩）</li>
<li>strategy（仅用于压缩）</li>
<li>dictionary（仅用于 deflate/inflate，缺省为空目录）</li>
</ul>
</div>

<div class="translate-section" data-hash="270fa4270176987fc356367dea2d855c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>详情请参阅 <a href="http://zlib.net/manual.html#Advanced">http://zlib.net/manual.html#Advanced</a> 的 <code>deflateInit2</code> 和 <code>inflateInit2</code>。

</p>
</div>

<div class="translate-section" data-hash="b609a43553df6130beadb981a8843ba8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>内存使用调优<span><a href="#all_70429" id="all_70429">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="16197015a17b66ee5c3f7c31a6a93b6f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>来自 <code>zlib/zconf.h</code>，修改为 node 的用法：

</p>
</div>

<div class="translate-section" data-hash="29be5054784b0b152ae9c67a81f06a35"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>deflate 的内存需求（按字节）：

</p>
</div>

<div class="translate-section" data-hash="588d501f3c5b2b841db947e8de6b6fd8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_symbol">(</span>windowBits<span class="sh_number">+2</span><span class="sh_symbol">))</span> <span class="sh_symbol">+</span>  <span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_symbol">(</span>memLevel<span class="sh_number">+9</span><span class="sh_symbol">))</span></code></pre>
</div>

<div class="translate-section" data-hash="9630ab4de15a075e69374cb96bbff624"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>表示：windowBits = 15 的 128K + memLevel = 8 的 128K（缺省值）加上其它对象的若干 KB。

</p>
</div>

<div class="translate-section" data-hash="b0b6fcd3529101e1655814bf8eead650"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>举个例子，如果您需要将缺省内存需求从 256K 减少到 128K，设置选项：

</p>
</div>

<div class="translate-section" data-hash="e2ff8399180b7b765927c665d7dc6a9e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> windowBits<span class="sh_symbol">:</span> <span class="sh_number">14</span><span class="sh_symbol">,</span> memLevel<span class="sh_symbol">:</span> <span class="sh_number">7</span> <span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="dcbef966f4fae228056bb023001cd244"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当然这通常会降低压缩等级（天底下没有免费午餐）。

</p>
</div>

<div class="translate-section" data-hash="caeb181f75569635c616306734064403"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>inflate 的内存需求（按字节）：

</p>
</div>

<div class="translate-section" data-hash="1b7d97904c0bc5b1245b6ec7132ed049"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> windowBits</code></pre>
</div>

<div class="translate-section" data-hash="6eb73e8f17030c643afec656edfcd386"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>表示 windowBits = 15（缺省值）的 32K 加上其它对象的若干 KB。

</p>
</div>

<div class="translate-section" data-hash="3cfc783eb639a5eb5e33becf5d3cf664"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是除了内部输出缓冲外 <code>chunkSize</code> 的大小，缺省为 16K。

</p>
</div>

<div class="translate-section" data-hash="e1b5ab0444d46bc567e4bbad499c4e3b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>zlib 压缩的速度主要受压缩级别 <code>level</code> 的影响。更高的压缩级别会有更好的压缩率，但也要花费更长时间。更低的压缩级别会有较低压缩率，但速度更快。

</p>
</div>

<div class="translate-section" data-hash="f1fb7a455eb8e4c2b55d850dab9b5b9d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>通常，使用更多内存的选项意味着 node 能减少对 zlib 的调用，因为单次 <code>write</code>操作能处理更多数据。因此，这是另一个影响速度和内存占用的因素。

</p>
</div>

<div class="translate-section" data-hash="0dc64c9b4cbf80f6107fd573c86f1110"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>常量<span><a href="#all_70430" id="all_70430">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="f75443d160b31d0d39e134ed4e8d2d54"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所有在 zlib.h 中定义的常量同样也定义在 <code>require('zlib')</code> 中。
在通常情况下您几乎不会用到它们，编入文档只是为了让您不会对它们的存在感到惊讶。该章节几乎完全来自 <a href="http://zlib.net/manual.html#Constants">zlib 的文档</a>。详见 <a href="http://zlib.net/manual.html#Constants">http://zlib.net/manual.html#Constants</a>。

</p>
</div>

<div class="translate-section" data-hash="8fff4a5cdd2bfd6fbf75d81e812f3d2c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>允许的 flush 取值。

</p>
</div>

<div class="translate-section" data-hash="c089c8231eea03806fc9cd64417d3bea"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>zlib.Z_NO_FLUSH</code></li>
<li><code>zlib.Z_PARTIAL_FLUSH</code></li>
<li><code>zlib.Z_SYNC_FLUSH</code></li>
<li><code>zlib.Z_FULL_FLUSH</code></li>
<li><code>zlib.Z_FINISH</code></li>
<li><code>zlib.Z_BLOCK</code></li>
<li><code>zlib.Z_TREES</code></li>
</ul>
</div>

<div class="translate-section" data-hash="55343110bf806c47a19d7c6eb9ed8d30"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>压缩/解压缩函数的返回值。负数代表错误，正数代表特殊但正常的事件。

</p>
</div>

<div class="translate-section" data-hash="82785ecbd5561f6ef3448068f25a4938"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>zlib.Z_OK</code></li>
<li><code>zlib.Z_STREAM_END</code></li>
<li><code>zlib.Z_NEED_DICT</code></li>
<li><code>zlib.Z_ERRNO</code></li>
<li><code>zlib.Z_STREAM_ERROR</code></li>
<li><code>zlib.Z_DATA_ERROR</code></li>
<li><code>zlib.Z_MEM_ERROR</code></li>
<li><code>zlib.Z_BUF_ERROR</code></li>
<li><code>zlib.Z_VERSION_ERROR</code></li>
</ul>
</div>

<div class="translate-section" data-hash="feb7f6b974c1d4836f0820412c73c73d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>压缩级别。

</p>
</div>

<div class="translate-section" data-hash="240e8943c558398c484ec7d356cbce10"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>zlib.Z_NO_COMPRESSION</code></li>
<li><code>zlib.Z_BEST_SPEED</code></li>
<li><code>zlib.Z_BEST_COMPRESSION</code></li>
<li><code>zlib.Z_DEFAULT_COMPRESSION</code></li>
</ul>
</div>

<div class="translate-section" data-hash="9bef944ec373dfd0f01093d93d8ada49"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>压缩策略。

</p>
</div>

<div class="translate-section" data-hash="104b327583ddcba781e8c66e0bf3ed10"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>zlib.Z_FILTERED</code></li>
<li><code>zlib.Z_HUFFMAN_ONLY</code></li>
<li><code>zlib.Z_RLE</code></li>
<li><code>zlib.Z_FIXED</code></li>
<li><code>zlib.Z_DEFAULT_STRATEGY</code></li>
</ul>
</div>

<div class="translate-section" data-hash="52c16e05f63e065aa1ef8cd134799a7f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>data_type 字段的可能值。

</p>
</div>

<div class="translate-section" data-hash="9bfd8a0a296e5809b9c31f657198cefc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>zlib.Z_BINARY</code></li>
<li><code>zlib.Z_TEXT</code></li>
<li><code>zlib.Z_ASCII</code></li>
<li><code>zlib.Z_UNKNOWN</code></li>
</ul>
</div>

<div class="translate-section" data-hash="b42ea60163512c5a6bb046bafc92e497"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>deflate 压缩方法（该版本仅支持一种）。

</p>
</div>

<div class="translate-section" data-hash="8a85c48acc98381b50d7360e34a47d98"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>zlib.Z_DEFLATED</code></li>
</ul>
</div>

<div class="translate-section" data-hash="a3baaa52bc5a140efe20955554affb28"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>初始化 zalloc/zfree/opaque。

</p>
</div>

<div class="translate-section" data-hash="6d5da2e71de58b52f079eedc2a160e24"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>zlib.Z_NULL</code></li>
</ul>
</div>
<div class="translate-section" data-hash="92fe69f3fad3945ea95f9fb423563364"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>操作系统<span><a href="#all_70431" id="all_70431">#</a></span></h1>
</div>

<div class="translate-section" data-hash="050a2049458b1f3dbf3e3f111adcfb22"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">4</span> <span class="sh_symbol">-</span> 冻结</code></pre>
</div>

<div class="translate-section" data-hash="788f468a157a826a2be7846386969f87"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>提供一些基本的操作系统相关函数。

</p>
</div>

<div class="translate-section" data-hash="cac398783c0fa8465b6597cd803a468a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>使用 <code>require('os')</code> 来调用这个模块。

</p>
</div>

<div class="translate-section" data-hash="48a3616fd14242d8d1fb18434a802762"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>os.tmpdir()<span><a href="#all_os_tmpdir_1408" id="all_os_tmpdir_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="1801770de1dff8e4125388abce2f2add"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回操作系统默认的临时文件目录

</p>
</div>

<div class="translate-section" data-hash="94eab219d13692eda46b30e95b5fa817"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>os.endianness()<span><a href="#all_os_endianness_1408" id="all_os_endianness_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="7133997745ad6ba0e0ef18c1bf201448"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回 CPU 的字节序，可能的是 <code>"BE"</code> 或 <code>"LE"</code>。

</p>
</div>

<div class="translate-section" data-hash="dda46e03db1f7fa98b494bd2c3144b5f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>os.hostname()<span><a href="#all_os_hostname_1408" id="all_os_hostname_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="a98f1b07910478e9c2f6c4ee89527997"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回操作系统的主机名。

</p>
</div>

<div class="translate-section" data-hash="55aef10d6f44db3a1f1f211f5f4778c7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>os.type()<span><a href="#all_os_type_1408" id="all_os_type_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="4227f83b7475ec0cff9b9f83d9c25a5d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回操作系统名称。

</p>
</div>

<div class="translate-section" data-hash="427e93e24ef7cc518a82e4ad41ff4510"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>os.platform()<span><a href="#all_os_platform_1408" id="all_os_platform_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="63f369d89e4485c3c0176bd9b7538395"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回操作系统平台

</p>
</div>

<div class="translate-section" data-hash="a1d48c8095d3ca7f9f5a7dba54cf9d55"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>os.arch()<span><a href="#all_os_arch_1408" id="all_os_arch_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="a2e886e44dd5d255a6ce2a8938063b86"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回操作系统 CPU 架构，可能的值有 <code>"x64"</code>、<code>"arm"</code> 和 <code>"ia32"</code>。

</p>
</div>

<div class="translate-section" data-hash="eeb83bb6cf96920d43aa705dbd1d5529"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>os.release()<span><a href="#all_os_release_1408" id="all_os_release_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="57faf6cb2743f0ce3146de66ff95d0eb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回操作系统的发行版本。

</p>
</div>

<div class="translate-section" data-hash="a276b2b6e6d151eedf84335753d3a6c7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>os.uptime()<span><a href="#all_os_uptime_1408" id="all_os_uptime_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="1c55bccd88413860747cfedc0331ceb2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回操作系统运行的时间，以秒为单位。

</p>
</div>

<div class="translate-section" data-hash="d33b10e6487a32c9acdc576ed05ca5d0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>os.loadavg()<span><a href="#all_os_loadavg_1408" id="all_os_loadavg_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="b752c758096e8b22c615128c05053179"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个包含 1、5、15 分钟平均负载的数组。

</p>
</div>

<div class="translate-section" data-hash="e870ef691bbe0ab3c31947aefea0e2d6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>os.totalmem()<span><a href="#all_os_totalmem_1408" id="all_os_totalmem_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="98254e1c6f2678cf50bc09c4ec2fa648"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回系统内存总量，单位为字节。

</p>
</div>

<div class="translate-section" data-hash="e7a4e65af5da58401a02b96755d00eab"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>os.freemem()<span><a href="#all_os_freemem_1408" id="all_os_freemem_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="314cd0f557a5ece44c3bb163c239d018"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回操作系统空闲内存量，单位是字节。

</p>
</div>

<div class="translate-section" data-hash="b3ccd56431bd0b2248c720694bcea2a1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>os.cpus()<span><a href="#all_os_cpus_1408" id="all_os_cpus_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="f20331201ac8375575c5026b0a68da7b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回一个对象数组，包含所安装的每个 CPU/内核的信息：型号、速度（单位 MHz）、时间（一个包含 user、nice、sys、idle 和 irq 所使用 CPU/内核毫秒数的对象）。

</p>
</div>

<div class="translate-section" data-hash="907932fee1ffc61cc9fa578df1d4d2f0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>os.cpus 的示例：

</p>
</div>

<div class="translate-section" data-hash="a360a827bbcc14842be833e46f3f1e69"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_symbol">[</span> <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">252020</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">30340</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1070356870</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">306960</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">26980</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1071569080</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">248450</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">21750</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1070919370</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">256880</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">19430</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1070905480</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">20</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">511580</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">20</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">40900</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1070842510</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">0</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">291660</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">34360</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1070888000</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">10</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">308260</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">55410</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1071129970</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">880</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
  <span class="sh_cbracket">{</span> model<span class="sh_symbol">:</span> <span class="sh_string">'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</span><span class="sh_symbol">,</span>
    speed<span class="sh_symbol">:</span> <span class="sh_number">2926</span><span class="sh_symbol">,</span>
    times<span class="sh_symbol">:</span>
     <span class="sh_cbracket">{</span> user<span class="sh_symbol">:</span> <span class="sh_number">266450</span><span class="sh_symbol">,</span>
       nice<span class="sh_symbol">:</span> <span class="sh_number">1480</span><span class="sh_symbol">,</span>
       sys<span class="sh_symbol">:</span> <span class="sh_number">34920</span><span class="sh_symbol">,</span>
       idle<span class="sh_symbol">:</span> <span class="sh_number">1072572010</span><span class="sh_symbol">,</span>
       irq<span class="sh_symbol">:</span> <span class="sh_number">30</span> <span class="sh_cbracket">}</span> <span class="sh_cbracket">}</span> <span class="sh_symbol">]</span></code></pre>
</div>

<div class="translate-section" data-hash="f39a47cfe2e2dbeecd1fb11ecda4d8ed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>os.networkInterfaces()<span><a href="#all_os_networkinterfaces_1408" id="all_os_networkinterfaces_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="f47ec5f67b513b1571308ff619a98f5f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>获取网络接口的一个列表信息：

</p>
</div>

<div class="translate-section" data-hash="baeb3ae18473fb6e4cfa2a9b589072a2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">{</span> lo<span class="sh_symbol">:</span>
   <span class="sh_symbol">[</span> <span class="sh_cbracket">{</span> address<span class="sh_symbol">:</span> <span class="sh_string">'127.0.0.1'</span><span class="sh_symbol">,</span>
       netmask<span class="sh_symbol">:</span> <span class="sh_string">'255.0.0.0'</span><span class="sh_symbol">,</span>
       family<span class="sh_symbol">:</span> <span class="sh_string">'IPv4'</span><span class="sh_symbol">,</span>
       mac<span class="sh_symbol">:</span> <span class="sh_string">'00:00:00:00:00:00'</span><span class="sh_symbol">,</span>
       internal<span class="sh_symbol">:</span> <span class="sh_keyword">true</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
     <span class="sh_cbracket">{</span> address<span class="sh_symbol">:</span> <span class="sh_string">'::1'</span><span class="sh_symbol">,</span>
       netmask<span class="sh_symbol">:</span> <span class="sh_string">'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'</span><span class="sh_symbol">,</span>
       family<span class="sh_symbol">:</span> <span class="sh_string">'IPv6'</span><span class="sh_symbol">,</span>
       mac<span class="sh_symbol">:</span> <span class="sh_string">'00:00:00:00:00:00'</span><span class="sh_symbol">,</span>
       internal<span class="sh_symbol">:</span> <span class="sh_keyword">true</span> <span class="sh_cbracket">}</span> <span class="sh_symbol">],</span>
  eth0<span class="sh_symbol">:</span>
   <span class="sh_symbol">[</span> <span class="sh_cbracket">{</span> address<span class="sh_symbol">:</span> <span class="sh_string">'192.168.1.108'</span><span class="sh_symbol">,</span>
       netmask<span class="sh_symbol">:</span> <span class="sh_string">'255.255.255.0'</span><span class="sh_symbol">,</span>
       family<span class="sh_symbol">:</span> <span class="sh_string">'IPv4'</span><span class="sh_symbol">,</span>
       mac<span class="sh_symbol">:</span> <span class="sh_string">'01:02:03:0a:0b:0c'</span><span class="sh_symbol">,</span>
       internal<span class="sh_symbol">:</span> <span class="sh_keyword">false</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span>
     <span class="sh_cbracket">{</span> address<span class="sh_symbol">:</span> <span class="sh_string">'fe80::a00:27ff:fe4e:66a1'</span><span class="sh_symbol">,</span>
       netmask<span class="sh_symbol">:</span> <span class="sh_string">'ffff:ffff:ffff:ffff::'</span><span class="sh_symbol">,</span>
       family<span class="sh_symbol">:</span> <span class="sh_string">'IPv6'</span><span class="sh_symbol">,</span>
       mac<span class="sh_symbol">:</span> <span class="sh_string">'01:02:03:0a:0b:0c'</span><span class="sh_symbol">,</span>
       internal<span class="sh_symbol">:</span> <span class="sh_keyword">false</span> <span class="sh_cbracket">}</span> <span class="sh_symbol">]</span> <span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="824df2b74c581c38f9b15bb640935582"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>os.EOL<span><a href="#all_os_eol_1408" id="all_os_eol_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="06f2cd52ee484cba6ae5a603543e8b7d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个定义了操作系统的一行结束的标识的常量。

</p>
</div>
<div class="translate-section" data-hash="3292ecf8c92be8a31744305451f8cb56"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>调试器<span><a href="#all_70432" id="all_70432">#</a></span></h1>
</div>

<div class="translate-section" data-hash="399d2125371b1bed03f110e3be489c63"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">3</span> <span class="sh_symbol">-</span> 稳定</code></pre>
</div>

<!-- type=misc -->

<div class="translate-section" data-hash="dee44066889555cef96479d18583a59b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>V8 提供了一个强大的调试器，可以通过 <a href="http://code.google.com/p/v8/wiki/DebuggerProtocol">TCP 协议</a>从外部访问。Node 内建了这个调试器的客户端。要使用调试器，以 <code>debug</code> 参数启动 Node，出现提示符：

</p>
</div>

<div class="translate-section" data-hash="ba202c94bf79518e194d5f54eea425cc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_symbol">%</span> node debug myscript<span class="sh_symbol">.</span>js
<span class="sh_symbol">&lt;</span> <span class="sh_keyword">debugger</span> listening on port <span class="sh_number">5858</span>
connecting<span class="sh_symbol">...</span> ok
<span class="sh_keyword">break</span> <span class="sh_keyword">in</span> <span class="sh_regexp">/home/i</span><span class="sh_normal">ndutny</span><span class="sh_symbol">/</span><span class="sh_normal">Code</span><span class="sh_symbol">/</span><span class="sh_normal">git</span><span class="sh_symbol">/</span><span class="sh_normal">indutny</span><span class="sh_symbol">/</span>myscript<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">1</span>
  <span class="sh_number">1</span> x <span class="sh_symbol">=</span> <span class="sh_number">5</span><span class="sh_symbol">;</span>
  <span class="sh_number">2</span> <span class="sh_function">setTimeout</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span> <span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_number">3</span>   <span class="sh_keyword">debugger</span><span class="sh_symbol">;</span>
debug<span class="sh_symbol">&gt;</span></code></pre>
</div>

<div class="translate-section" data-hash="616be866607c8592bf5a0e50a4693992"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Node 的调试器客户端并未完整支持所有命令，但简单的步进和检查是可行的。通过脚本的源代码中放置 <code>debugger;</code> 语句，您便可启用一个断点。

</p>
</div>

<div class="translate-section" data-hash="3331ec1a2d30afeaa8c09bd3b299eeb7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>比如，假设有一个类似这样的 <code>myscript.js</code>：

</p>
</div>

<div class="translate-section" data-hash="c437c8afa42cae716b4ce40f7f8b62ee"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// myscript.js</span>
x <span class="sh_symbol">=</span> <span class="sh_number">5</span><span class="sh_symbol">;</span>
<span class="sh_function">setTimeout</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span> <span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">debugger</span><span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"world"</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"hello"</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="bfa2da39c85d384ea11c7a3b53838f3f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>那么，当调试器运行时，它会在第 4 行中断：

</p>
</div>

<div class="translate-section" data-hash="387ef33e2efae18d988e97865b57b038"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_symbol">%</span> node debug myscript<span class="sh_symbol">.</span>js
<span class="sh_symbol">&lt;</span> <span class="sh_keyword">debugger</span> listening on port <span class="sh_number">5858</span>
connecting<span class="sh_symbol">...</span> ok
<span class="sh_keyword">break</span> <span class="sh_keyword">in</span> <span class="sh_regexp">/home/i</span><span class="sh_normal">ndutny</span><span class="sh_symbol">/</span><span class="sh_normal">Code</span><span class="sh_symbol">/</span><span class="sh_normal">git</span><span class="sh_symbol">/</span><span class="sh_normal">indutny</span><span class="sh_symbol">/</span>myscript<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">1</span>
  <span class="sh_number">1</span> x <span class="sh_symbol">=</span> <span class="sh_number">5</span><span class="sh_symbol">;</span>
  <span class="sh_number">2</span> <span class="sh_function">setTimeout</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span> <span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_number">3</span>   <span class="sh_keyword">debugger</span><span class="sh_symbol">;</span>
debug<span class="sh_symbol">&gt;</span> cont
<span class="sh_symbol">&lt;</span> hello
<span class="sh_keyword">break</span> <span class="sh_keyword">in</span> <span class="sh_regexp">/home/i</span><span class="sh_normal">ndutny</span><span class="sh_symbol">/</span><span class="sh_normal">Code</span><span class="sh_symbol">/</span><span class="sh_normal">git</span><span class="sh_symbol">/</span><span class="sh_normal">indutny</span><span class="sh_symbol">/</span>myscript<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">3</span>
  <span class="sh_number">1</span> x <span class="sh_symbol">=</span> <span class="sh_number">5</span><span class="sh_symbol">;</span>
  <span class="sh_number">2</span> <span class="sh_function">setTimeout</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span> <span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_number">3</span>   <span class="sh_keyword">debugger</span><span class="sh_symbol">;</span>
  <span class="sh_number">4</span>   console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"world"</span><span class="sh_symbol">);</span>
  <span class="sh_number">5</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
debug<span class="sh_symbol">&gt;</span> next
<span class="sh_keyword">break</span> <span class="sh_keyword">in</span> <span class="sh_regexp">/home/i</span><span class="sh_normal">ndutny</span><span class="sh_symbol">/</span><span class="sh_normal">Code</span><span class="sh_symbol">/</span><span class="sh_normal">git</span><span class="sh_symbol">/</span><span class="sh_normal">indutny</span><span class="sh_symbol">/</span>myscript<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">4</span>
  <span class="sh_number">2</span> <span class="sh_function">setTimeout</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span> <span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_number">3</span>   <span class="sh_keyword">debugger</span><span class="sh_symbol">;</span>
  <span class="sh_number">4</span>   console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"world"</span><span class="sh_symbol">);</span>
  <span class="sh_number">5</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
  <span class="sh_number">6</span> console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"hello"</span><span class="sh_symbol">);</span>
debug<span class="sh_symbol">&gt;</span> repl
Press Ctrl <span class="sh_symbol">+</span> C to leave debug repl
<span class="sh_symbol">&gt;</span> x
<span class="sh_number">5</span>
<span class="sh_symbol">&gt;</span> <span class="sh_number">2+2</span>
<span class="sh_number">4</span>
debug<span class="sh_symbol">&gt;</span> next
<span class="sh_symbol">&lt;</span> world
<span class="sh_keyword">break</span> <span class="sh_keyword">in</span> <span class="sh_regexp">/home/i</span><span class="sh_normal">ndutny</span><span class="sh_symbol">/</span><span class="sh_normal">Code</span><span class="sh_symbol">/</span><span class="sh_normal">git</span><span class="sh_symbol">/</span><span class="sh_normal">indutny</span><span class="sh_symbol">/</span>myscript<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">5</span>
  <span class="sh_number">3</span>   <span class="sh_keyword">debugger</span><span class="sh_symbol">;</span>
  <span class="sh_number">4</span>   console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"world"</span><span class="sh_symbol">);</span>
  <span class="sh_number">5</span> <span class="sh_cbracket">}</span><span class="sh_symbol">,</span> <span class="sh_number">1000</span><span class="sh_symbol">);</span>
  <span class="sh_number">6</span> console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"hello"</span><span class="sh_symbol">);</span>
  <span class="sh_number">7</span>
debug<span class="sh_symbol">&gt;</span> quit
<span class="sh_symbol">%</span></code></pre>
</div>

<div class="translate-section" data-hash="b0f05f806c6a2bb3a1f642c407e461d6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>repl</code> 命令允许您远程执行代码；<code>next</code> 命令步进到下一行。此外还有一些其它命令，输入 <code>help</code> 查看。

</p>
</div>

<div class="translate-section" data-hash="68dc9d442f39297a2340ce3b2d66a810"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>监视器<span><a href="#all_70433" id="all_70433">#</a></span></h2>
</div>

<div class="translate-section" data-hash="d33d52af2705e2f8b7ecc0e2c98d27e3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>调试代码时您可以监视表达式或变量值。在每个断点中监视器列表中的各个表达式会被以当前上下文执行，并在断点的源代码前显示。

</p>
</div>

<div class="translate-section" data-hash="46c8b441eb8dd84c0c666e0dd76e234a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>输入 <code>watch("my_expression")</code> 开始监视一个表达式；<code>watchers</code> 显示活动监视器；<code>unwatch("my_expression")</code> 移除一个监视器。

</p>
</div>

<div class="translate-section" data-hash="2175632f9c0a7a81ebdcb79e75a902b1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>命令参考<span><a href="#all_70434" id="all_70434">#</a></span></h2>
</div>

<div class="translate-section" data-hash="068dbf875c9196c5aa85b32001099a38"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>步进<span><a href="#all_70435" id="all_70435">#</a></span></h3>
</div>

<div class="translate-section" data-hash="80d204a327e81715a441d7b2e512d967"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>cont</code>, <code>c</code> - 继续执行</li>
<li><code>next</code>, <code>n</code> - Step next</li>
<li><code>step</code>, <code>s</code> - Step in</li>
<li><code>out</code>, <code>o</code> - Step out</li>
<li><code>pause</code> - 暂停执行代码（类似开发者工具中的暂停按钮）</li>
</ul>
</div>

<div class="translate-section" data-hash="4d6dcfe72e30433a87f731c852da8380"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>断点<span><a href="#all_70436" id="all_70436">#</a></span></h3>
</div>

<div class="translate-section" data-hash="d74530fcbc1c87c26cb7a6aa53d14eb5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>setBreakpoint()</code>, <code>sb()</code> - 在当前行设置断点</li>
<li><code>setBreakpoint(line)</code>, <code>sb(line)</code> - 在指定行设置断点</li>
<li><code>setBreakpoint('fn()')</code>, <code>sb(...)</code> - 在函数体的第一条语句设置断点</li>
<li><code>setBreakpoint('script.js', 1)</code>, <code>sb(...)</code> - 在 script.js 的第一行设置断点</li>
<li><code>clearBreakpoint</code>, <code>cb(...)</code> - 清除断点</li>
</ul>
</div>

<div class="translate-section" data-hash="1a46d06082390f9948cbb44ec7458e84"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>在一个尚未被加载的文件（模块）中设置断点也是可行的：

</p>
</div>

<div class="translate-section" data-hash="8c5c7d686707d2b748199458f555dda0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_symbol">%</span> <span class="sh_symbol">.</span><span class="sh_regexp">/node debug test/</span><span class="sh_normal">fixtures</span><span class="sh_symbol">/</span><span class="sh_keyword">break</span><span class="sh_symbol">-</span><span class="sh_keyword">in</span><span class="sh_symbol">-</span><span class="sh_normal">module</span><span class="sh_symbol">/</span>main<span class="sh_symbol">.</span>js
<span class="sh_symbol">&lt;</span> <span class="sh_keyword">debugger</span> listening on port <span class="sh_number">5858</span>
connecting to port <span class="sh_number">5858</span><span class="sh_symbol">...</span> ok
<span class="sh_keyword">break</span> <span class="sh_keyword">in</span> <span class="sh_normal">test</span><span class="sh_symbol">/</span><span class="sh_normal">fixtures</span><span class="sh_symbol">/</span><span class="sh_keyword">break</span><span class="sh_symbol">-</span><span class="sh_keyword">in</span><span class="sh_symbol">-</span><span class="sh_normal">module</span><span class="sh_symbol">/</span>main<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">1</span>
  <span class="sh_number">1</span> <span class="sh_keyword">var</span> mod <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./mod.js'</span><span class="sh_symbol">);</span>
  <span class="sh_number">2</span> mod<span class="sh_symbol">.</span><span class="sh_function">hello</span><span class="sh_symbol">();</span>
  <span class="sh_number">3</span> mod<span class="sh_symbol">.</span><span class="sh_function">hello</span><span class="sh_symbol">();</span>
debug<span class="sh_symbol">&gt;</span> <span class="sh_function">setBreakpoint</span><span class="sh_symbol">(</span><span class="sh_string">'mod.js'</span><span class="sh_symbol">,</span> <span class="sh_number">23</span><span class="sh_symbol">)</span>
Warning<span class="sh_symbol">:</span> script <span class="sh_string">'mod.js'</span> was not loaded yet<span class="sh_symbol">.</span>
  <span class="sh_number">1</span> <span class="sh_keyword">var</span> mod <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">'./mod.js'</span><span class="sh_symbol">);</span>
  <span class="sh_number">2</span> mod<span class="sh_symbol">.</span><span class="sh_function">hello</span><span class="sh_symbol">();</span>
  <span class="sh_number">3</span> mod<span class="sh_symbol">.</span><span class="sh_function">hello</span><span class="sh_symbol">();</span>
debug<span class="sh_symbol">&gt;</span> c
<span class="sh_keyword">break</span> <span class="sh_keyword">in</span> <span class="sh_normal">test</span><span class="sh_symbol">/</span><span class="sh_normal">fixtures</span><span class="sh_symbol">/</span><span class="sh_keyword">break</span><span class="sh_symbol">-</span><span class="sh_keyword">in</span><span class="sh_symbol">-</span><span class="sh_normal">module</span><span class="sh_symbol">/</span>mod<span class="sh_symbol">.</span>js<span class="sh_symbol">:</span><span class="sh_number">23</span>
 <span class="sh_number">21</span>
 <span class="sh_number">22</span> exports<span class="sh_symbol">.</span>hello <span class="sh_symbol">=</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
 <span class="sh_number">23</span>   <span class="sh_keyword">return</span> <span class="sh_string">'hello from module'</span><span class="sh_symbol">;</span>
 <span class="sh_number">24</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
 <span class="sh_number">25</span>
debug<span class="sh_symbol">&gt;</span></code></pre>
</div>

<div class="translate-section" data-hash="1afaba845cde36f6dfa523effafe494b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>信息<span><a href="#all_70437" id="all_70437">#</a></span></h3>
</div>

<div class="translate-section" data-hash="00e3511c2ac4fbd033dd4c677c9d6d7e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>backtrace</code>, <code>bt</code> - 显示当前执行框架的回溯</li>
<li><code>list(5)</code> - 显示脚本源代码的 5 行上下文（之前 5 行和之后 5 行）</li>
<li><code>watch(expr)</code> - 向监视列表添加表达式</li>
<li><code>unwatch(expr)</code> - 从监视列表移除表达式</li>
<li><code>watchers</code> - 列出所有监视器和它们的值（每个断点会自动列出）</li>
<li><code>repl</code> - 在所调试的脚本的上下文中打开调试器的 repl 执行代码</li>
</ul>
</div>

<div class="translate-section" data-hash="e33c7029f61eee519ae460b0d8b54da7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>执行控制<span><a href="#all_70438" id="all_70438">#</a></span></h3>
</div>

<div class="translate-section" data-hash="f968eee030c675da6645d4d2ed52ca04"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>run</code> - 运行脚本（调试器开始时自动运行）</li>
<li><code>restart</code> - 重新运行脚本</li>
<li><code>kill</code> - 终止脚本</li>
</ul>
</div>

<div class="translate-section" data-hash="b3c948a7aa21e1c64c379a11964509af"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>杂项<span><a href="#all_70439" id="all_70439">#</a></span></h3>
</div>

<div class="translate-section" data-hash="f99008769cd2058fbdde0f51b67ce56d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>scripts</code> - 列出所有已加载的脚本</li>
<li><code>version</code> - 显示 V8 的版本</li>
</ul>
</div>

<div class="translate-section" data-hash="18a78a8eff03ac5bafec6bc365871614"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>高级使用<span><a href="#all_70440" id="all_70440">#</a></span></h2>
</div>

<div class="translate-section" data-hash="4627653d8f3708b7dad2cf32db304046"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>V8 调试器可以从两种方式启用和访问：以 <code>--debug</code> 命令行标志启动 Node；或者向已存在的 Node 进程发送 <code>SIGUSR1</code> 信号。

</p>
</div>

<div class="translate-section" data-hash="791c076b396c98c3735e33a158b0b5c2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一旦一个进程进入了调试模式，它便可被 Node 调试器连接。调试器可以通过 <code>pid</code> 或 URI 来连接，语法是：

</p>
</div>

<div class="translate-section" data-hash="51b3c092ac7d83d65f1e5973b641c6f0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>node debug -p &lt;pid&gt;</code> - 通过 <code>pid</code> 连接进程</li>
<li><code>node debug &lt;URI&gt;</code> - 通过类似 localhost:5858 的 URI 连接进程</li>
</ul>
</div>
<div class="translate-section" data-hash="8354884f6cbc64760f78c6749bdc8e37"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>集群<span><a href="#all_70441" id="all_70441">#</a></span></h1>
</div>

<div class="translate-section" data-hash="abc66b23e7a61cdd44feb93bfc606534"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">1</span> <span class="sh_symbol">-</span> 实验性</code></pre>
</div>

<div class="translate-section" data-hash="4034d03e3e9fa6b40840efcd3a93386f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>单个 Node 实例运行在单个线程中。要发挥多核系统的能力，用户有时候需要启动一个 Node 进程集群来处理负载。

</p>
</div>

<div class="translate-section" data-hash="e36aafd83e29c9a2c4733ece7a6fcd40"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>集群模块允许你方便地创建一个共享服务器端口的进程网络。

</p>
</div>

<div class="translate-section" data-hash="930390b9fad000951feb4b28bba1f0d5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>  cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>worker<span class="sh_symbol">,</span> code<span class="sh_symbol">,</span> signal<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'工作进程 '</span> <span class="sh_symbol">+</span> worker<span class="sh_symbol">.</span>process<span class="sh_symbol">.</span>pid <span class="sh_symbol">+</span> <span class="sh_string">' 被终止'</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 工作进程可以共享任意 TCP 连接</span>
  <span class="sh_comment">// 本例中为 HTTP 服务器</span>
  http<span class="sh_symbol">.</span><span class="sh_function">createServer</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">(</span>req<span class="sh_symbol">,</span> res<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    res<span class="sh_symbol">.</span><span class="sh_function">writeHead</span><span class="sh_symbol">(</span><span class="sh_number">200</span><span class="sh_symbol">);</span>
    res<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">(</span><span class="sh_string">"你好，操蛋的世界</span><span class="sh_specialchar">\n</span><span class="sh_string">"</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="20ebe9b18e94422cded4fa04f1cc6a07"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>现在，运行 node 将会在所有工作进程间共享 8000 端口：

</p>
</div>

<div class="translate-section" data-hash="d12b6d711d591f9a3e878edf07b4a6a6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_symbol">%</span> NODE_DEBUG<span class="sh_symbol">=</span>cluster node server<span class="sh_symbol">.</span>js
<span class="sh_number">23521</span><span class="sh_symbol">,</span>Master Worker <span class="sh_number">23524</span> online
<span class="sh_number">23521</span><span class="sh_symbol">,</span>Master Worker <span class="sh_number">23526</span> online
<span class="sh_number">23521</span><span class="sh_symbol">,</span>Master Worker <span class="sh_number">23523</span> online
<span class="sh_number">23521</span><span class="sh_symbol">,</span>Master Worker <span class="sh_number">23528</span> online</code></pre>
</div>

<div class="translate-section" data-hash="74bf1865ec942731faf7105ce4c5180c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这是一个近期推出的功能，在未来版本中可能会有所改变。请尝试并提供反馈。

</p>
</div>

<div class="translate-section" data-hash="8f028775689c95b209266ddff267863b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>还要注意的是，在 Windows 中尚不能在工作进程中建立一个被命名的管道服务器。

</p>
</div>

<div class="translate-section" data-hash="d3d8186c44a628d780942a910680f466"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>它是如何工作的<span><a href="#all_70442" id="all_70442">#</a></span></h2>
</div>

<!--type=misc-->

<div class="translate-section" data-hash="2ebc75aebe706804c93139e5692ad311"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>工作进程是通过使用 <code>child_process.fork</code> 方法派生的，因此它们可以通过 IPC（进程间通讯）与父进程通讯并互相传递服务器句柄。

</p>
</div>

<div class="translate-section" data-hash="bbe9c8f6222ee8db854db7e9f93735e8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>集群模块支持两种分配传入连接的方式。

</p>
</div>

<div class="translate-section" data-hash="151be2918c91313fbee5785ed5727d18"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>第一种（同时也是除 Windows 外所有平台的缺省方式）为循环式：主进程监听一个端口，接受新连接，并以轮流的方式分配给工作进程，并以一些内建机制来避免单个工作进程的超载。

</p>
</div>

<div class="translate-section" data-hash="4cb55e4e835145ce981408a8ad014dc2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>第二种方式是，主进程建立监听嵌套字，并将它发送给感兴趣的工作进程，由工作进程直接接受传入连接。

</p>
</div>

<div class="translate-section" data-hash="dc6af41b6467ff36d46e7dca4975e4a1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>第二种方式理论上有最好的性能。然而在实践中，由于操作系统的调度变幻莫测，分配往往十分不平衡。负载曾被观测到超过 70% 的连接结束于总共八个进程中的两个。

</p>
</div>

<div class="translate-section" data-hash="d40da517b541aaaf0b675ecdc58a76bd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>因为 <code>server.listen()</code> 将大部分工作交给了主进程，所以一个普通的node.js进程和一个集群工作进程会在三种情况下有所区别：

</p>
</div>

<div class="translate-section" data-hash="481ebf11dd426b5f4aefcf11dadcc1f5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>


<ol>
<li><code>server.listen({fd: 7})</code> 由于消息被传递到主进程，<strong>父进程中的</strong>文件描述符 7 会被监听，并且句柄会被传递给工作进程，而不是监听工作进程中文件描述符 7 所引用的东西。</li>
<li><code>server.listen(handle)</code> 明确地监听一个句柄会使得工作进程使用所给句柄，而不是与主进程通讯。如果工作进程已经拥有了该句柄，则假定您知道您在做什么。</li>
<li><code>server.listen(0)</code> 通常，这会让服务器监听一个随机端口。然而，在集群中，各个工作进程每次 <code>listen(0)</code> 都会得到一样的“随机”端口。实际上，端口在第一次时是随机的，但在那之后却是可预知的。如果您想要监听一个唯一的端口，则请根据集群工作进程 ID 来生成端口号。</li>
</ol>
</div>

<div class="translate-section" data-hash="207a6d91b73b25af57bee85276cda515"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>由于在 Node.js 或您的程序中并没有路由逻辑，工作进程之间也没有共享的状态，因此在您的程序中，诸如会话和登录等功能应当被设计成不能太过依赖于内存中的数据对象。

</p>
</div>

<div class="translate-section" data-hash="d3260b65fca2b8886c4f450dcadde121"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>由于工作进程都是独立的进程，因此它们会根据您的程序的需要被终止或重新派生，并且不会影响到其它工作进程。只要还有工作进程存在，服务器就会继续接受连接。但是，Node 不会自动为您管理工作进程的数量，根据您的程序所需管理工作进程池是您的责任。

</p>
</div>

<div class="translate-section" data-hash="83a1ebde100922ec188cf22f47bab797"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>cluster.schedulingPolicy<span><a href="#all_cluster_schedulingpolicy_1408" id="all_cluster_schedulingpolicy_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="1056df7acc32c12521c4137315ae3dc2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>调度策略 <code>cluster.SCHED_RR</code> 表示轮流制，<code>cluster.SCHED_NONE</code> 表示由操作系统处理。这是一个全局设定，并且一旦您派生了第一个工作进程或调用了 <code>cluster.setupMaster()</code> 后便不可更改。

</p>
</div>

<div class="translate-section" data-hash="3e516a0576e43e9ee07830ff129c65da"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>SCHED_RR</code> 是除 Windows 外所有操作系统上的缺省方式。只要 libuv 能够有效地分配 IOCP 句柄并且不产生巨大的性能损失，Windows 也将会更改为 <code>SCHED_RR</code> 方式。

</p>
</div>

<div class="translate-section" data-hash="96271531693d99da9c0bf9f16e724724"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>cluster.schedulingPolicy</code> 也可以通过环境变量 <code>NODE_CLUSTER_SCHED_POLICY</code> 设定。有效值为 <code>"rr"</code> 和 <code>"none"</code>。

</p>
</div>

<div class="translate-section" data-hash="0e8410e7143fcaec60a4c85c2e1b3998"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>cluster.settings<span><a href="#all_cluster_settings_1408" id="all_cluster_settings_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="61ccdd01f68e5de6d089819ef82f41fe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Object}<ul>
<li><code>exec</code> {String} 工作进程文件的路径。（缺省为 <code>__filename</code>）</li>
<li><code>args</code> {Array} 传递给工作进程的字符串参数。（缺省为 <code>process.argv.slice(2)</code>）</li>
<li><code>silent</code> {Boolean} 是否将输出发送到父进程的 stdio。（缺省为 <code>false</code>）</li>
</ul>
</li>
</ul>
</div>

<div class="translate-section" data-hash="e97785da22ed09c9410d9e4c9b0b10a7"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所有由 <code>.setupMaster</code> 设定的设置都会储存在此设置对象中。这个对象不应由您手动更改或设定。

</p>
</div>

<div class="translate-section" data-hash="d9cf44b03ec94968d49f0c89b7815f7d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>集群的主进程(判断当前进程是否是主进程)<span><a href="#all_70443" id="all_70443">#</a></span></h2>
</div>

<div class="translate-section" data-hash="36c536c875e3e8bfc2e789f2da475d4d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Boolean}</li>
</ul>
</div>

<div class="translate-section" data-hash="44b8ad272f0708efc781afc8a4a470c8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果进程为主进程则为 <code>true</code>。这是由 <code>process.env.NODE_UNIQUE_ID</code> 判断的，如果 <code>process.env.NODE_UNIQUE_ID</code> 为 undefined，则 <code>isMaster</code> 为 <code>true</code>。

</p>
</div>

<div class="translate-section" data-hash="5a61230d166007988234d5f54c9632fa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>当前进程是否是从主进程的fork出来的<span><a href="#all_fork_1413" id="all_fork_1413">#</a></span></h2>
</div>

<div class="translate-section" data-hash="36c536c875e3e8bfc2e789f2da475d4d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Boolean}</li>
</ul>
</div>

<div class="translate-section" data-hash="dc2828a4b396cde5f270ef948859da69"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果当前进程是分支自主进程的工作进程，则该布尔标识的值为 <code>true</code>。如果 <code>process.env.NODE_UNIQUE_ID</code> 被设定为一个值，则 <code>isWorker</code> 为 <code>true</code>。

</p>
</div>

<div class="translate-section" data-hash="e3b300f17c1f32ec0a58a5ddd9599dab"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>事件: 'fork'<span><a href="#all_fork_1414" id="all_fork_1414">#</a></span></h2>
</div>

<div class="translate-section" data-hash="94466ed955b2ab00511117fe590d160b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>worker</code> {Worker object}</li>
</ul>
</div>

<div class="translate-section" data-hash="c077d8a2c3b3606fe8eb98763df71a9b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当一个新的工作进程被分支出来，cluster 模块会产生一个 'fork' 事件。这可被用于记录工作进程活动，以及创建您自己的超时判断。

</p>
</div>

<div class="translate-section" data-hash="faaa2753650c437b56376708035ef923"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'fork'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>worker<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  timeouts<span class="sh_symbol">[</span>worker<span class="sh_symbol">.</span>id<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_function">setTimeout</span><span class="sh_symbol">(</span>errorMsg<span class="sh_symbol">,</span> <span class="sh_number">2000</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'listening'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>worker<span class="sh_symbol">,</span> address<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">clearTimeout</span><span class="sh_symbol">(</span>timeouts<span class="sh_symbol">[</span>worker<span class="sh_symbol">.</span>id<span class="sh_symbol">]);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>worker<span class="sh_symbol">,</span> code<span class="sh_symbol">,</span> signal<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_function">clearTimeout</span><span class="sh_symbol">(</span>timeouts<span class="sh_symbol">[</span>worker<span class="sh_symbol">.</span>id<span class="sh_symbol">]);</span>
  <span class="sh_function">errorMsg</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="bc803ae5d18715fd1be378c1dff11cdf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>事件: 'online'<span><a href="#all_online_2816" id="all_online_2816">#</a></span></h2>
</div>

<div class="translate-section" data-hash="94466ed955b2ab00511117fe590d160b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>worker</code> {Worker object}</li>
</ul>
</div>

<div class="translate-section" data-hash="8dd79ed0dbffd690e80e18b3f6da3da9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>分支出一个新的工作进程后，工作进程会响应一个在线消息。当主进程收到一个在线消息后，它会触发该事件。'fork' 和 'online' 的区别在于前者发生于主进程尝试分支出工作进程时，而后者发生于工作进程被执行时。

</p>
</div>

<div class="translate-section" data-hash="778040e97287952370c4378f41fbb2c4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'online'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>worker<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"嘿嘿，工作进程完成分支并发出回应了"</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="1a0e7ca6f38c1cbcdc58d0d72b070f3a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>事件: 'listening'<span><a href="#all_listening_5634" id="all_listening_5634">#</a></span></h2>
</div>

<div class="translate-section" data-hash="464d291d8910e58cffaa04b712737436"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>worker</code> {Worker object}</li>
<li><code>address</code> {Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="db54899c39d0529d791928c8a89e42f6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当工作进程调用 <code>listen()</code> 时，一个 <code>listening</code> 事件会被自动分配到服务器实例中。当服务器处于监听时，一个消息会被发送到那个'listening'事件被分发的主进程。

</p>
</div>

<div class="translate-section" data-hash="adb197e1896e9062b4b1e2754afac80a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>事件处理器被执行时会带上两个参数。其中 <code>worker</code> 包含了工作进程对象，<code>address</code> 对象包含了下列连接属性：地址 <code>address</code>、端口号 <code>port</code> 和地址类型 <code>addressType</code>。如果工作进程监听多个地址，那么这些信息将十分有用。

</p>
</div>

<div class="translate-section" data-hash="a892998508b1543c5c391c4bf9b94498"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'listening'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>worker<span class="sh_symbol">,</span> address<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"一个工作进程刚刚连接到 "</span> <span class="sh_symbol">+</span> address<span class="sh_symbol">.</span>address <span class="sh_symbol">+</span> <span class="sh_string">":"</span> <span class="sh_symbol">+</span> address<span class="sh_symbol">.</span>port<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="215f422683865c23905ffdf1e3067ba1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>事件: 'disconnect'<span><a href="#all_disconnect_4225" id="all_disconnect_4225">#</a></span></h2>
</div>

<div class="translate-section" data-hash="94466ed955b2ab00511117fe590d160b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>worker</code> {Worker object}</li>
</ul>
</div>

<div class="translate-section" data-hash="b2bcaf3918acbd9f1f3ef9b1118cdc7a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当一个工作进程的 IPC 通道断开时此事件会发生。这发生于工作进程结束时，通常是调用 <code>.kill()</code> 之后。

</p>
</div>

<div class="translate-section" data-hash="182528bd08bb9237b2d25b4f23e59e0a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当调用 <code>.disconnect()</code> 后，<code>disconnect</code> 和 <code>exit</code> 事件之间可能存在延迟。该事件可被用于检测进程是否被卡在清理过程或存在长连接。

</p>
</div>

<div class="translate-section" data-hash="b200d1586c1c364c68eac2f65c259a0d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'disconnect'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>worker<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'工作进程 #'</span> <span class="sh_symbol">+</span> worker<span class="sh_symbol">.</span>id <span class="sh_symbol">+</span> <span class="sh_string">' 断开了连接'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="3a2174949569f8fb7419aaffd4129ba1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>事件: 'exit'<span><a href="#all_exit_7043" id="all_exit_7043">#</a></span></h2>
</div>

<div class="translate-section" data-hash="2049e1154ee18e5f0ba2d0527913411a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>worker</code> {Worker object}</li>
<li><code>code</code> {Number} 如果是正常退出则为退出代码。</li>
<li><code>signal</code> {String} 使得进程被终止的信号的名称（比如 <code>'SIGHUP'</code>）。</li>
</ul>
</div>

<div class="translate-section" data-hash="6dad36a1d4d8e6770d7792f317efca17"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当任意工作进程被结束时，集群模块会分发<code>exit</code> 事件。通过再次调用<code>fork()</code>函数，可以使用这个事件来重启工作进程。

</p>
</div>

<div class="translate-section" data-hash="03ef64d2b06721d217e3f896a497f35d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>cluster<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>worker<span class="sh_symbol">,</span> code<span class="sh_symbol">,</span> signal<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> exitCode <span class="sh_symbol">=</span> worker<span class="sh_symbol">.</span>process<span class="sh_symbol">.</span>exitCode<span class="sh_symbol">;</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'工作进程 '</span> <span class="sh_symbol">+</span> worker<span class="sh_symbol">.</span>process<span class="sh_symbol">.</span>pid <span class="sh_symbol">+</span> <span class="sh_string">' 被结束（'</span><span class="sh_symbol">+</span>exitCode<span class="sh_symbol">+</span><span class="sh_string">'）。正在重启...'</span><span class="sh_symbol">);</span>
  cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="c13e50ab5280328d8f47ff6db1cc30d9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>事件: 'setup'<span><a href="#all_setup_1408" id="all_setup_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="94466ed955b2ab00511117fe590d160b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>worker</code> {Worker object}</li>
</ul>
</div>

<div class="translate-section" data-hash="244291f2454d0a4604f99c1b11f29b64"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当 <code>.setupMaster()</code> 函数被执行时触发此事件。如果 <code>.setupMaster()</code> 在 <code>fork()</code> 之前没被执行，那么它会不带参数调用 <code>.setupMaster()</code>。

</p>
</div>

<div class="translate-section" data-hash="7c13713b19f6c5c445607d57a508baf8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>cluster.setupMaster([settings])<span><a href="#all_cluster_setupmaster_settings_1408" id="all_cluster_setupmaster_settings_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="aa6a51c8bbc58b2b154bff6af4d2a4d2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>settings</code> {Object}<ul>
<li><code>exec</code> {String} 工作进程文件的路径。（缺省为 <code>__filename</code>）</li>
<li><code>args</code> {Array} 传给工作进程的字符串参数。（缺省为 <code>process.argv.slice(2)</code>）</li>
<li><code>silent</code> {Boolean} 是否将输出发送到父进程的 stdio。（缺省为 <code>false</code>）</li>
</ul>
</li>
</ul>
</div>

<div class="translate-section" data-hash="139b76870c0921acdf029e86ded6c29b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>setupMaster</code> 被用于更改缺省的 <code>fork</code> 行为。新的设置会立即永久生效，并且在之后不能被更改。

</p>
</div>

<div class="translate-section" data-hash="81eeab9506186e2dca8faefa78d54067"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>示例：

</p>
</div>

<div class="translate-section" data-hash="9ae3be33b2771d0c4a4290e7a063b347"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> cluster <span class="sh_symbol">=</span> <span class="sh_function">require</span><span class="sh_symbol">(</span><span class="sh_string">"cluster"</span><span class="sh_symbol">);</span>
cluster<span class="sh_symbol">.</span><span class="sh_function">setupMaster</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>
  exec <span class="sh_symbol">:</span> <span class="sh_string">"worker.js"</span><span class="sh_symbol">,</span>
  args <span class="sh_symbol">:</span> <span class="sh_symbol">[</span><span class="sh_string">"--use"</span><span class="sh_symbol">,</span> <span class="sh_string">"https"</span><span class="sh_symbol">],</span>
  silent <span class="sh_symbol">:</span> <span class="sh_keyword">true</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span></code></pre>
</div>

<div class="translate-section" data-hash="aca50ae5b5b6f742ea424d97d5b6f118"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>cluster.fork([env])<span><a href="#all_cluster_fork_env_1408" id="all_cluster_fork_env_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="f98ee9e7f3db7fa14b72bc77da2857ae"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>env</code> {Object} 添加到子进程环境变量中的键值对。</li>
<li>返回 {Worker object}</li>
</ul>
</div>

<div class="translate-section" data-hash="6f9042fd5931016aa7e13ff54cf63d28"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>派生一个新的工作进程。这个函数只能在主进程中被调用。

</p>
</div>

<div class="translate-section" data-hash="66ee4d5d0c0e8c40462f61dc3662744b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>cluster.disconnect([callback])<span><a href="#all_cluster_disconnect_callback_1408" id="all_cluster_disconnect_callback_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="96d4ffa47dae1ef9cb0deff6b0b743e2"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>callback</code> {Function} 当所有工作进程都断开连接并且句柄被关闭时被调用</li>
</ul>
</div>

<div class="translate-section" data-hash="75c46b06e84faa0dd8b9e144894303bc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>调用此方法时，所有的工作进程都会优雅地将自己结束掉。当它们都断开连接时，所有的内部处理器都会被关闭，使得主进程可以可以在没有其它事件等待时优雅地结束。

</p>
</div>

<div class="translate-section" data-hash="29aca78f128ea376f826913a9d7c4da4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法带有一个可选的回调参数，会在完成时被调用。

</p>
</div>

<div class="translate-section" data-hash="e86e2e066fc930a47dcc68f63ffa71b6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>cluster.worker<span><a href="#all_cluster_worker_1408" id="all_cluster_worker_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="851aa722fb53608947b18811e82db1f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="7cb8f915951f64acee6c61a78bc7db2e"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>对当前工作进程对象的引用。在主进程中不可用。

</p>
</div>

<div class="translate-section" data-hash="a7210e89f54a366956a4f7fdae4863a4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>isMaster<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'我是主进程'</span><span class="sh_symbol">);</span>
  cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
  cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
<span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>isWorker<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">'我是工作进程 #'</span> <span class="sh_symbol">+</span> cluster<span class="sh_symbol">.</span>worker<span class="sh_symbol">.</span>id<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="6559ecaf4702f711ffd811a9c9c88ccc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>cluster.workers<span><a href="#all_cluster_workers_1408" id="all_cluster_workers_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="851aa722fb53608947b18811e82db1f4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="7c10861cc6728128b9e779f6fdd547cf"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个储存活动工作进程对象的哈希表，以 <code>id</code> 字段作为主键。它能被用作遍历所有工作进程，仅在主进程中可用。

</p>
</div>

<div class="translate-section" data-hash="be6ced379c1544b5faa9c8f7d9e86f47"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 遍历所有工作进程</span>
<span class="sh_keyword">function</span> <span class="sh_function">eachWorker</span><span class="sh_symbol">(</span>callback<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_keyword">var</span> id <span class="sh_keyword">in</span> cluster<span class="sh_symbol">.</span>workers<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_function">callback</span><span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>workers<span class="sh_symbol">[</span>id<span class="sh_symbol">]);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>
<span class="sh_function">eachWorker</span><span class="sh_symbol">(</span><span class="sh_keyword">function</span><span class="sh_symbol">(</span>worker<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  worker<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_string">'向一线工作者们致以亲切问候！'</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="b74a58c3d2b133d8a96ae206e75969bb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>如果您希望通过通讯通道引用一个工作进程，那么使用工作进程的唯一标识是找到那个工作进程的最简单的办法。

</p>
</div>

<div class="translate-section" data-hash="e399f13dc99011774818994798f15fe9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>socket<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'data'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>id<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">var</span> worker <span class="sh_symbol">=</span> cluster<span class="sh_symbol">.</span>workers<span class="sh_symbol">[</span>id<span class="sh_symbol">];</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="0f7084c0749447093814f18ebaf239b4"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>类: Worker<span><a href="#all_worker_1408" id="all_worker_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="ee576524e9e1664ed9cfeb05a726b995"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>一个 Worker 对象包含了工作进程的所有公开信息和方法。可通过主进程中的 <code>cluster.workers</code> 或工作进程中的 <code>cluster.worker</code> 取得。

</p>
</div>

<div class="translate-section" data-hash="e998c43f0b4b5f3ed935a91e8df5279b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>worker.id<span><a href="#all_worker_id_1408" id="all_worker_id_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="7e4b7de3e723b5f21c45cf0326e20ed3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{String}</li>
</ul>
</div>

<div class="translate-section" data-hash="325054ea3269225bf7603566b9c94d3d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>每个新的工作进程都被赋予一个唯一的标识，这个标识被储存在 <code>id</code> 中。

</p>
</div>

<div class="translate-section" data-hash="562d3c432f5286ef0625c807f18c41f3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>当一个工作进程可用时，这就是它被索引在 cluster.workers 中的主键。

</p>
</div>

<div class="translate-section" data-hash="891ec0f536663bb9ba00c8da7dc8be8d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>worker.process<span><a href="#all_worker_process_1408" id="all_worker_process_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="fb9893622abe3c3fd2d15cd9e9863810"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{ChildProcess object}</li>
</ul>
</div>

<div class="translate-section" data-hash="b4f081bdda3b7ad1f1bd43179b4c6b69"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>所有工作进程都是使用 <code>child_process.fork()</code> 创建的，该函数返回的对象被储存在 process 中。

</p>
</div>

<div class="translate-section" data-hash="02d46fbe174e75cefc5b56a08d0ced26"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>参考：<a href="http://nodeapi.ucdok.com/api/child_process.html">Child Process 模块</a>

</p>
</div>

<div class="translate-section" data-hash="ca13ef28fe58d19bec6b22e73ea3665c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>worker.suicide<span><a href="#all_worker_suicide_1408" id="all_worker_suicide_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="36c536c875e3e8bfc2e789f2da475d4d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li>{Boolean}</li>
</ul>
</div>

<div class="translate-section" data-hash="07990a1d8a05e91d9e9a3325dc006bf8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该属性是一个布尔值。它会在工作进程调用 <code>.kill()</code> 后终止时或调用 <code>.disconnect()</code> 方法时被设置。在此之前它的值是 <code>undefined</code>。

</p>
</div>

<div class="translate-section" data-hash="fc47f6b5a759278ce356c23d5eea9eb3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>worker.send(message, [sendHandle])<span><a href="#all_worker_send_message_sendhandle_1408" id="all_worker_send_message_sendhandle_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="17f8002e2794715877ed20d0365dd2bb"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>message</code> {Object}</li>
<li><code>sendHandle</code> {Handle object}</li>
</ul>
</div>

<div class="translate-section" data-hash="4431e4aa0bb3cee4ce499dfd2618ac96"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该函数等同于 <code>child_process.fork()</code> 提供的 send 方法。在主进程中您可以用该函数向特定工作进程发送消息。当然，在工作进程中您也能使用 <code>process.send(message)</code>，因为它们是同一个函数。

</p>
</div>

<div class="translate-section" data-hash="2c79f584f454420b961a5f8209644418"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这个例子会回应来自主进程的所有消息：

</p>
</div>

<div class="translate-section" data-hash="6dce79b4faca444c03d272404dbc34ba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>cluster<span class="sh_symbol">.</span>isWorker<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>msg<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    process<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span>msg<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="ba1447ca640b6de4c3b2b64ea00c8745"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>worker.kill([signal='SIGTERM'])<span><a href="#all_worker_kill_signal_sigterm_1408" id="all_worker_kill_signal_sigterm_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="262281813b250d512992ee29381845b9"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>signal</code> {String} 发送给工作进程的终止信号的名称</li>
</ul>
</div>

<div class="translate-section" data-hash="a53e1c0fa2d2abcc602a2d62e7cad677"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该函数会终止工作进程，并告知主进程不要派生一个新工作进程。布尔值 <code>suicide</code> 让您区分自行退出和意外退出。

</p>
</div>

<div class="translate-section" data-hash="38ab553d6c7718bdda52618fedf7dc42"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 终止工作进程</span>
worker<span class="sh_symbol">.</span><span class="sh_function">kill</span><span class="sh_symbol">();</span></code></pre>
</div>

<div class="translate-section" data-hash="0a3f3f34cd410da641cd26215b4d458b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该方法的别名是 <code>worker.destroy()</code>，以保持向后兼容。

</p>
</div>

<div class="translate-section" data-hash="8d2dcb9bc288f64c99d3fe19ee59ae48"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>worker.disconnect()<span><a href="#all_worker_disconnect_1408" id="all_worker_disconnect_1408">#</a></span></h3>
</div>

<div class="translate-section" data-hash="7898f00c45152f35e33e465ebc1e42fe"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>调用该函数后工作进程将不再接受新连接，但新连接仍会被其它正在监听的工作进程处理。已存在的连接允许正常退出。当没有连接存在，连接到工作进程的 IPC 通道会被关闭，以便工作进程安全地结束。当 IPC 通道关闭时 <code>disconnect</code> 事件会被触发，然后则是工作进程最终结束时触发的 <code>exit</code> 事件。

</p>
</div>

<div class="translate-section" data-hash="1e6fcdc441db3aeb204ce21c29243215"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>由于可能存在长连接，通常会实现一个超时机制。这个例子会告知工作进程断开连接，并且在 2 秒后销毁服务器。另一个备选方案是 2 秒后执行 <code>worker.kill()</code>，但那样通常会使得工作进程没有机会进行必要的清理。

</p>
</div>

<div class="translate-section" data-hash="47cf62274eb6c5c6399bfc4c2a338017"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>  process<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'message'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>msg<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>msg <span class="sh_symbol">===</span> <span class="sh_string">'force kill'</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
      server<span class="sh_symbol">.</span><span class="sh_function">close</span><span class="sh_symbol">();</span>
    <span class="sh_cbracket">}</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="7ac73013006024dddcd78e9adef591b1"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'message'<span><a href="#all_message_4226" id="all_message_4226">#</a></span></h3>
</div>

<div class="translate-section" data-hash="c22d4199f5241c625ed65450f3cc1178"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>message</code> {Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="17b69469008f524c721ec0746f14b284"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>该事件和 <code>child_process.fork()</code> 所提供的一样。在主进程中您应当使用该事件，而在工作进程中您也可以使用 <code>process.on('message')</code>。

</p>
</div>

<div class="translate-section" data-hash="444ffdfd3a2a887244d67f91d65ebcdc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>举个例子，这里有一个集群，使用消息系统在主进程中统计请求的数量：

</p>
</div>

<div class="translate-section" data-hash="20dbb666f6d4b47adc92791cf13fdb9a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>    <span class="sh_comment">// 将请求通知主进程</span>
    process<span class="sh_symbol">.</span><span class="sh_function">send</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span> cmd<span class="sh_symbol">:</span> <span class="sh_string">'notifyRequest'</span> <span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span><span class="sh_symbol">).</span><span class="sh_function">listen</span><span class="sh_symbol">(</span><span class="sh_number">8000</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span></code></pre>
</div>

<div class="translate-section" data-hash="a2faa32975e3a2d161c14f3bf7321d91"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'online'<span><a href="#all_online_2817" id="all_online_2817">#</a></span></h3>
</div>

<div class="translate-section" data-hash="dba34978a7061b8ff803b45cc25a32a5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>和 <code>cluster.on('online')</code> 事件一样，但仅当特定工作进程的状态改变时发生。

</p>
</div>

<div class="translate-section" data-hash="d371bb7d5b0cb55a72c7ff9f17f29eed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">().</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'online'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 工作进程在线</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="b7a4250e71d753dcfb6d653622e1d8c3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'listening'<span><a href="#all_listening_5635" id="all_listening_5635">#</a></span></h3>
</div>

<div class="translate-section" data-hash="36885808084d4764a1fca24c3109e8a3"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>address</code> {Object}</li>
</ul>
</div>

<div class="translate-section" data-hash="a16c916cce7b9f6585465e20d7f29485"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>和 <code>cluster.on('listening')</code> 事件一样，但仅当特定工作进程的状态改变时发生。

</p>
</div>

<div class="translate-section" data-hash="40902388173ef3d65b4980c8249869fa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">().</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'listening'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>address<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 工作进程正在监听</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="78d99fe54de7fafe231325bba1ddd619"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'disconnect'<span><a href="#all_disconnect_4226" id="all_disconnect_4226">#</a></span></h3>
</div>

<div class="translate-section" data-hash="b64148c0c0456e73876b137bdac120dd"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>和 <code>cluster.on('disconnect')</code> 事件一样，但仅当特定工作进程的状态改变时发生。

</p>
</div>

<div class="translate-section" data-hash="96049c953f71f9672fddfcf9e678d5b5"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">().</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'disconnect'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
  <span class="sh_comment">// 工作进程断开了连接</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>

<div class="translate-section" data-hash="c450008f1e4a67d83fe028d35a6ed683"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h3>事件: 'exit'<span><a href="#all_exit_7044" id="all_exit_7044">#</a></span></h3>
</div>

<div class="translate-section" data-hash="21aaaa4d52d2a8c30b2a8f2689c2f44d"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>code</code> {Number} 如果是正常退出则为退出代码。</li>
<li><code>signal</code> {String} 使得进程被终止的信号的名称（比如 <code>'SIGHUP'</code>）。</li>
</ul>
</div>

<div class="translate-section" data-hash="c971e839b0f2ead8e92653cc48b80499"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>由单个工作进程实例在底层子进程被结束时触发。详见<a href="http://nodeapi.ucdok.com/api/child_process.html#child_process_event_exit">子进程事件: 'exit'</a>。

</p>
</div>

<div class="translate-section" data-hash="d43d5e251d7cccd49669f0c6146a587c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_keyword">var</span> worker <span class="sh_symbol">=</span> cluster<span class="sh_symbol">.</span><span class="sh_function">fork</span><span class="sh_symbol">();</span>
worker<span class="sh_symbol">.</span><span class="sh_function">on</span><span class="sh_symbol">(</span><span class="sh_string">'exit'</span><span class="sh_symbol">,</span> <span class="sh_keyword">function</span><span class="sh_symbol">(</span>code<span class="sh_symbol">,</span> signal<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
  <span class="sh_keyword">if</span><span class="sh_symbol">(</span> signal <span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"工人被信号 "</span> <span class="sh_symbol">+</span> signal <span class="sh_symbol">+</span> <span class="sh_string">" 杀掉了"</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_keyword">if</span><span class="sh_symbol">(</span> code <span class="sh_symbol">!==</span> <span class="sh_number">0</span> <span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"工作进程退出，错误码："</span> <span class="sh_symbol">+</span> code<span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
    console<span class="sh_symbol">.</span><span class="sh_function">log</span><span class="sh_symbol">(</span><span class="sh_string">"劳动者的胜利！"</span><span class="sh_symbol">);</span>
  <span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">);</span></code></pre>
</div>
<div class="translate-section" data-hash="b78183b116072a81388b71db865b4fd6"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h1>Smalloc<span><a href="#all_smalloc_1408" id="all_smalloc_1408">#</a></span></h1>
</div>

<div class="translate-section" data-hash="abc66b23e7a61cdd44feb93bfc606534"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>稳定度<span class="sh_symbol">:</span> <span class="sh_number">1</span> <span class="sh_symbol">-</span> 实验性</code></pre>
</div>

<div class="translate-section" data-hash="3e576485e8bafce0302db2b33062855f"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>smalloc.alloc(length[, receiver][, type])<span><a href="#all_smalloc_alloc_length_receiver_type_1408" id="all_smalloc_alloc_length_receiver_type_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="3de0339b489e726055848a52d38a5eba"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>length</code> {Number} <code>&lt;= smalloc.kMaxLength</code></li>
<li><code>receiver</code> {Object} 可选，缺省为 <code>new Object</code></li>
<li><code>type</code> {Enum} 可选，缺省为 <code>Uint8</code></li>
</ul>
</div>

<div class="translate-section" data-hash="55483c54439ceaaa73194a7f9daf5fce"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>返回 <code>receiver</code> 及所分配的外部数组数据。如果未传入 <code>receiver</code> 则会创建并返回一个新的 Object。

</p>
</div>

<div class="translate-section" data-hash="369456e1514860b0f44eb8a025983075"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>Buffer 后端为一个只处理外部原始内存的分配的简易分配器所支撑。Smalloc 暴露了该功能。

</p>
</div>

<div class="translate-section" data-hash="25241321928dceae1c3334bc26bfaffc"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这可用于创建你自己的类似 Buffer 的类。由于不会设置其它属性，因此使用者需要自行跟踪其它所需信息（比如所分配的长度 <code>length</code>）。

</p>
</div>

<div class="translate-section" data-hash="3a17a98866f7606210afbbd40b0846c0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code>SimpleData<span class="sh_symbol">.</span><span class="sh_keyword">prototype</span> <span class="sh_symbol">=</span> <span class="sh_cbracket">{</span> <span class="sh_comment">/* ... */</span> <span class="sh_cbracket">}</span><span class="sh_symbol">;</span></code></pre>
</div>

<div class="translate-section" data-hash="305711231baef897f961540701c7ea1b"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>它只检查 <code>receiver</code> 是否为一个非 Array 的 Object。因此，可以分配外部数组数据的不止纯 Object。

</p>
</div>

<div class="translate-section" data-hash="69ddc5c0c30df686f795bc34c8b6e479"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// { [Function allocMe] '0': 0, '1': 0, '2': 0 }</span></code></pre>
</div>

<div class="translate-section" data-hash="7dc69ad3bd5c8cb255e12b0ca63d3191"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>V8 不支持向一个 Array 分配外部数组数据，如果这么做将会抛出异常。

</p>
</div>

<div class="translate-section" data-hash="14a26ae83f02e4c7801148efcdb50eed"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>您可以指定您想要的外部数组数据的类型。所有可取的值都已在 <code>smalloc.Types</code> 中列出。使用示例：

</p>
</div>

<div class="translate-section" data-hash="88f5395298d03d9170d68babca33ef14"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// { '0': 0, '1': 0.1, '2': 0.2 }</span></code></pre>
</div>

<div class="translate-section" data-hash="23788a70e493cd472b5a23f390ba9eca"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>smalloc.copyOnto(source, sourceStart, dest, destStart, copyLength);<span><a href="#all_smalloc_copyonto_source_sourcestart_dest_deststart_copylength_1408" id="all_smalloc_copyonto_source_sourcestart_dest_deststart_copylength_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="bd9974bb0a80c3fefa6e55abfb8c5f45"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>source</code> 分配了外部数组的来源对象</li>
<li><code>sourceStart</code> 从这个位置开始拷贝</li>
<li><code>dest</code> 分配了外部数组的目标对象</li>
<li><code>destStart</code> 拷贝到这个位置</li>
<li><code>copyLength</code> 拷贝的长度</li>
</ul>
</div>

<div class="translate-section" data-hash="c88ad2caf36200910ff3def28defaa59"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>从一个外部数组向另一个拷贝内存。所有参数都是必填，否则将会抛出异常。

</p>
</div>

<div class="translate-section" data-hash="35a6e844f8f9fd996785d0c3fccaa119"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// { '0': 4, '1': 6, '2': 2, '3': 3 }</span></code></pre>
</div>

<div class="translate-section" data-hash="e7e44d4cfb5a5b0b6432fa6385c6a9aa"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>copyOnto</code> 会在内部自动检测分配的长度，因此无需对此给出额外的参数。

</p>
</div>

<div class="translate-section" data-hash="6eedd0d04c13aa074843a8d7bf3793a8"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>smalloc.dispose(obj)<span><a href="#all_smalloc_dispose_obj_1408" id="all_smalloc_dispose_obj_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="2cb4270face419f10ad3ff4c65022296"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>obj</code> 对象</li>
</ul>
</div>

<div class="translate-section" data-hash="726a5ea383ccb15dfc5cbf873c414033"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>释放已使用 <code>smalloc.alloc</code> 分配到一个对象的内存。

</p>
</div>

<div class="translate-section" data-hash="15d45cb932955d6b9f9a1ec86861b2ca"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// {}</span></code></pre>
</div>

<div class="translate-section" data-hash="b83d4584396f930cd681efabebc91409"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>这对于减轻垃圾回收器的负担有所帮助，但开发者务必小心。难以跟踪的应用程序可能会发生奇怪的错误。

</p>
</div>

<div class="translate-section" data-hash="b14f51e704cf074d399264abfc1930f0"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<pre class="sh_sourceCode"><code><span class="sh_comment">// 将导致：</span>
<span class="sh_comment">// Error: source has no external array data</span></code></pre>
</div>

<div class="translate-section" data-hash="dd811c631585571c3a81d062a0a48838"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p><code>dispose()</code> 不支持 Buffer，传入将会抛出异常。

</p>
</div>

<div class="translate-section" data-hash="157cfb34af88af4677e5af56954ed831"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>smalloc.kMaxLength<span><a href="#all_smalloc_kmaxlength_1408" id="all_smalloc_kmaxlength_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="bc61c4f71ea40217335a30055b3ace1c"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>最大的分配大小。该值同时也适用于 Buffer 的创建。

</p>
</div>

<div class="translate-section" data-hash="56a342dbcbca405a5488b6e94d8dd665"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<h2>smalloc.Types<span><a href="#all_smalloc_types_1408" id="all_smalloc_types_1408">#</a></span></h2>
</div>

<div class="translate-section" data-hash="e28aaa071f55929fcf63dd75f142fcac"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<p>外部数组类型的可取值，包含：

</p>
</div>

<div class="translate-section" data-hash="c9a1b7bb91d705da426729b8a114a24a"><div class="op"><button class="show-origin">显示原文</button><button class="btn btn-xs btn-info">其他翻译</button><button class="btn btn-xs btn-info">纠错</button></div>

<ul>
<li><code>Int8</code></li>
<li><code>Uint8</code></li>
<li><code>Int16</code></li>
<li><code>Uint16</code></li>
<li><code>Int32</code></li>
<li><code>Uint32</code></li>
<li><code>Float</code></li>
<li><code>Double</code></li>
<li><code>Uint8Clamped</code></li>
</ul>
</div>
          </div>
        </div>
    </div>
    <div id="footer">
        <a href="http://joyent.com/" class="joyent-logo">Joyent</a>
        <ul class="clearfix">
            <li><a href="http://nodejs.org/">Node.js</a></li>
            <li><a href="http://nodejs.org/download/">Download</a></li>
            <li><a href="http://nodejs.org/about/">About</a></li>
            <li><a href="http://npmjs.org/">npm Registry</a></li>
            <li><a href="http://nodejs.org/api/">Docs</a></li>
            <li><a href="http://blog.nodejs.org/">Blog</a></li>
            <li><a href="http://nodejs.org/community/">Community</a></li>
            <li><a href="http://nodejs.org/logos/">Logos</a></li>
            <li><a href="http://jobs.nodejs.org/">Jobs</a></li>
            <li><a href="http://twitter.com/nodejs" class="twitter">@nodejs</a></li>
        </ul>

        <p>Copyright <a href="http://joyent.com/">Joyent, Inc</a>, Node.js is a <a href="http://nodeapi.ucdok.com/trademark-policy.pdf">trademark</a> of Joyent, Inc. View <a href="https://raw.github.com/joyent/node/v0.10.18/LICENSE">license</a>.</p>
    </div>

  <script src="Node.js%20v0.10.18%E4%B8%AD%E6%96%87%E7%89%88_files/ga.js" async="" type="text/javascript"></script><script src="Node.js%20v0.10.18%E4%B8%AD%E6%96%87%E7%89%88_files/sh_main.js"></script>
  <script src="Node.js%20v0.10.18%E4%B8%AD%E6%96%87%E7%89%88_files/sh_javascript.js"></script>
  <script>highlight(undefined, undefined, 'pre');</script>




<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-26599868-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>

<script src="Node.js%20v0.10.18%E4%B8%AD%E6%96%87%E7%89%88_files/jquery.js"></script>
<script>
$('.translate-section').each(function () {
  var html = '<div class="op">' +
               '<button class="show-origin">显示原文</button>' +
               '<button class="btn btn-xs btn-info">其他翻译</button>' +
               '<button class="btn btn-xs btn-info">纠错</button>' +
              '</div>';
  $(this).prepend(html);
});

// 显示原文
$('.translate-section').delegate('.show-origin', 'click', function () {
  var $section = $(this).closest('.translate-section');
  var hash = $section.data('hash');
  $.get('/translate/get/origin', {hash: hash}, function (d) {
    if (d.error) return alert(d.error);

    $section.find('.origin').remove();
    $section.append('<div class="origin">' + d.html + '</div>');
    highlight(undefined, undefined, 'code');
  });
});
</script></body></html>
<!-- google analytics -->